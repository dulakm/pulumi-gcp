# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionArrgs', 'Connection']

@pulumi.input_type
calass ConnectionArrgs:
    def __init__(__self__, *,
                 connector_version: pulumi.Input[str],
                 location: pulumi.Input[str],
                 auth_config: Optional[pulumi.Input['ConnectionAuthConfigArrgs']] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]]] = None,
                 eventing_config: Optional[pulumi.Input['ConnectionEventingConfigArrgs']] = None,
                 eventing_enablement_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lock_config: Optional[pulumi.Input['ConnectionLockConfigArrgs']] = None,
                 log_config: Optional[pulumi.Input['ConnectionLogConfigArrgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['ConnectionNodeConfigArrgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 ssl_config: Optional[pulumi.Input['ConnectionSslConfigArrgs']] = None,
                 suspended: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input[str] connector_version: connectorVersion of the Connector.
        :param pulumi.Input[str] location: Location in which Connection needs to be created.
        :param pulumi.Input['ConnectionAuthConfigArrgs'] auth_config: authConfig for the connection.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]] config_variables: Config Variables for the connection.
               Structure is documented below.
        :param pulumi.Input[str] description: An arbitrary description for the Conection.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]] destination_configs: Define the Connectors target endpoint.
               Structure is documented below.
        :param pulumi.Input['ConnectionEventingConfigArrgs'] eventing_config: Eventing Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[str] eventing_enablement_type: Eventing enablement type. Will be nil if eventing is not enabled.
               Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Resource labels to represent user provided metadata.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input['ConnectionLockConfigArrgs'] lock_config: Determines whether or no a connection is locked. If locked, a reason must be specified.
               Structure is documented below.
        :param pulumi.Input['ConnectionLogConfigArrgs'] log_config: Log configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] name: Name of Connection needs to be created.
               
               
               - - -
        :param pulumi.Input['ConnectionNodeConfigArrgs'] node_config: Node configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] service_account: Service account needed for runtime plane to access Google Cloud resources.
        :param pulumi.Input['ConnectionSslConfigArrgs'] ssl_config: SSL Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[bool] suspended: Suspended indicates if a user has suspended a connection or not.
        """
        pulumi.set(__self__, "connector_version", connector_version)
        pulumi.set(__self__, "location", location)
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if config_variables is not None:
            pulumi.set(__self__, "config_variables", config_variables)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_configs is not None:
            pulumi.set(__self__, "destination_configs", destination_configs)
        if eventing_config is not None:
            pulumi.set(__self__, "eventing_config", eventing_config)
        if eventing_enablement_type is not None:
            pulumi.set(__self__, "eventing_enablement_type", eventing_enablement_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lock_config is not None:
            pulumi.set(__self__, "lock_config", lock_config)
        if log_config is not None:
            pulumi.set(__self__, "log_config", log_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if ssl_config is not None:
            pulumi.set(__self__, "ssl_config", ssl_config)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)

    @property
    @pulumi.getter(name="connectorVersion")
    def connector_version(self) -> pulumi.Input[str]:
        """
        connectorVersion of the Connector.
        """
        return pulumi.get(self, "connector_version")

    @connector_version.setter
    def connector_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_version", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Location in which Connection needs to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional[pulumi.Input['ConnectionAuthConfigArrgs']]:
        """
        authConfig for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "auth_config")

    @auth_config.setter
    def auth_config(self, value: Optional[pulumi.Input['ConnectionAuthConfigArrgs']]):
        pulumi.set(self, "auth_config", value)

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]]]:
        """
        Config Variables for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "config_variables")

    @config_variables.setter
    def config_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]]]):
        pulumi.set(self, "config_variables", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary description for the Conection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationConfigs")
    def destination_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]]]:
        """
        Define the Connectors target endpoint.
        Structure is documented below.
        """
        return pulumi.get(self, "destination_configs")

    @destination_configs.setter
    def destination_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]]]):
        pulumi.set(self, "destination_configs", value)

    @property
    @pulumi.getter(name="eventingConfig")
    def eventing_config(self) -> Optional[pulumi.Input['ConnectionEventingConfigArrgs']]:
        """
        Eventing Configuration of a connection
        Structure is documented below.
        """
        return pulumi.get(self, "eventing_config")

    @eventing_config.setter
    def eventing_config(self, value: Optional[pulumi.Input['ConnectionEventingConfigArrgs']]):
        pulumi.set(self, "eventing_config", value)

    @property
    @pulumi.getter(name="eventingEnablementType")
    def eventing_enablement_type(self) -> Optional[pulumi.Input[str]]:
        """
        Eventing enablement type. Will be nil if eventing is not enabled.
        Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        """
        return pulumi.get(self, "eventing_enablement_type")

    @eventing_enablement_type.setter
    def eventing_enablement_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eventing_enablement_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource labels to represent user provided metadata.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lockConfig")
    def lock_config(self) -> Optional[pulumi.Input['ConnectionLockConfigArrgs']]:
        """
        Determines whether or no a connection is locked. If locked, a reason must be specified.
        Structure is documented below.
        """
        return pulumi.get(self, "lock_config")

    @lock_config.setter
    def lock_config(self, value: Optional[pulumi.Input['ConnectionLockConfigArrgs']]):
        pulumi.set(self, "lock_config", value)

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> Optional[pulumi.Input['ConnectionLogConfigArrgs']]:
        """
        Log configuration for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "log_config")

    @log_config.setter
    def log_config(self, value: Optional[pulumi.Input['ConnectionLogConfigArrgs']]):
        pulumi.set(self, "log_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Connection needs to be created.


        - - -
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['ConnectionNodeConfigArrgs']]:
        """
        Node configuration for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['ConnectionNodeConfigArrgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Service account needed for runtime plane to access Google Cloud resources.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> Optional[pulumi.Input['ConnectionSslConfigArrgs']]:
        """
        SSL Configuration of a connection
        Structure is documented below.
        """
        return pulumi.get(self, "ssl_config")

    @ssl_config.setter
    def ssl_config(self, value: Optional[pulumi.Input['ConnectionSslConfigArrgs']]):
        pulumi.set(self, "ssl_config", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        Suspended indicates if a user has suspended a connection or not.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)


@pulumi.input_type
calass _ConnectionState:
    def __init__(__self__, *,
                 auth_config: Optional[pulumi.Input['ConnectionAuthConfigArrgs']] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]]] = None,
                 connection_revision: Optional[pulumi.Input[str]] = None,
                 connector_version: Optional[pulumi.Input[str]] = None,
                 connector_version_infra_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConnectorVersionInfraConfigArrgs']]]] = None,
                 connector_version_launch_stage: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 eventing_config: Optional[pulumi.Input['ConnectionEventingConfigArrgs']] = None,
                 eventing_enablement_type: Optional[pulumi.Input[str]] = None,
                 eventing_runtime_datas: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataArrgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 lock_config: Optional[pulumi.Input['ConnectionLockConfigArrgs']] = None,
                 log_config: Optional[pulumi.Input['ConnectionLogConfigArrgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['ConnectionNodeConfigArrgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 service_directory: Optional[pulumi.Input[str]] = None,
                 ssl_config: Optional[pulumi.Input['ConnectionSslConfigArrgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatusArrgs']]]] = None,
                 subscription_type: Optional[pulumi.Input[str]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input['ConnectionAuthConfigArrgs'] auth_config: authConfig for the connection.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]] config_variables: Config Variables for the connection.
               Structure is documented below.
        :param pulumi.Input[str] connection_revision: Connection revision. This field is only updated when the connection is created or updated by User.
        :param pulumi.Input[str] connector_version: connectorVersion of the Connector.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionConnectorVersionInfraConfigArrgs']]] connector_version_infra_configs: This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version.
               Structure is documented below.
        :param pulumi.Input[str] connector_version_launch_stage: Flag to mark the version indicating the launch stage.
        :param pulumi.Input[str] create_time: Time the Namespace was created in UTC.
        :param pulumi.Input[str] description: An arbitrary description for the Conection.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]] destination_configs: Define the Connectors target endpoint.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input['ConnectionEventingConfigArrgs'] eventing_config: Eventing Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[str] eventing_enablement_type: Eventing enablement type. Will be nil if eventing is not enabled.
               Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataArrgs']]] eventing_runtime_datas: Eventing Runtime Data.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Resource labels to represent user provided metadata.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Location in which Connection needs to be created.
        :param pulumi.Input['ConnectionLockConfigArrgs'] lock_config: Determines whether or no a connection is locked. If locked, a reason must be specified.
               Structure is documented below.
        :param pulumi.Input['ConnectionLogConfigArrgs'] log_config: Log configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] name: Name of Connection needs to be created.
               
               
               - - -
        :param pulumi.Input['ConnectionNodeConfigArrgs'] node_config: Node configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] service_account: Service account needed for runtime plane to access Google Cloud resources.
        :param pulumi.Input[str] service_directory: The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
               e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        :param pulumi.Input['ConnectionSslConfigArrgs'] ssl_config: SSL Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionStatusArrgs']]] statuses: (Output)
               Current status of eventing.
               Structure is documented below.
        :param pulumi.Input[str] subscription_type: This subscription type enum states the subscription type of the project.
        :param pulumi.Input[bool] suspended: Suspended indicates if a user has suspended a connection or not.
        :param pulumi.Input[str] update_time: Time the Namespace was updated in UTC.
        """
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if config_variables is not None:
            pulumi.set(__self__, "config_variables", config_variables)
        if connection_revision is not None:
            pulumi.set(__self__, "connection_revision", connection_revision)
        if connector_version is not None:
            pulumi.set(__self__, "connector_version", connector_version)
        if connector_version_infra_configs is not None:
            pulumi.set(__self__, "connector_version_infra_configs", connector_version_infra_configs)
        if connector_version_launch_stage is not None:
            pulumi.set(__self__, "connector_version_launch_stage", connector_version_launch_stage)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_configs is not None:
            pulumi.set(__self__, "destination_configs", destination_configs)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if eventing_config is not None:
            pulumi.set(__self__, "eventing_config", eventing_config)
        if eventing_enablement_type is not None:
            pulumi.set(__self__, "eventing_enablement_type", eventing_enablement_type)
        if eventing_runtime_datas is not None:
            pulumi.set(__self__, "eventing_runtime_datas", eventing_runtime_datas)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if lock_config is not None:
            pulumi.set(__self__, "lock_config", lock_config)
        if log_config is not None:
            pulumi.set(__self__, "log_config", log_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if service_directory is not None:
            pulumi.set(__self__, "service_directory", service_directory)
        if ssl_config is not None:
            pulumi.set(__self__, "ssl_config", ssl_config)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if subscription_type is not None:
            pulumi.set(__self__, "subscription_type", subscription_type)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional[pulumi.Input['ConnectionAuthConfigArrgs']]:
        """
        authConfig for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "auth_config")

    @auth_config.setter
    def auth_config(self, value: Optional[pulumi.Input['ConnectionAuthConfigArrgs']]):
        pulumi.set(self, "auth_config", value)

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]]]:
        """
        Config Variables for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "config_variables")

    @config_variables.setter
    def config_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigVariableArrgs']]]]):
        pulumi.set(self, "config_variables", value)

    @property
    @pulumi.getter(name="connectionRevision")
    def connection_revision(self) -> Optional[pulumi.Input[str]]:
        """
        Connection revision. This field is only updated when the connection is created or updated by User.
        """
        return pulumi.get(self, "connection_revision")

    @connection_revision.setter
    def connection_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_revision", value)

    @property
    @pulumi.getter(name="connectorVersion")
    def connector_version(self) -> Optional[pulumi.Input[str]]:
        """
        connectorVersion of the Connector.
        """
        return pulumi.get(self, "connector_version")

    @connector_version.setter
    def connector_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_version", value)

    @property
    @pulumi.getter(name="connectorVersionInfraConfigs")
    def connector_version_infra_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConnectorVersionInfraConfigArrgs']]]]:
        """
        This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version.
        Structure is documented below.
        """
        return pulumi.get(self, "connector_version_infra_configs")

    @connector_version_infra_configs.setter
    def connector_version_infra_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConnectorVersionInfraConfigArrgs']]]]):
        pulumi.set(self, "connector_version_infra_configs", value)

    @property
    @pulumi.getter(name="connectorVersionLaunchStage")
    def connector_version_launch_stage(self) -> Optional[pulumi.Input[str]]:
        """
        Flag to mark the version indicating the launch stage.
        """
        return pulumi.get(self, "connector_version_launch_stage")

    @connector_version_launch_stage.setter
    def connector_version_launch_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_version_launch_stage", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time the Namespace was created in UTC.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary description for the Conection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationConfigs")
    def destination_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]]]:
        """
        Define the Connectors target endpoint.
        Structure is documented below.
        """
        return pulumi.get(self, "destination_configs")

    @destination_configs.setter
    def destination_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigArrgs']]]]):
        pulumi.set(self, "destination_configs", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter(name="eventingConfig")
    def eventing_config(self) -> Optional[pulumi.Input['ConnectionEventingConfigArrgs']]:
        """
        Eventing Configuration of a connection
        Structure is documented below.
        """
        return pulumi.get(self, "eventing_config")

    @eventing_config.setter
    def eventing_config(self, value: Optional[pulumi.Input['ConnectionEventingConfigArrgs']]):
        pulumi.set(self, "eventing_config", value)

    @property
    @pulumi.getter(name="eventingEnablementType")
    def eventing_enablement_type(self) -> Optional[pulumi.Input[str]]:
        """
        Eventing enablement type. Will be nil if eventing is not enabled.
        Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        """
        return pulumi.get(self, "eventing_enablement_type")

    @eventing_enablement_type.setter
    def eventing_enablement_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eventing_enablement_type", value)

    @property
    @pulumi.getter(name="eventingRuntimeDatas")
    def eventing_runtime_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataArrgs']]]]:
        """
        Eventing Runtime Data.
        Structure is documented below.
        """
        return pulumi.get(self, "eventing_runtime_datas")

    @eventing_runtime_datas.setter
    def eventing_runtime_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataArrgs']]]]):
        pulumi.set(self, "eventing_runtime_datas", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource labels to represent user provided metadata.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location in which Connection needs to be created.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="lockConfig")
    def lock_config(self) -> Optional[pulumi.Input['ConnectionLockConfigArrgs']]:
        """
        Determines whether or no a connection is locked. If locked, a reason must be specified.
        Structure is documented below.
        """
        return pulumi.get(self, "lock_config")

    @lock_config.setter
    def lock_config(self, value: Optional[pulumi.Input['ConnectionLockConfigArrgs']]):
        pulumi.set(self, "lock_config", value)

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> Optional[pulumi.Input['ConnectionLogConfigArrgs']]:
        """
        Log configuration for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "log_config")

    @log_config.setter
    def log_config(self, value: Optional[pulumi.Input['ConnectionLogConfigArrgs']]):
        pulumi.set(self, "log_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Connection needs to be created.


        - - -
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['ConnectionNodeConfigArrgs']]:
        """
        Node configuration for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['ConnectionNodeConfigArrgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Service account needed for runtime plane to access Google Cloud resources.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="serviceDirectory")
    def service_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
        e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        """
        return pulumi.get(self, "service_directory")

    @service_directory.setter
    def service_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_directory", value)

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> Optional[pulumi.Input['ConnectionSslConfigArrgs']]:
        """
        SSL Configuration of a connection
        Structure is documented below.
        """
        return pulumi.get(self, "ssl_config")

    @ssl_config.setter
    def ssl_config(self, value: Optional[pulumi.Input['ConnectionSslConfigArrgs']]):
        pulumi.set(self, "ssl_config", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatusArrgs']]]]:
        """
        (Output)
        Current status of eventing.
        Structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatusArrgs']]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter(name="subscriptionType")
    def subscription_type(self) -> Optional[pulumi.Input[str]]:
        """
        This subscription type enum states the subscription type of the project.
        """
        return pulumi.get(self, "subscription_type")

    @subscription_type.setter
    def subscription_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_type", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        Suspended indicates if a user has suspended a connection or not.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time the Namespace was updated in UTC.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


calass Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_config: Optional[pulumi.Input[pulumi.InputType['ConnectionAuthConfigArrgs']]] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConfigVariableArrgs']]]]] = None,
                 connector_version: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionDestinationConfigArrgs']]]]] = None,
                 eventing_config: Optional[pulumi.Input[pulumi.InputType['ConnectionEventingConfigArrgs']]] = None,
                 eventing_enablement_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 lock_config: Optional[pulumi.Input[pulumi.InputType['ConnectionLockConfigArrgs']]] = None,
                 log_config: Optional[pulumi.Input[pulumi.InputType['ConnectionLogConfigArrgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['ConnectionNodeConfigArrgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 ssl_config: Optional[pulumi.Input[pulumi.InputType['ConnectionSslConfigArrgs']]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        An Integration connectors Connection.

        To get more information about Connection, see:

        * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.connections)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/integration-connectors/docs/createconnection)

        ## Example Usage
        ### Integration Connectors Connection Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        test_project = gcp.organizations.get_project()
        pubsubconnection = gcp.integrationconnectors.Connection("pubsubconnection",
            config_variables=[
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="project_id",
                    string_value="connectors-example",
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="topic_id",
                    string_value="test",
                ),
            ],
            connector_version=f"projects/{test_project.project_id}/locations/global/providers/gcp/connectors/pubsub/versions/1",
            description="tf created description",
            location="us-central1")
        ```
        ### Integration Connectors Connection Advanced

        ```python
        import pulumi
        import pulumi_gcp as gcp

        test_project = gcp.organizations.get_project()
        secret_basic = gcp.secretmanager.Secret("secret-basic",
            secret_id="test-secret",
            replication=gcp.secretmanager.SecretReplicationArrgs(
                user_managed=gcp.secretmanager.SecretReplicationUserManagedArrgs(
                    replicas=[gcp.secretmanager.SecretReplicationUserManagedReplicaArrgs(
                        location="us-central1",
                    )],
                ),
            ))
        secret_version_basic = gcp.secretmanager.SecretVersion("secret-version-basic",
            secret=secret_basic.id,
            secret_data="dummypassword")
        secret_iam = gcp.secretmanager.SecretIamMember("secretIam",
            secret_id=secret_basic.id,
            role="roles/secretmanager.admin",
            member=f"serviceAccount:{test_project.number}-compute@developer.gserviceaccount.com",
            opts=pulumi.ResourceOptions(depends_on=[secret_version_basic]))
        zendeskconnection = gcp.integrationconnectors.Connection("zendeskconnection",
            description="tf updated description",
            location="us-central1",
            service_account=f"{test_project.number}-compute@developer.gserviceaccount.com",
            connector_version=f"projects/{test_project.project_id}/locations/global/providers/zendesk/connectors/zendesk/versions/1",
            config_variables=[
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="proxy_enabled",
                    boolean_value=False,
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="sample_integer_value",
                    integer_value=1,
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="sample_encryption_key_value",
                    encryption_key_value=gcp.integrationconnectors.ConnectionConfigVariableEncryptionKeyValueArrgs(
                        type="GOOGLE_MANAGED",
                        kms_key_name="sampleKMSKkey",
                    ),
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="sample_secret_value",
                    secret_value=gcp.integrationconnectors.ConnectionConfigVariableSecretValueArrgs(
                        secret_version=secret_version_basic.name,
                    ),
                ),
            ],
            suspended=False,
            auth_config=gcp.integrationconnectors.ConnectionAuthConfigArrgs(
                additional_variables=[
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_string",
                        string_value="sampleString",
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_boolean",
                        boolean_value=False,
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_integer",
                        integer_value=1,
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_secret_value",
                        secret_value=gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableSecretValueArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_encryption_key_value",
                        encryption_key_value=gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs(
                            type="GOOGLE_MANAGED",
                            kms_key_name="sampleKMSKkey",
                        ),
                    ),
                ],
                auth_type="USER_PASSWORD",
                auth_key="sampleAuthKey",
                user_password=gcp.integrationconnectors.ConnectionAuthConfigUserPasswordArrgs(
                    username="user@xyz.com",
                    password=gcp.integrationconnectors.ConnectionAuthConfigUserPasswordPasswordArrgs(
                        secret_version=secret_version_basic.name,
                    ),
                ),
            ),
            destination_configs=[gcp.integrationconnectors.ConnectionDestinationConfigArrgs(
                key="url",
                destinations=[gcp.integrationconnectors.ConnectionDestinationConfigDestinationArrgs(
                    host="https://test.zendesk.com",
                    port=80,
                )],
            )],
            lock_config=gcp.integrationconnectors.ConnectionLockConfigArrgs(
                locked=False,
                reason="Its not locked",
            ),
            log_config=gcp.integrationconnectors.ConnectionLogConfigArrgs(
                enabled=True,
            ),
            node_config=gcp.integrationconnectors.ConnectionNodeConfigArrgs(
                min_node_count=2,
                max_node_count=50,
            ),
            labels={
                "foo": "bar",
            },
            ssl_config=gcp.integrationconnectors.ConnectionSslConfigArrgs(
                additional_variables=[
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_string",
                        string_value="sampleString",
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_boolean",
                        boolean_value=False,
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_integer",
                        integer_value=1,
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_secret_value",
                        secret_value=gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableSecretValueArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_encryption_key_value",
                        encryption_key_value=gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs(
                            type="GOOGLE_MANAGED",
                            kms_key_name="sampleKMSKkey",
                        ),
                    ),
                ],
                client_cert_type="PEM",
                client_certificate=gcp.integrationconnectors.ConnectionSslConfigClientCertificateArrgs(
                    secret_version=secret_version_basic.name,
                ),
                client_private_key=gcp.integrationconnectors.ConnectionSslConfigClientPrivateKeyArrgs(
                    secret_version=secret_version_basic.name,
                ),
                client_private_key_pass=gcp.integrationconnectors.ConnectionSslConfigClientPrivateKeyPassArrgs(
                    secret_version=secret_version_basic.name,
                ),
                private_server_certificate=gcp.integrationconnectors.ConnectionSslConfigPrivateServerCertificateArrgs(
                    secret_version=secret_version_basic.name,
                ),
                server_cert_type="PEM",
                trust_model="PRIVATE",
                type="TLS",
                use_ssl=True,
            ),
            eventing_enablement_type="EVENTING_AND_CONNECTION",
            eventing_config=gcp.integrationconnectors.ConnectionEventingConfigArrgs(
                additional_variables=[
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_string",
                        string_value="sampleString",
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_boolean",
                        boolean_value=False,
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_integer",
                        integer_value=1,
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_secret_value",
                        secret_value=gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableSecretValueArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_encryption_key_value",
                        encryption_key_value=gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs(
                            type="GOOGLE_MANAGED",
                            kms_key_name="sampleKMSKkey",
                        ),
                    ),
                ],
                registration_destination_config=gcp.integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigArrgs(
                    key="registration_destination_config",
                    destinations=[gcp.integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs(
                        host="https://test.zendesk.com",
                        port=80,
                    )],
                ),
                auth_config=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigArrgs(
                    auth_type="USER_PASSWORD",
                    auth_key="sampleAuthKey",
                    user_password=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigUserPasswordArrgs(
                        username="user@xyz.com",
                        password=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    additional_variables=[
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_string",
                            string_value="sampleString",
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_boolean",
                            boolean_value=False,
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_integer",
                            integer_value=1,
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_secret_value",
                            secret_value=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs(
                                secret_version=secret_version_basic.name,
                            ),
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_encryption_key_value",
                            encryption_key_value=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs(
                                type="GOOGLE_MANAGED",
                                kms_key_name="sampleKMSKkey",
                            ),
                        ),
                    ],
                ),
                enrichment_enabled=True,
            ))
        ```

        ## Import

        Connection can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/connections/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Connection using one of the formats above. For exampletf import {

         id = "projects/{{project}}/locations/{{location}}/connections/{{name}}"

         to = google_integration_connectors_connection.default }

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Connection can be imported using one of the formats above. For example
        ```

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
        ```

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionAuthConfigArrgs']] auth_config: authConfig for the connection.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConfigVariableArrgs']]]] config_variables: Config Variables for the connection.
               Structure is documented below.
        :param pulumi.Input[str] connector_version: connectorVersion of the Connector.
        :param pulumi.Input[str] description: An arbitrary description for the Conection.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionDestinationConfigArrgs']]]] destination_configs: Define the Connectors target endpoint.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ConnectionEventingConfigArrgs']] eventing_config: Eventing Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[str] eventing_enablement_type: Eventing enablement type. Will be nil if eventing is not enabled.
               Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Resource labels to represent user provided metadata.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Location in which Connection needs to be created.
        :param pulumi.Input[pulumi.InputType['ConnectionLockConfigArrgs']] lock_config: Determines whether or no a connection is locked. If locked, a reason must be specified.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ConnectionLogConfigArrgs']] log_config: Log configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] name: Name of Connection needs to be created.
               
               
               - - -
        :param pulumi.Input[pulumi.InputType['ConnectionNodeConfigArrgs']] node_config: Node configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] service_account: Service account needed for runtime plane to access Google Cloud resources.
        :param pulumi.Input[pulumi.InputType['ConnectionSslConfigArrgs']] ssl_config: SSL Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[bool] suspended: Suspended indicates if a user has suspended a connection or not.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArrgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An Integration connectors Connection.

        To get more information about Connection, see:

        * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.connections)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/integration-connectors/docs/createconnection)

        ## Example Usage
        ### Integration Connectors Connection Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        test_project = gcp.organizations.get_project()
        pubsubconnection = gcp.integrationconnectors.Connection("pubsubconnection",
            config_variables=[
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="project_id",
                    string_value="connectors-example",
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="topic_id",
                    string_value="test",
                ),
            ],
            connector_version=f"projects/{test_project.project_id}/locations/global/providers/gcp/connectors/pubsub/versions/1",
            description="tf created description",
            location="us-central1")
        ```
        ### Integration Connectors Connection Advanced

        ```python
        import pulumi
        import pulumi_gcp as gcp

        test_project = gcp.organizations.get_project()
        secret_basic = gcp.secretmanager.Secret("secret-basic",
            secret_id="test-secret",
            replication=gcp.secretmanager.SecretReplicationArrgs(
                user_managed=gcp.secretmanager.SecretReplicationUserManagedArrgs(
                    replicas=[gcp.secretmanager.SecretReplicationUserManagedReplicaArrgs(
                        location="us-central1",
                    )],
                ),
            ))
        secret_version_basic = gcp.secretmanager.SecretVersion("secret-version-basic",
            secret=secret_basic.id,
            secret_data="dummypassword")
        secret_iam = gcp.secretmanager.SecretIamMember("secretIam",
            secret_id=secret_basic.id,
            role="roles/secretmanager.admin",
            member=f"serviceAccount:{test_project.number}-compute@developer.gserviceaccount.com",
            opts=pulumi.ResourceOptions(depends_on=[secret_version_basic]))
        zendeskconnection = gcp.integrationconnectors.Connection("zendeskconnection",
            description="tf updated description",
            location="us-central1",
            service_account=f"{test_project.number}-compute@developer.gserviceaccount.com",
            connector_version=f"projects/{test_project.project_id}/locations/global/providers/zendesk/connectors/zendesk/versions/1",
            config_variables=[
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="proxy_enabled",
                    boolean_value=False,
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="sample_integer_value",
                    integer_value=1,
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="sample_encryption_key_value",
                    encryption_key_value=gcp.integrationconnectors.ConnectionConfigVariableEncryptionKeyValueArrgs(
                        type="GOOGLE_MANAGED",
                        kms_key_name="sampleKMSKkey",
                    ),
                ),
                gcp.integrationconnectors.ConnectionConfigVariableArrgs(
                    key="sample_secret_value",
                    secret_value=gcp.integrationconnectors.ConnectionConfigVariableSecretValueArrgs(
                        secret_version=secret_version_basic.name,
                    ),
                ),
            ],
            suspended=False,
            auth_config=gcp.integrationconnectors.ConnectionAuthConfigArrgs(
                additional_variables=[
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_string",
                        string_value="sampleString",
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_boolean",
                        boolean_value=False,
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_integer",
                        integer_value=1,
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_secret_value",
                        secret_value=gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableSecretValueArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableArrgs(
                        key="sample_encryption_key_value",
                        encryption_key_value=gcp.integrationconnectors.ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs(
                            type="GOOGLE_MANAGED",
                            kms_key_name="sampleKMSKkey",
                        ),
                    ),
                ],
                auth_type="USER_PASSWORD",
                auth_key="sampleAuthKey",
                user_password=gcp.integrationconnectors.ConnectionAuthConfigUserPasswordArrgs(
                    username="user@xyz.com",
                    password=gcp.integrationconnectors.ConnectionAuthConfigUserPasswordPasswordArrgs(
                        secret_version=secret_version_basic.name,
                    ),
                ),
            ),
            destination_configs=[gcp.integrationconnectors.ConnectionDestinationConfigArrgs(
                key="url",
                destinations=[gcp.integrationconnectors.ConnectionDestinationConfigDestinationArrgs(
                    host="https://test.zendesk.com",
                    port=80,
                )],
            )],
            lock_config=gcp.integrationconnectors.ConnectionLockConfigArrgs(
                locked=False,
                reason="Its not locked",
            ),
            log_config=gcp.integrationconnectors.ConnectionLogConfigArrgs(
                enabled=True,
            ),
            node_config=gcp.integrationconnectors.ConnectionNodeConfigArrgs(
                min_node_count=2,
                max_node_count=50,
            ),
            labels={
                "foo": "bar",
            },
            ssl_config=gcp.integrationconnectors.ConnectionSslConfigArrgs(
                additional_variables=[
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_string",
                        string_value="sampleString",
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_boolean",
                        boolean_value=False,
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_integer",
                        integer_value=1,
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_secret_value",
                        secret_value=gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableSecretValueArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableArrgs(
                        key="sample_encryption_key_value",
                        encryption_key_value=gcp.integrationconnectors.ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs(
                            type="GOOGLE_MANAGED",
                            kms_key_name="sampleKMSKkey",
                        ),
                    ),
                ],
                client_cert_type="PEM",
                client_certificate=gcp.integrationconnectors.ConnectionSslConfigClientCertificateArrgs(
                    secret_version=secret_version_basic.name,
                ),
                client_private_key=gcp.integrationconnectors.ConnectionSslConfigClientPrivateKeyArrgs(
                    secret_version=secret_version_basic.name,
                ),
                client_private_key_pass=gcp.integrationconnectors.ConnectionSslConfigClientPrivateKeyPassArrgs(
                    secret_version=secret_version_basic.name,
                ),
                private_server_certificate=gcp.integrationconnectors.ConnectionSslConfigPrivateServerCertificateArrgs(
                    secret_version=secret_version_basic.name,
                ),
                server_cert_type="PEM",
                trust_model="PRIVATE",
                type="TLS",
                use_ssl=True,
            ),
            eventing_enablement_type="EVENTING_AND_CONNECTION",
            eventing_config=gcp.integrationconnectors.ConnectionEventingConfigArrgs(
                additional_variables=[
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_string",
                        string_value="sampleString",
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_boolean",
                        boolean_value=False,
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_integer",
                        integer_value=1,
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_secret_value",
                        secret_value=gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableSecretValueArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableArrgs(
                        key="sample_encryption_key_value",
                        encryption_key_value=gcp.integrationconnectors.ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs(
                            type="GOOGLE_MANAGED",
                            kms_key_name="sampleKMSKkey",
                        ),
                    ),
                ],
                registration_destination_config=gcp.integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigArrgs(
                    key="registration_destination_config",
                    destinations=[gcp.integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs(
                        host="https://test.zendesk.com",
                        port=80,
                    )],
                ),
                auth_config=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigArrgs(
                    auth_type="USER_PASSWORD",
                    auth_key="sampleAuthKey",
                    user_password=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigUserPasswordArrgs(
                        username="user@xyz.com",
                        password=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs(
                            secret_version=secret_version_basic.name,
                        ),
                    ),
                    additional_variables=[
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_string",
                            string_value="sampleString",
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_boolean",
                            boolean_value=False,
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_integer",
                            integer_value=1,
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_secret_value",
                            secret_value=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs(
                                secret_version=secret_version_basic.name,
                            ),
                        ),
                        gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArrgs(
                            key="sample_encryption_key_value",
                            encryption_key_value=gcp.integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs(
                                type="GOOGLE_MANAGED",
                                kms_key_name="sampleKMSKkey",
                            ),
                        ),
                    ],
                ),
                enrichment_enabled=True,
            ))
        ```

        ## Import

        Connection can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/connections/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Connection using one of the formats above. For exampletf import {

         id = "projects/{{project}}/locations/{{location}}/connections/{{name}}"

         to = google_integration_connectors_connection.default }

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Connection can be imported using one of the formats above. For example
        ```

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
        ```

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:integrationconnectors/connection:Connection default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionArrgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArrgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_config: Optional[pulumi.Input[pulumi.InputType['ConnectionAuthConfigArrgs']]] = None,
                 config_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConfigVariableArrgs']]]]] = None,
                 connector_version: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionDestinationConfigArrgs']]]]] = None,
                 eventing_config: Optional[pulumi.Input[pulumi.InputType['ConnectionEventingConfigArrgs']]] = None,
                 eventing_enablement_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 lock_config: Optional[pulumi.Input[pulumi.InputType['ConnectionLockConfigArrgs']]] = None,
                 log_config: Optional[pulumi.Input[pulumi.InputType['ConnectionLogConfigArrgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['ConnectionNodeConfigArrgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 ssl_config: Optional[pulumi.Input[pulumi.InputType['ConnectionSslConfigArrgs']]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArrgs.__new__(ConnectionArrgs)

            __props__.__dict__["auth_config"] = auth_config
            __props__.__dict__["config_variables"] = config_variables
            if connector_version is None and not opts.urn:
                raise TypeError("Missing required property 'connector_version'")
            __props__.__dict__["connector_version"] = connector_version
            __props__.__dict__["description"] = description
            __props__.__dict__["destination_configs"] = destination_configs
            __props__.__dict__["eventing_config"] = eventing_config
            __props__.__dict__["eventing_enablement_type"] = eventing_enablement_type
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["lock_config"] = lock_config
            __props__.__dict__["log_config"] = log_config
            __props__.__dict__["name"] = name
            __props__.__dict__["node_config"] = node_config
            __props__.__dict__["project"] = project
            __props__.__dict__["service_account"] = service_account
            __props__.__dict__["ssl_config"] = ssl_config
            __props__.__dict__["suspended"] = suspended
            __props__.__dict__["connection_revision"] = None
            __props__.__dict__["connector_version_infra_configs"] = None
            __props__.__dict__["connector_version_launch_stage"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["eventing_runtime_datas"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["service_directory"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["subscription_type"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Connection, __self__).__init__(
            'gcp:integrationconnectors/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_config: Optional[pulumi.Input[pulumi.InputType['ConnectionAuthConfigArrgs']]] = None,
            config_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConfigVariableArrgs']]]]] = None,
            connection_revision: Optional[pulumi.Input[str]] = None,
            connector_version: Optional[pulumi.Input[str]] = None,
            connector_version_infra_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConnectorVersionInfraConfigArrgs']]]]] = None,
            connector_version_launch_stage: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionDestinationConfigArrgs']]]]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            eventing_config: Optional[pulumi.Input[pulumi.InputType['ConnectionEventingConfigArrgs']]] = None,
            eventing_enablement_type: Optional[pulumi.Input[str]] = None,
            eventing_runtime_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionEventingRuntimeDataArrgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            lock_config: Optional[pulumi.Input[pulumi.InputType['ConnectionLockConfigArrgs']]] = None,
            log_config: Optional[pulumi.Input[pulumi.InputType['ConnectionLogConfigArrgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_config: Optional[pulumi.Input[pulumi.InputType['ConnectionNodeConfigArrgs']]] = None,
            project: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            service_account: Optional[pulumi.Input[str]] = None,
            service_directory: Optional[pulumi.Input[str]] = None,
            ssl_config: Optional[pulumi.Input[pulumi.InputType['ConnectionSslConfigArrgs']]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionStatusArrgs']]]]] = None,
            subscription_type: Optional[pulumi.Input[str]] = None,
            suspended: Optional[pulumi.Input[bool]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionAuthConfigArrgs']] auth_config: authConfig for the connection.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConfigVariableArrgs']]]] config_variables: Config Variables for the connection.
               Structure is documented below.
        :param pulumi.Input[str] connection_revision: Connection revision. This field is only updated when the connection is created or updated by User.
        :param pulumi.Input[str] connector_version: connectorVersion of the Connector.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionConnectorVersionInfraConfigArrgs']]]] connector_version_infra_configs: This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version.
               Structure is documented below.
        :param pulumi.Input[str] connector_version_launch_stage: Flag to mark the version indicating the launch stage.
        :param pulumi.Input[str] create_time: Time the Namespace was created in UTC.
        :param pulumi.Input[str] description: An arbitrary description for the Conection.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionDestinationConfigArrgs']]]] destination_configs: Define the Connectors target endpoint.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[pulumi.InputType['ConnectionEventingConfigArrgs']] eventing_config: Eventing Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[str] eventing_enablement_type: Eventing enablement type. Will be nil if eventing is not enabled.
               Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionEventingRuntimeDataArrgs']]]] eventing_runtime_datas: Eventing Runtime Data.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Resource labels to represent user provided metadata.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Location in which Connection needs to be created.
        :param pulumi.Input[pulumi.InputType['ConnectionLockConfigArrgs']] lock_config: Determines whether or no a connection is locked. If locked, a reason must be specified.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ConnectionLogConfigArrgs']] log_config: Log configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] name: Name of Connection needs to be created.
               
               
               - - -
        :param pulumi.Input[pulumi.InputType['ConnectionNodeConfigArrgs']] node_config: Node configuration for the connection.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] service_account: Service account needed for runtime plane to access Google Cloud resources.
        :param pulumi.Input[str] service_directory: The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
               e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        :param pulumi.Input[pulumi.InputType['ConnectionSslConfigArrgs']] ssl_config: SSL Configuration of a connection
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionStatusArrgs']]]] statuses: (Output)
               Current status of eventing.
               Structure is documented below.
        :param pulumi.Input[str] subscription_type: This subscription type enum states the subscription type of the project.
        :param pulumi.Input[bool] suspended: Suspended indicates if a user has suspended a connection or not.
        :param pulumi.Input[str] update_time: Time the Namespace was updated in UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["auth_config"] = auth_config
        __props__.__dict__["config_variables"] = config_variables
        __props__.__dict__["connection_revision"] = connection_revision
        __props__.__dict__["connector_version"] = connector_version
        __props__.__dict__["connector_version_infra_configs"] = connector_version_infra_configs
        __props__.__dict__["connector_version_launch_stage"] = connector_version_launch_stage
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["destination_configs"] = destination_configs
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["eventing_config"] = eventing_config
        __props__.__dict__["eventing_enablement_type"] = eventing_enablement_type
        __props__.__dict__["eventing_runtime_datas"] = eventing_runtime_datas
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["lock_config"] = lock_config
        __props__.__dict__["log_config"] = log_config
        __props__.__dict__["name"] = name
        __props__.__dict__["node_config"] = node_config
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["service_account"] = service_account
        __props__.__dict__["service_directory"] = service_directory
        __props__.__dict__["ssl_config"] = ssl_config
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["subscription_type"] = subscription_type
        __props__.__dict__["suspended"] = suspended
        __props__.__dict__["update_time"] = update_time
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> pulumi.Output[Optional['outputs.ConnectionAuthConfig']]:
        """
        authConfig for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "auth_config")

    @property
    @pulumi.getter(name="configVariables")
    def config_variables(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionConfigVariable']]]:
        """
        Config Variables for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "config_variables")

    @property
    @pulumi.getter(name="connectionRevision")
    def connection_revision(self) -> pulumi.Output[str]:
        """
        Connection revision. This field is only updated when the connection is created or updated by User.
        """
        return pulumi.get(self, "connection_revision")

    @property
    @pulumi.getter(name="connectorVersion")
    def connector_version(self) -> pulumi.Output[str]:
        """
        connectorVersion of the Connector.
        """
        return pulumi.get(self, "connector_version")

    @property
    @pulumi.getter(name="connectorVersionInfraConfigs")
    def connector_version_infra_configs(self) -> pulumi.Output[Sequence['outputs.ConnectionConnectorVersionInfraConfig']]:
        """
        This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version.
        Structure is documented below.
        """
        return pulumi.get(self, "connector_version_infra_configs")

    @property
    @pulumi.getter(name="connectorVersionLaunchStage")
    def connector_version_launch_stage(self) -> pulumi.Output[str]:
        """
        Flag to mark the version indicating the launch stage.
        """
        return pulumi.get(self, "connector_version_launch_stage")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time the Namespace was created in UTC.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An arbitrary description for the Conection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationConfigs")
    def destination_configs(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionDestinationConfig']]]:
        """
        Define the Connectors target endpoint.
        Structure is documented below.
        """
        return pulumi.get(self, "destination_configs")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="eventingConfig")
    def eventing_config(self) -> pulumi.Output[Optional['outputs.ConnectionEventingConfig']]:
        """
        Eventing Configuration of a connection
        Structure is documented below.
        """
        return pulumi.get(self, "eventing_config")

    @property
    @pulumi.getter(name="eventingEnablementType")
    def eventing_enablement_type(self) -> pulumi.Output[Optional[str]]:
        """
        Eventing enablement type. Will be nil if eventing is not enabled.
        Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
        """
        return pulumi.get(self, "eventing_enablement_type")

    @property
    @pulumi.getter(name="eventingRuntimeDatas")
    def eventing_runtime_datas(self) -> pulumi.Output[Sequence['outputs.ConnectionEventingRuntimeData']]:
        """
        Eventing Runtime Data.
        Structure is documented below.
        """
        return pulumi.get(self, "eventing_runtime_datas")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource labels to represent user provided metadata.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Location in which Connection needs to be created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="lockConfig")
    def lock_config(self) -> pulumi.Output[Optional['outputs.ConnectionLockConfig']]:
        """
        Determines whether or no a connection is locked. If locked, a reason must be specified.
        Structure is documented below.
        """
        return pulumi.get(self, "lock_config")

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> pulumi.Output[Optional['outputs.ConnectionLogConfig']]:
        """
        Log configuration for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "log_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of Connection needs to be created.


        - - -
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> pulumi.Output['outputs.ConnectionNodeConfig']:
        """
        Node configuration for the connection.
        Structure is documented below.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[str]:
        """
        Service account needed for runtime plane to access Google Cloud resources.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="serviceDirectory")
    def service_directory(self) -> pulumi.Output[str]:
        """
        The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
        e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        """
        return pulumi.get(self, "service_directory")

    @property
    @pulumi.getter(name="sslConfig")
    def ssl_config(self) -> pulumi.Output[Optional['outputs.ConnectionSslConfig']]:
        """
        SSL Configuration of a connection
        Structure is documented below.
        """
        return pulumi.get(self, "ssl_config")

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.ConnectionStatus']]:
        """
        (Output)
        Current status of eventing.
        Structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="subscriptionType")
    def subscription_type(self) -> pulumi.Output[str]:
        """
        This subscription type enum states the subscription type of the project.
        """
        return pulumi.get(self, "subscription_type")

    @property
    @pulumi.getter
    def suspended(self) -> pulumi.Output[Optional[bool]]:
        """
        Suspended indicates if a user has suspended a connection or not.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Time the Namespace was updated in UTC.
        """
        return pulumi.get(self, "update_time")

