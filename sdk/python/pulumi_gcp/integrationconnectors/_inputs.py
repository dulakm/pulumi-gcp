# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConnectionAuthConfigArrgs',
    'ConnectionAuthConfigAdditionalVariableArrgs',
    'ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs',
    'ConnectionAuthConfigAdditionalVariableSecretValueArrgs',
    'ConnectionAuthConfigOauth2AuthCodeFlowArrgs',
    'ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArrgs',
    'ConnectionAuthConfigOauth2ClientCredentialsArrgs',
    'ConnectionAuthConfigOauth2ClientCredentialsClientSecretArrgs',
    'ConnectionAuthConfigOauth2JwtBearerArrgs',
    'ConnectionAuthConfigOauth2JwtBearerClientKeyArrgs',
    'ConnectionAuthConfigOauth2JwtBearerJwtClaimsArrgs',
    'ConnectionAuthConfigSshPublicKeyArrgs',
    'ConnectionAuthConfigSshPublicKeySshClientCertArrgs',
    'ConnectionAuthConfigSshPublicKeySshClientCertPassArrgs',
    'ConnectionAuthConfigUserPasswordArrgs',
    'ConnectionAuthConfigUserPasswordPasswordArrgs',
    'ConnectionConfigVariableArrgs',
    'ConnectionConfigVariableEncryptionKeyValueArrgs',
    'ConnectionConfigVariableSecretValueArrgs',
    'ConnectionConnectorVersionInfraConfigArrgs',
    'ConnectionDestinationConfigArrgs',
    'ConnectionDestinationConfigDestinationArrgs',
    'ConnectionEventingConfigArrgs',
    'ConnectionEventingConfigAdditionalVariableArrgs',
    'ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs',
    'ConnectionEventingConfigAdditionalVariableSecretValueArrgs',
    'ConnectionEventingConfigAuthConfigArrgs',
    'ConnectionEventingConfigAuthConfigAdditionalVariableArrgs',
    'ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs',
    'ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs',
    'ConnectionEventingConfigAuthConfigUserPasswordArrgs',
    'ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs',
    'ConnectionEventingConfigRegistrationDestinationConfigArrgs',
    'ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs',
    'ConnectionEventingRuntimeDataArrgs',
    'ConnectionEventingRuntimeDataStatusArrgs',
    'ConnectionLockConfigArrgs',
    'ConnectionLogConfigArrgs',
    'ConnectionNodeConfigArrgs',
    'ConnectionSslConfigArrgs',
    'ConnectionSslConfigAdditionalVariableArrgs',
    'ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs',
    'ConnectionSslConfigAdditionalVariableSecretValueArrgs',
    'ConnectionSslConfigClientCertificateArrgs',
    'ConnectionSslConfigClientPrivateKeyArrgs',
    'ConnectionSslConfigClientPrivateKeyPassArrgs',
    'ConnectionSslConfigPrivateServerCertificateArrgs',
    'ConnectionStatusArrgs',
]

@pulumi.input_type
calass ConnectionAuthConfigArrgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 additional_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthConfigAdditionalVariableArrgs']]]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 oauth2_auth_code_flow: Optional[pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowArrgs']] = None,
                 oauth2_client_credentials: Optional[pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsArrgs']] = None,
                 oauth2_jwt_bearer: Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerArrgs']] = None,
                 ssh_public_key: Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeyArrgs']] = None,
                 user_password: Optional[pulumi.Input['ConnectionAuthConfigUserPasswordArrgs']] = None):
        """
        :param pulumi.Input[str] auth_type: authType of the Connection
               Possible values are: `USER_PASSWORD`.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAuthConfigAdditionalVariableArrgs']]] additional_variables: List containing additional auth configs.
               Structure is documented below.
        :param pulumi.Input[str] auth_key: The type of authentication configured.
        :param pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowArrgs'] oauth2_auth_code_flow: Parameters to support Oauth 2.0 Auth Code Grant Authentication.
               Structure is documented below.
        :param pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsArrgs'] oauth2_client_credentials: OAuth3 Client Credentials for Authentication.
               Structure is documented below.
        :param pulumi.Input['ConnectionAuthConfigOauth2JwtBearerArrgs'] oauth2_jwt_bearer: OAuth2 JWT Bearer for Authentication.
               Structure is documented below.
        :param pulumi.Input['ConnectionAuthConfigSshPublicKeyArrgs'] ssh_public_key: SSH Public Key for Authentication.
               Structure is documented below.
        :param pulumi.Input['ConnectionAuthConfigUserPasswordArrgs'] user_password: User password for Authentication.
               Structure is documented below.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        if additional_variables is not None:
            pulumi.set(__self__, "additional_variables", additional_variables)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if oauth2_auth_code_flow is not None:
            pulumi.set(__self__, "oauth2_auth_code_flow", oauth2_auth_code_flow)
        if oauth2_client_credentials is not None:
            pulumi.set(__self__, "oauth2_client_credentials", oauth2_client_credentials)
        if oauth2_jwt_bearer is not None:
            pulumi.set(__self__, "oauth2_jwt_bearer", oauth2_jwt_bearer)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        """
        authType of the Connection
        Possible values are: `USER_PASSWORD`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="additionalVariables")
    def additional_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthConfigAdditionalVariableArrgs']]]]:
        """
        List containing additional auth configs.
        Structure is documented below.
        """
        return pulumi.get(self, "additional_variables")

    @additional_variables.setter
    def additional_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAuthConfigAdditionalVariableArrgs']]]]):
        pulumi.set(self, "additional_variables", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        The type of authentication configured.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="oauth2AuthCodeFlow")
    def oauth2_auth_code_flow(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowArrgs']]:
        """
        Parameters to support Oauth 2.0 Auth Code Grant Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "oauth2_auth_code_flow")

    @oauth2_auth_code_flow.setter
    def oauth2_auth_code_flow(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowArrgs']]):
        pulumi.set(self, "oauth2_auth_code_flow", value)

    @property
    @pulumi.getter(name="oauth2ClientCredentials")
    def oauth2_client_credentials(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsArrgs']]:
        """
        OAuth3 Client Credentials for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "oauth2_client_credentials")

    @oauth2_client_credentials.setter
    def oauth2_client_credentials(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsArrgs']]):
        pulumi.set(self, "oauth2_client_credentials", value)

    @property
    @pulumi.getter(name="oauth2JwtBearer")
    def oauth2_jwt_bearer(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerArrgs']]:
        """
        OAuth2 JWT Bearer for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "oauth2_jwt_bearer")

    @oauth2_jwt_bearer.setter
    def oauth2_jwt_bearer(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerArrgs']]):
        pulumi.set(self, "oauth2_jwt_bearer", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeyArrgs']]:
        """
        SSH Public Key for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeyArrgs']]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input['ConnectionAuthConfigUserPasswordArrgs']]:
        """
        User password for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input['ConnectionAuthConfigUserPasswordArrgs']]):
        pulumi.set(self, "user_password", value)


@pulumi.input_type
calass ConnectionAuthConfigAdditionalVariableArrgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 encryption_key_value: Optional[pulumi.Input['ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs']] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 secret_value: Optional[pulumi.Input['ConnectionAuthConfigAdditionalVariableSecretValueArrgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for the configVariable
        :param pulumi.Input[bool] boolean_value: Boolean Value of configVariable.
        :param pulumi.Input['ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs'] encryption_key_value: Encription key value of configVariable.
               Structure is documented below.
        :param pulumi.Input[int] integer_value: Integer Value of configVariable.
        :param pulumi.Input['ConnectionAuthConfigAdditionalVariableSecretValueArrgs'] secret_value: Secret value of configVariable
               Structure is documented below.
        :param pulumi.Input[str] string_value: String Value of configVariabley.
        """
        pulumi.set(__self__, "key", key)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if encryption_key_value is not None:
            pulumi.set(__self__, "encryption_key_value", encryption_key_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key for the configVariable
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean Value of configVariable.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="encryptionKeyValue")
    def encryption_key_value(self) -> Optional[pulumi.Input['ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs']]:
        """
        Encription key value of configVariable.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_key_value")

    @encryption_key_value.setter
    def encryption_key_value(self, value: Optional[pulumi.Input['ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs']]):
        pulumi.set(self, "encryption_key_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Integer Value of configVariable.
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input['ConnectionAuthConfigAdditionalVariableSecretValueArrgs']]:
        """
        Secret value of configVariable
        Structure is documented below.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input['ConnectionAuthConfigAdditionalVariableSecretValueArrgs']]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        String Value of configVariabley.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
calass ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArrgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of Encryption Key
               Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        :param pulumi.Input[str] kms_key_name: The [KMS key name] with which the content of the Operation is encrypted. The expected
               format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
               Will be empty string if google managed.
        """
        pulumi.set(__self__, "type", type)
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of Encryption Key
        Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The [KMS key name] with which the content of the Operation is encrypted. The expected
        format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
        Will be empty string if google managed.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


@pulumi.input_type
calass ConnectionAuthConfigAdditionalVariableSecretValueArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2AuthCodeFlowArrgs:
    def __init__(__self__, *,
                 auth_uri: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArrgs']] = None,
                 enable_pkce: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] auth_uri: Auth URL for Authorization Code Flow.
        :param pulumi.Input[str] client_id: Secret version of Password for Authentication.
        :param pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArrgs'] client_secret: Secret version reference containing the client secret.
               Structure is documented below.
        :param pulumi.Input[bool] enable_pkce: Whether to enable PKCE when the user performs the auth code flow.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Scopes the connection will request when the user performs the auth code flow.
        """
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if enable_pkce is not None:
            pulumi.set(__self__, "enable_pkce", enable_pkce)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Auth URL for Authorization Code Flow.
        """
        return pulumi.get(self, "auth_uri")

    @auth_uri.setter
    def auth_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_uri", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Secret version of Password for Authentication.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArrgs']]:
        """
        Secret version reference containing the client secret.
        Structure is documented below.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArrgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="enablePkce")
    def enable_pkce(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable PKCE when the user performs the auth code flow.
        """
        return pulumi.get(self, "enable_pkce")

    @enable_pkce.setter
    def enable_pkce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pkce", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Scopes the connection will request when the user performs the auth code flow.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2ClientCredentialsArrgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: Optional[pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsClientSecretArrgs']] = None):
        """
        :param pulumi.Input[str] client_id: Secret version of Password for Authentication.
        :param pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsClientSecretArrgs'] client_secret: Secret version reference containing the client secret.
               Structure is documented below.
        """
        pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Secret version of Password for Authentication.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsClientSecretArrgs']]:
        """
        Secret version reference containing the client secret.
        Structure is documented below.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2ClientCredentialsClientSecretArrgs']]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2ClientCredentialsClientSecretArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2JwtBearerArrgs:
    def __init__(__self__, *,
                 client_key: Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerClientKeyArrgs']] = None,
                 jwt_claims: Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerJwtClaimsArrgs']] = None):
        """
        :param pulumi.Input['ConnectionAuthConfigOauth2JwtBearerClientKeyArrgs'] client_key: Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate.
               This private key will be used to sign JWTs used for the jwt-bearer authorization grant.
               Specified in the form as: projects/*/secrets/*/versions/*.
               Structure is documented below.
        :param pulumi.Input['ConnectionAuthConfigOauth2JwtBearerJwtClaimsArrgs'] jwt_claims: JwtClaims providers fields to generate the token.
               Structure is documented below.
        """
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if jwt_claims is not None:
            pulumi.set(__self__, "jwt_claims", jwt_claims)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerClientKeyArrgs']]:
        """
        Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate.
        This private key will be used to sign JWTs used for the jwt-bearer authorization grant.
        Specified in the form as: projects/*/secrets/*/versions/*.
        Structure is documented below.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerClientKeyArrgs']]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="jwtClaims")
    def jwt_claims(self) -> Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerJwtClaimsArrgs']]:
        """
        JwtClaims providers fields to generate the token.
        Structure is documented below.
        """
        return pulumi.get(self, "jwt_claims")

    @jwt_claims.setter
    def jwt_claims(self, value: Optional[pulumi.Input['ConnectionAuthConfigOauth2JwtBearerJwtClaimsArrgs']]):
        pulumi.set(self, "jwt_claims", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2JwtBearerClientKeyArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionAuthConfigOauth2JwtBearerJwtClaimsArrgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] audience: Value for the "aud" claim.
               
               <a name="nested_oauth2_client_credentials"></a>The `oauth2_client_credentials` block supports:
        :param pulumi.Input[str] issuer: Value for the "iss" claim.
        :param pulumi.Input[str] subject: Value for the "sub" claim.
        """
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Value for the "aud" claim.

        <a name="nested_oauth2_client_credentials"></a>The `oauth2_client_credentials` block supports:
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        Value for the "iss" claim.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        Value for the "sub" claim.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)


@pulumi.input_type
calass ConnectionAuthConfigSshPublicKeyArrgs:
    def __init__(__self__, *,
                 username: pulumi.Input[str],
                 cert_type: Optional[pulumi.Input[str]] = None,
                 ssh_client_cert: Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertArrgs']] = None,
                 ssh_client_cert_pass: Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertPassArrgs']] = None):
        """
        :param pulumi.Input[str] username: The user account used to authenticate.
        :param pulumi.Input[str] cert_type: Format of SSH Client cert.
        :param pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertArrgs'] ssh_client_cert: SSH Client Cert. It should contain both public and private key.
               Structure is documented below.
        :param pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertPassArrgs'] ssh_client_cert_pass: Password (passphrase) for ssh client certificate if it has one.
               Structure is documented below.
        """
        pulumi.set(__self__, "username", username)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_client_cert_pass is not None:
            pulumi.set(__self__, "ssh_client_cert_pass", ssh_client_cert_pass)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The user account used to authenticate.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[str]]:
        """
        Format of SSH Client cert.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertArrgs']]:
        """
        SSH Client Cert. It should contain both public and private key.
        Structure is documented below.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertArrgs']]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshClientCertPass")
    def ssh_client_cert_pass(self) -> Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertPassArrgs']]:
        """
        Password (passphrase) for ssh client certificate if it has one.
        Structure is documented below.
        """
        return pulumi.get(self, "ssh_client_cert_pass")

    @ssh_client_cert_pass.setter
    def ssh_client_cert_pass(self, value: Optional[pulumi.Input['ConnectionAuthConfigSshPublicKeySshClientCertPassArrgs']]):
        pulumi.set(self, "ssh_client_cert_pass", value)


@pulumi.input_type
calass ConnectionAuthConfigSshPublicKeySshClientCertArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionAuthConfigSshPublicKeySshClientCertPassArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
               
               <a name="nested_oauth2_auth_code_flow"></a>The `oauth2_auth_code_flow` block supports:
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.

        <a name="nested_oauth2_auth_code_flow"></a>The `oauth2_auth_code_flow` block supports:
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionAuthConfigUserPasswordArrgs:
    def __init__(__self__, *,
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input['ConnectionAuthConfigUserPasswordPasswordArrgs']] = None):
        """
        :param pulumi.Input[str] username: Username for Authentication.
        :param pulumi.Input['ConnectionAuthConfigUserPasswordPasswordArrgs'] password: Password for Authentication.
               Structure is documented below.
        """
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username for Authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConnectionAuthConfigUserPasswordPasswordArrgs']]:
        """
        Password for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConnectionAuthConfigUserPasswordPasswordArrgs']]):
        pulumi.set(self, "password", value)


@pulumi.input_type
calass ConnectionAuthConfigUserPasswordPasswordArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionConfigVariableArrgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 encryption_key_value: Optional[pulumi.Input['ConnectionConfigVariableEncryptionKeyValueArrgs']] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 secret_value: Optional[pulumi.Input['ConnectionConfigVariableSecretValueArrgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for the configVariable
        :param pulumi.Input[bool] boolean_value: Boolean Value of configVariable
        :param pulumi.Input['ConnectionConfigVariableEncryptionKeyValueArrgs'] encryption_key_value: Encription key value of configVariable.
               Structure is documented below.
        :param pulumi.Input[int] integer_value: Integer Value of configVariable
        :param pulumi.Input['ConnectionConfigVariableSecretValueArrgs'] secret_value: Secret value of configVariable.
               Structure is documented below.
        :param pulumi.Input[str] string_value: String Value of configVariabley
        """
        pulumi.set(__self__, "key", key)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if encryption_key_value is not None:
            pulumi.set(__self__, "encryption_key_value", encryption_key_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key for the configVariable
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean Value of configVariable
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="encryptionKeyValue")
    def encryption_key_value(self) -> Optional[pulumi.Input['ConnectionConfigVariableEncryptionKeyValueArrgs']]:
        """
        Encription key value of configVariable.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_key_value")

    @encryption_key_value.setter
    def encryption_key_value(self, value: Optional[pulumi.Input['ConnectionConfigVariableEncryptionKeyValueArrgs']]):
        pulumi.set(self, "encryption_key_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Integer Value of configVariable
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input['ConnectionConfigVariableSecretValueArrgs']]:
        """
        Secret value of configVariable.
        Structure is documented below.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input['ConnectionConfigVariableSecretValueArrgs']]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        String Value of configVariabley
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
calass ConnectionConfigVariableEncryptionKeyValueArrgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of Encryption Key
               Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        :param pulumi.Input[str] kms_key_name: The [KMS key name] with which the content of the Operation is encrypted. The expected
               format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
               Will be empty string if google managed.
        """
        pulumi.set(__self__, "type", type)
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of Encryption Key
        Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The [KMS key name] with which the content of the Operation is encrypted. The expected
        format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
        Will be empty string if google managed.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


@pulumi.input_type
calass ConnectionConfigVariableSecretValueArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionConnectorVersionInfraConfigArrgs:
    def __init__(__self__, *,
                 ratelimit_threshold: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ratelimit_threshold: (Output)
               Max QPS supported by the connector version before throttling of requests.
        """
        if ratelimit_threshold is not None:
            pulumi.set(__self__, "ratelimit_threshold", ratelimit_threshold)

    @property
    @pulumi.getter(name="ratelimitThreshold")
    def ratelimit_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Max QPS supported by the connector version before throttling of requests.
        """
        return pulumi.get(self, "ratelimit_threshold")

    @ratelimit_threshold.setter
    def ratelimit_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ratelimit_threshold", value)


@pulumi.input_type
calass ConnectionDestinationConfigArrgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigDestinationArrgs']]]] = None):
        """
        :param pulumi.Input[str] key: The key is the destination identifier that is supported by the Connector.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigDestinationArrgs']]] destinations: The destinations for the key.
               Structure is documented below.
        """
        pulumi.set(__self__, "key", key)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key is the destination identifier that is supported by the Connector.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigDestinationArrgs']]]]:
        """
        The destinations for the key.
        Structure is documented below.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionDestinationConfigDestinationArrgs']]]]):
        pulumi.set(self, "destinations", value)


@pulumi.input_type
calass ConnectionDestinationConfigDestinationArrgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service_attachment: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host
        :param pulumi.Input[int] port: port number
        :param pulumi.Input[str] service_attachment: Service Attachment
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[pulumi.Input[str]]:
        """
        Service Attachment
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_attachment", value)


@pulumi.input_type
calass ConnectionEventingConfigArrgs:
    def __init__(__self__, *,
                 registration_destination_config: pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigArrgs'],
                 additional_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAdditionalVariableArrgs']]]] = None,
                 auth_config: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigArrgs']] = None,
                 enrichment_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigArrgs'] registration_destination_config: registrationDestinationConfig
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAdditionalVariableArrgs']]] additional_variables: List containing additional auth configs.
               Structure is documented below.
        :param pulumi.Input['ConnectionEventingConfigAuthConfigArrgs'] auth_config: authConfig for Eventing Configuration.
               Structure is documented below.
        :param pulumi.Input[bool] enrichment_enabled: Enrichment Enabled.
        """
        pulumi.set(__self__, "registration_destination_config", registration_destination_config)
        if additional_variables is not None:
            pulumi.set(__self__, "additional_variables", additional_variables)
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if enrichment_enabled is not None:
            pulumi.set(__self__, "enrichment_enabled", enrichment_enabled)

    @property
    @pulumi.getter(name="registrationDestinationConfig")
    def registration_destination_config(self) -> pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigArrgs']:
        """
        registrationDestinationConfig
        Structure is documented below.
        """
        return pulumi.get(self, "registration_destination_config")

    @registration_destination_config.setter
    def registration_destination_config(self, value: pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigArrgs']):
        pulumi.set(self, "registration_destination_config", value)

    @property
    @pulumi.getter(name="additionalVariables")
    def additional_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAdditionalVariableArrgs']]]]:
        """
        List containing additional auth configs.
        Structure is documented below.
        """
        return pulumi.get(self, "additional_variables")

    @additional_variables.setter
    def additional_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAdditionalVariableArrgs']]]]):
        pulumi.set(self, "additional_variables", value)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional[pulumi.Input['ConnectionEventingConfigAuthConfigArrgs']]:
        """
        authConfig for Eventing Configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "auth_config")

    @auth_config.setter
    def auth_config(self, value: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigArrgs']]):
        pulumi.set(self, "auth_config", value)

    @property
    @pulumi.getter(name="enrichmentEnabled")
    def enrichment_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enrichment Enabled.
        """
        return pulumi.get(self, "enrichment_enabled")

    @enrichment_enabled.setter
    def enrichment_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enrichment_enabled", value)


@pulumi.input_type
calass ConnectionEventingConfigAdditionalVariableArrgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 encryption_key_value: Optional[pulumi.Input['ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs']] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 secret_value: Optional[pulumi.Input['ConnectionEventingConfigAdditionalVariableSecretValueArrgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for the configVariable
        :param pulumi.Input[bool] boolean_value: Boolean Value of configVariable.
        :param pulumi.Input['ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs'] encryption_key_value: Encription key value of configVariable.
               Structure is documented below.
        :param pulumi.Input[int] integer_value: Integer Value of configVariable.
        :param pulumi.Input['ConnectionEventingConfigAdditionalVariableSecretValueArrgs'] secret_value: Secret value of configVariable
               Structure is documented below.
        :param pulumi.Input[str] string_value: String Value of configVariabley.
        """
        pulumi.set(__self__, "key", key)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if encryption_key_value is not None:
            pulumi.set(__self__, "encryption_key_value", encryption_key_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key for the configVariable
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean Value of configVariable.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="encryptionKeyValue")
    def encryption_key_value(self) -> Optional[pulumi.Input['ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs']]:
        """
        Encription key value of configVariable.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_key_value")

    @encryption_key_value.setter
    def encryption_key_value(self, value: Optional[pulumi.Input['ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs']]):
        pulumi.set(self, "encryption_key_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Integer Value of configVariable.
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input['ConnectionEventingConfigAdditionalVariableSecretValueArrgs']]:
        """
        Secret value of configVariable
        Structure is documented below.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input['ConnectionEventingConfigAdditionalVariableSecretValueArrgs']]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        String Value of configVariabley.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
calass ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArrgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The [KMS key name] with which the content of the Operation is encrypted. The expected
               format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
               Will be empty string if google managed.
        :param pulumi.Input[str] type: Type of Encryption Key
               Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The [KMS key name] with which the content of the Operation is encrypted. The expected
        format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
        Will be empty string if google managed.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Encryption Key
        Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
calass ConnectionEventingConfigAdditionalVariableSecretValueArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionEventingConfigAuthConfigArrgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 user_password: pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordArrgs'],
                 additional_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableArrgs']]]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_type: authType of the Connection
               Possible values are: `USER_PASSWORD`.
        :param pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordArrgs'] user_password: User password for Authentication.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableArrgs']]] additional_variables: List containing additional auth configs.
               Structure is documented below.
        :param pulumi.Input[str] auth_key: The type of authentication configured.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "user_password", user_password)
        if additional_variables is not None:
            pulumi.set(__self__, "additional_variables", additional_variables)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        """
        authType of the Connection
        Possible values are: `USER_PASSWORD`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordArrgs']:
        """
        User password for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordArrgs']):
        pulumi.set(self, "user_password", value)

    @property
    @pulumi.getter(name="additionalVariables")
    def additional_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableArrgs']]]]:
        """
        List containing additional auth configs.
        Structure is documented below.
        """
        return pulumi.get(self, "additional_variables")

    @additional_variables.setter
    def additional_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableArrgs']]]]):
        pulumi.set(self, "additional_variables", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        The type of authentication configured.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)


@pulumi.input_type
calass ConnectionEventingConfigAuthConfigAdditionalVariableArrgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 encryption_key_value: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs']] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 secret_value: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for the configVariable
        :param pulumi.Input[bool] boolean_value: Boolean Value of configVariable.
        :param pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs'] encryption_key_value: Encription key value of configVariable.
               Structure is documented below.
        :param pulumi.Input[int] integer_value: Integer Value of configVariable.
        :param pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs'] secret_value: Secret value of configVariable
               Structure is documented below.
        :param pulumi.Input[str] string_value: String Value of configVariabley.
        """
        pulumi.set(__self__, "key", key)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if encryption_key_value is not None:
            pulumi.set(__self__, "encryption_key_value", encryption_key_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key for the configVariable
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean Value of configVariable.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="encryptionKeyValue")
    def encryption_key_value(self) -> Optional[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs']]:
        """
        Encription key value of configVariable.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_key_value")

    @encryption_key_value.setter
    def encryption_key_value(self, value: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs']]):
        pulumi.set(self, "encryption_key_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Integer Value of configVariable.
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs']]:
        """
        Secret value of configVariable
        Structure is documented below.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs']]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        String Value of configVariabley.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
calass ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArrgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The [KMS key name] with which the content of the Operation is encrypted. The expected
               format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
               Will be empty string if google managed.
        :param pulumi.Input[str] type: Type of Encryption Key
               Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The [KMS key name] with which the content of the Operation is encrypted. The expected
        format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
        Will be empty string if google managed.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Encryption Key
        Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
calass ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionEventingConfigAuthConfigUserPasswordArrgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs'] password: Password for Authentication.
               Structure is documented below.
        :param pulumi.Input[str] username: Username for Authentication.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs']]:
        """
        Password for Authentication.
        Structure is documented below.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for Authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
calass ConnectionEventingConfigAuthConfigUserPasswordPasswordArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The resource name of the secret version in the format,
               format as: projects/*/secrets/*/versions/*.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The resource name of the secret version in the format,
        format as: projects/*/secrets/*/versions/*.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionEventingConfigRegistrationDestinationConfigArrgs:
    def __init__(__self__, *,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs']]]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs']]] destinations: destinations for the connection
               Structure is documented below.
        :param pulumi.Input[str] key: Key for the connection
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs']]]]:
        """
        destinations for the connection
        Structure is documented below.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for the connection
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
calass ConnectionEventingConfigRegistrationDestinationConfigDestinationArrgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service_attachment: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host
        :param pulumi.Input[int] port: port number
        :param pulumi.Input[str] service_attachment: Service Attachment
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[pulumi.Input[str]]:
        """
        Service Attachment
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_attachment", value)


@pulumi.input_type
calass ConnectionEventingRuntimeDataArrgs:
    def __init__(__self__, *,
                 events_listener_endpoint: Optional[pulumi.Input[str]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataStatusArrgs']]]] = None):
        """
        :param pulumi.Input[str] events_listener_endpoint: Events listener endpoint. The value will populated after provisioning the events listener.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataStatusArrgs']]] statuses: (Output)
               Current status of eventing.
               Structure is documented below.
        """
        if events_listener_endpoint is not None:
            pulumi.set(__self__, "events_listener_endpoint", events_listener_endpoint)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="eventsListenerEndpoint")
    def events_listener_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Events listener endpoint. The value will populated after provisioning the events listener.
        """
        return pulumi.get(self, "events_listener_endpoint")

    @events_listener_endpoint.setter
    def events_listener_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events_listener_endpoint", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataStatusArrgs']]]]:
        """
        (Output)
        Current status of eventing.
        Structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionEventingRuntimeDataStatusArrgs']]]]):
        pulumi.set(self, "statuses", value)


@pulumi.input_type
calass ConnectionEventingRuntimeDataStatusArrgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: An arbitrary description for the Conection.
        :param pulumi.Input[str] state: (Output)
               State of the Eventing
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary description for the Conection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        State of the Eventing
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
calass ConnectionLockConfigArrgs:
    def __init__(__self__, *,
                 locked: pulumi.Input[bool],
                 reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] locked: Indicates whether or not the connection is locked.
        :param pulumi.Input[str] reason: Describes why a connection is locked.
        """
        pulumi.set(__self__, "locked", locked)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Input[bool]:
        """
        Indicates whether or not the connection is locked.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: pulumi.Input[bool]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Describes why a connection is locked.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
calass ConnectionLogConfigArrgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: Enabled represents whether logging is enabled or not for a connection.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled represents whether logging is enabled or not for a connection.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
calass ConnectionNodeConfigArrgs:
    def __init__(__self__, *,
                 max_node_count: Optional[pulumi.Input[int]] = None,
                 min_node_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_node_count: Minimum number of nodes in the runtime nodes.
        :param pulumi.Input[int] min_node_count: Minimum number of nodes in the runtime nodes.
        """
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if min_node_count is not None:
            pulumi.set(__self__, "min_node_count", min_node_count)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of nodes in the runtime nodes.
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of nodes in the runtime nodes.
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_node_count", value)


@pulumi.input_type
calass ConnectionSslConfigArrgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 additional_variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSslConfigAdditionalVariableArrgs']]]] = None,
                 client_cert_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input['ConnectionSslConfigClientCertificateArrgs']] = None,
                 client_private_key: Optional[pulumi.Input['ConnectionSslConfigClientPrivateKeyArrgs']] = None,
                 client_private_key_pass: Optional[pulumi.Input['ConnectionSslConfigClientPrivateKeyPassArrgs']] = None,
                 private_server_certificate: Optional[pulumi.Input['ConnectionSslConfigPrivateServerCertificateArrgs']] = None,
                 server_cert_type: Optional[pulumi.Input[str]] = None,
                 trust_model: Optional[pulumi.Input[str]] = None,
                 use_ssl: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Enum for controlling the SSL Type (TLS/MTLS)
               Possible values are: `TLS`, `MTLS`.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionSslConfigAdditionalVariableArrgs']]] additional_variables: Additional SSL related field values.
               Structure is documented below.
        :param pulumi.Input[str] client_cert_type: Type of Client Cert (PEM/JKS/.. etc.)
               Possible values are: `PEM`.
        :param pulumi.Input['ConnectionSslConfigClientCertificateArrgs'] client_certificate: Client Certificate
               Structure is documented below.
        :param pulumi.Input['ConnectionSslConfigClientPrivateKeyArrgs'] client_private_key: Client Private Key
               Structure is documented below.
        :param pulumi.Input['ConnectionSslConfigClientPrivateKeyPassArrgs'] client_private_key_pass: Secret containing the passphrase protecting the Client Private Key
               Structure is documented below.
        :param pulumi.Input['ConnectionSslConfigPrivateServerCertificateArrgs'] private_server_certificate: Private Server Certificate. Needs to be specified if trust model is PRIVATE.
               Structure is documented below.
        :param pulumi.Input[str] server_cert_type: Type of Server Cert (PEM/JKS/.. etc.)
               Possible values are: `PEM`.
        :param pulumi.Input[str] trust_model: Enum for Trust Model
               Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
        :param pulumi.Input[bool] use_ssl: Bool for enabling SSL
        """
        pulumi.set(__self__, "type", type)
        if additional_variables is not None:
            pulumi.set(__self__, "additional_variables", additional_variables)
        if client_cert_type is not None:
            pulumi.set(__self__, "client_cert_type", client_cert_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_private_key is not None:
            pulumi.set(__self__, "client_private_key", client_private_key)
        if client_private_key_pass is not None:
            pulumi.set(__self__, "client_private_key_pass", client_private_key_pass)
        if private_server_certificate is not None:
            pulumi.set(__self__, "private_server_certificate", private_server_certificate)
        if server_cert_type is not None:
            pulumi.set(__self__, "server_cert_type", server_cert_type)
        if trust_model is not None:
            pulumi.set(__self__, "trust_model", trust_model)
        if use_ssl is not None:
            pulumi.set(__self__, "use_ssl", use_ssl)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Enum for controlling the SSL Type (TLS/MTLS)
        Possible values are: `TLS`, `MTLS`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="additionalVariables")
    def additional_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSslConfigAdditionalVariableArrgs']]]]:
        """
        Additional SSL related field values.
        Structure is documented below.
        """
        return pulumi.get(self, "additional_variables")

    @additional_variables.setter
    def additional_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSslConfigAdditionalVariableArrgs']]]]):
        pulumi.set(self, "additional_variables", value)

    @property
    @pulumi.getter(name="clientCertType")
    def client_cert_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Client Cert (PEM/JKS/.. etc.)
        Possible values are: `PEM`.
        """
        return pulumi.get(self, "client_cert_type")

    @client_cert_type.setter
    def client_cert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['ConnectionSslConfigClientCertificateArrgs']]:
        """
        Client Certificate
        Structure is documented below.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['ConnectionSslConfigClientCertificateArrgs']]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientPrivateKey")
    def client_private_key(self) -> Optional[pulumi.Input['ConnectionSslConfigClientPrivateKeyArrgs']]:
        """
        Client Private Key
        Structure is documented below.
        """
        return pulumi.get(self, "client_private_key")

    @client_private_key.setter
    def client_private_key(self, value: Optional[pulumi.Input['ConnectionSslConfigClientPrivateKeyArrgs']]):
        pulumi.set(self, "client_private_key", value)

    @property
    @pulumi.getter(name="clientPrivateKeyPass")
    def client_private_key_pass(self) -> Optional[pulumi.Input['ConnectionSslConfigClientPrivateKeyPassArrgs']]:
        """
        Secret containing the passphrase protecting the Client Private Key
        Structure is documented below.
        """
        return pulumi.get(self, "client_private_key_pass")

    @client_private_key_pass.setter
    def client_private_key_pass(self, value: Optional[pulumi.Input['ConnectionSslConfigClientPrivateKeyPassArrgs']]):
        pulumi.set(self, "client_private_key_pass", value)

    @property
    @pulumi.getter(name="privateServerCertificate")
    def private_server_certificate(self) -> Optional[pulumi.Input['ConnectionSslConfigPrivateServerCertificateArrgs']]:
        """
        Private Server Certificate. Needs to be specified if trust model is PRIVATE.
        Structure is documented below.
        """
        return pulumi.get(self, "private_server_certificate")

    @private_server_certificate.setter
    def private_server_certificate(self, value: Optional[pulumi.Input['ConnectionSslConfigPrivateServerCertificateArrgs']]):
        pulumi.set(self, "private_server_certificate", value)

    @property
    @pulumi.getter(name="serverCertType")
    def server_cert_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Server Cert (PEM/JKS/.. etc.)
        Possible values are: `PEM`.
        """
        return pulumi.get(self, "server_cert_type")

    @server_cert_type.setter
    def server_cert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert_type", value)

    @property
    @pulumi.getter(name="trustModel")
    def trust_model(self) -> Optional[pulumi.Input[str]]:
        """
        Enum for Trust Model
        Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
        """
        return pulumi.get(self, "trust_model")

    @trust_model.setter
    def trust_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_model", value)

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Bool for enabling SSL
        """
        return pulumi.get(self, "use_ssl")

    @use_ssl.setter
    def use_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl", value)


@pulumi.input_type
calass ConnectionSslConfigAdditionalVariableArrgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 encryption_key_value: Optional[pulumi.Input['ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs']] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 secret_value: Optional[pulumi.Input['ConnectionSslConfigAdditionalVariableSecretValueArrgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for the configVariable
        :param pulumi.Input[bool] boolean_value: Boolean Value of configVariable.
        :param pulumi.Input['ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs'] encryption_key_value: Encription key value of configVariable.
               Structure is documented below.
        :param pulumi.Input[int] integer_value: Integer Value of configVariable.
        :param pulumi.Input['ConnectionSslConfigAdditionalVariableSecretValueArrgs'] secret_value: Secret value of configVariable
               Structure is documented below.
        :param pulumi.Input[str] string_value: String Value of configVariabley.
        """
        pulumi.set(__self__, "key", key)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if encryption_key_value is not None:
            pulumi.set(__self__, "encryption_key_value", encryption_key_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key for the configVariable
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean Value of configVariable.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="encryptionKeyValue")
    def encryption_key_value(self) -> Optional[pulumi.Input['ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs']]:
        """
        Encription key value of configVariable.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_key_value")

    @encryption_key_value.setter
    def encryption_key_value(self, value: Optional[pulumi.Input['ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs']]):
        pulumi.set(self, "encryption_key_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Integer Value of configVariable.
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input['ConnectionSslConfigAdditionalVariableSecretValueArrgs']]:
        """
        Secret value of configVariable
        Structure is documented below.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input['ConnectionSslConfigAdditionalVariableSecretValueArrgs']]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        String Value of configVariabley.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
calass ConnectionSslConfigAdditionalVariableEncryptionKeyValueArrgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The [KMS key name] with which the content of the Operation is encrypted. The expected
               format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
               Will be empty string if google managed.
        :param pulumi.Input[str] type: Type of Encryption Key
               Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The [KMS key name] with which the content of the Operation is encrypted. The expected
        format: projects/*/locations/*/keyRings/*/cryptoKeys/*.
        Will be empty string if google managed.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Encryption Key
        Possible values are: `GOOGLE_MANAGED`, `CUSTOMER_MANAGED`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
calass ConnectionSslConfigAdditionalVariableSecretValueArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionSslConfigClientCertificateArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionSslConfigClientPrivateKeyArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionSslConfigClientPrivateKeyPassArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionSslConfigPrivateServerCertificateArrgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: Secret version of Secret Value for Config variable.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        Secret version of Secret Value for Config variable.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
calass ConnectionStatusArrgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: An arbitrary description for the Conection.
        :param pulumi.Input[str] state: (Output)
               State of the Eventing
        :param pulumi.Input[str] status: (Output)
               Current status of eventing.
               Structure is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary description for the Conection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        State of the Eventing
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Current status of eventing.
        Structure is documented below.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


