// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Four different resources help you manage your IAM policy for a project. Each of these resources serves a different use case:
//
// * `projects.IamPolicy`: Authoritative. Sets the IAM policy for the project and replaces any existing policy already attached.
// * `projects.IamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the project are preserved.
// * `projects.IamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the project are preserved.
// * `projects.IamAuditConfig`: Authoritative for a given service. Updates the IAM policy to enable audit logging for the given service.
//
// > **Note:** `projects.IamPolicy` **cannot** be used in conjunction with `projects.IamBinding`, `projects.IamMember`, or `projects.IamAuditConfig` or they will fight over what your policy should be.
//
// > **Note:** `projects.IamBinding` resources **can be** used in conjunction with `projects.IamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:** The underlying API method `projects.setIamPolicy` has a lot of constraints which are documented [here](https://cloud.google.com/resource-manager/reference/rest/v1/projects/setIamPolicy). In addition to these constraints,
//
//	IAM Conditions cannot be used with Basic Roles such as Owner. Violating these constraints will result in the API returning 400 error code so please review these if you encounter errors with this resource.
//
// ## google\_project\_iam\_policy
//
// !> **Be careful!** You can accidentally lock yourself out of your project
//
//	using this resource. Deleting a `projects.IamPolicy` removes access
//	from anyone without organization-level access to the project. Proceed with caution.
//	It's not recommended to use `projects.IamPolicy` with your provider project
//	to avoid locking yourself out, and it should generally only be used with projects
//	fully managed by this provider. If you do use this resource, it is recommended to **import** the policy before
//	applying the change.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIamPolicy(ctx, "project", &projects.IamPolicyArgs{
//				Project:    pulumi.String("your-project-id"),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Condition: {
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//							Title:       "expires_after_2019_12_31",
//						},
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Role: "roles/compute.admin",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIamPolicy(ctx, "project", &projects.IamPolicyArgs{
//				PolicyData: *pulumi.String(admin.PolicyData),
//				Project:    pulumi.String("your-project-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_project\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewIamBinding(ctx, "project", &projects.IamBindingArgs{
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Project: pulumi.String("your-project-id"),
//				Role:    pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewIamBinding(ctx, "project", &projects.IamBindingArgs{
//				Condition: &projects.IamBindingConditionArgs{
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//					Title:       pulumi.String("expires_after_2019_12_31"),
//				},
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Project: pulumi.String("your-project-id"),
//				Role:    pulumi.String("roles/container.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_project\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewIamMember(ctx, "project", &projects.IamMemberArgs{
//				Member:  pulumi.String("user:jane@example.com"),
//				Project: pulumi.String("your-project-id"),
//				Role:    pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewIamMember(ctx, "project", &projects.IamMemberArgs{
//				Condition: &projects.IamMemberConditionArgs{
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//					Title:       pulumi.String("expires_after_2019_12_31"),
//				},
//				Member:  pulumi.String("user:jane@example.com"),
//				Project: pulumi.String("your-project-id"),
//				Role:    pulumi.String("roles/firebase.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_project\_iam\_audit\_config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewIamAuditConfig(ctx, "project", &projects.IamAuditConfigArgs{
//				AuditLogConfigs: projects.IamAuditConfigAuditLogConfigArray{
//					&projects.IamAuditConfigAuditLogConfigArgs{
//						LogType: pulumi.String("ADMIN_READ"),
//					},
//					&projects.IamAuditConfigAuditLogConfigArgs{
//						ExemptedMembers: pulumi.StringArray{
//							pulumi.String("user:joebloggs@hashicorp.com"),
//						},
//						LogType: pulumi.String("DATA_READ"),
//					},
//				},
//				Project: pulumi.String("your-project-id"),
//				Service: pulumi.String("allServices"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
//
// This member resource can be imported using the `project_id`, role, and member e.g.
//
// ```sh
//
//	$ pulumi import gcp:projects/iamMember:IamMember my_project "your-project-id roles/viewer user:foo@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiers; the resource in question and the role.
//
// This binding resource can be imported using the `project_id` and role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:projects/iamMember:IamMember my_project "your-project-id roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question.
//
// This policy resource can be imported using the `project_id`.
//
// ```sh
//
//	$ pulumi import gcp:projects/iamMember:IamMember my_project your-project-id
//
// ```
//
//	IAM audit config imports use the identifier of the resource in question and the service, e.g.
//
// ```sh
//
//	$ pulumi import gcp:projects/iamMember:IamMember my_project "your-project-id foo.googleapis.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`. -> **Conditional IAM Bindings**If you're importing a IAM binding with a condition block, make sure
//
// ```sh
//
//	$ pulumi import gcp:projects/iamMember:IamMember to include the title of condition, e.g. `google_project_iam_binding.my_project "{{your-project-id}} roles/{{role_id}} condition-title"`
//
// ```
type IamMember struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition IamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the project's IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The project id of the target project. This is not
	// inferred from the provider.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `projects.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewIamMember registers a new resource with the given unique name, arguments, and options.
func NewIamMember(ctx *pulumi.Context,
	name string, args *IamMemberArgs, opts ...pulumi.ResourceOption) (*IamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamMember
	err := ctx.RegisterResource("gcp:projects/iamMember:IamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamMember gets an existing IamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamMemberState, opts ...pulumi.ResourceOption) (*IamMember, error) {
	var resource IamMember
	err := ctx.ReadResource("gcp:projects/iamMember:IamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamMember resources.
type iamMemberState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *IamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the project's IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The project id of the target project. This is not
	// inferred from the provider.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `projects.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type IamMemberState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition IamMemberConditionPtrInput
	// (Computed) The etag of the project's IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The project id of the target project. This is not
	// inferred from the provider.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `projects.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (IamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamMemberState)(nil)).Elem()
}

type iamMemberArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *IamMemberCondition `pulumi:"condition"`
	Member    string              `pulumi:"member"`
	// The project id of the target project. This is not
	// inferred from the provider.
	Project string `pulumi:"project"`
	// The role that should be applied. Only one
	// `projects.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a IamMember resource.
type IamMemberArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition IamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The project id of the target project. This is not
	// inferred from the provider.
	Project pulumi.StringInput
	// The role that should be applied. Only one
	// `projects.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (IamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamMemberArgs)(nil)).Elem()
}

type IamMemberInput interface {
	pulumi.Input

	ToIamMemberOutput() IamMemberOutput
	ToIamMemberOutputWithContext(ctx context.Context) IamMemberOutput
}

func (*IamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**IamMember)(nil)).Elem()
}

func (i *IamMember) ToIamMemberOutput() IamMemberOutput {
	return i.ToIamMemberOutputWithContext(context.Background())
}

func (i *IamMember) ToIamMemberOutputWithContext(ctx context.Context) IamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMemberOutput)
}

// IamMemberArrayInput is an input type that accepts IamMemberArray and IamMemberArrayOutput values.
// You can construct a concrete instance of `IamMemberArrayInput` via:
//
//	IamMemberArray{ IamMemberArgs{...} }
type IamMemberArrayInput interface {
	pulumi.Input

	ToIamMemberArrayOutput() IamMemberArrayOutput
	ToIamMemberArrayOutputWithContext(context.Context) IamMemberArrayOutput
}

type IamMemberArray []IamMemberInput

func (IamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamMember)(nil)).Elem()
}

func (i IamMemberArray) ToIamMemberArrayOutput() IamMemberArrayOutput {
	return i.ToIamMemberArrayOutputWithContext(context.Background())
}

func (i IamMemberArray) ToIamMemberArrayOutputWithContext(ctx context.Context) IamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMemberArrayOutput)
}

// IamMemberMapInput is an input type that accepts IamMemberMap and IamMemberMapOutput values.
// You can construct a concrete instance of `IamMemberMapInput` via:
//
//	IamMemberMap{ "key": IamMemberArgs{...} }
type IamMemberMapInput interface {
	pulumi.Input

	ToIamMemberMapOutput() IamMemberMapOutput
	ToIamMemberMapOutputWithContext(context.Context) IamMemberMapOutput
}

type IamMemberMap map[string]IamMemberInput

func (IamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamMember)(nil)).Elem()
}

func (i IamMemberMap) ToIamMemberMapOutput() IamMemberMapOutput {
	return i.ToIamMemberMapOutputWithContext(context.Background())
}

func (i IamMemberMap) ToIamMemberMapOutputWithContext(ctx context.Context) IamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMemberMapOutput)
}

type IamMemberOutput struct{ *pulumi.OutputState }

func (IamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamMember)(nil)).Elem()
}

func (o IamMemberOutput) ToIamMemberOutput() IamMemberOutput {
	return o
}

func (o IamMemberOutput) ToIamMemberOutputWithContext(ctx context.Context) IamMemberOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o IamMemberOutput) Condition() IamMemberConditionPtrOutput {
	return o.ApplyT(func(v *IamMember) IamMemberConditionPtrOutput { return v.Condition }).(IamMemberConditionPtrOutput)
}

// (Computed) The etag of the project's IAM policy.
func (o IamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *IamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o IamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *IamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The project id of the target project. This is not
// inferred from the provider.
func (o IamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `projects.IamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o IamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *IamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type IamMemberArrayOutput struct{ *pulumi.OutputState }

func (IamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamMember)(nil)).Elem()
}

func (o IamMemberArrayOutput) ToIamMemberArrayOutput() IamMemberArrayOutput {
	return o
}

func (o IamMemberArrayOutput) ToIamMemberArrayOutputWithContext(ctx context.Context) IamMemberArrayOutput {
	return o
}

func (o IamMemberArrayOutput) Index(i pulumi.IntInput) IamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamMember {
		return vs[0].([]*IamMember)[vs[1].(int)]
	}).(IamMemberOutput)
}

type IamMemberMapOutput struct{ *pulumi.OutputState }

func (IamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamMember)(nil)).Elem()
}

func (o IamMemberMapOutput) ToIamMemberMapOutput() IamMemberMapOutput {
	return o
}

func (o IamMemberMapOutput) ToIamMemberMapOutputWithContext(ctx context.Context) IamMemberMapOutput {
	return o
}

func (o IamMemberMapOutput) MapIndex(k pulumi.StringInput) IamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamMember {
		return vs[0].(map[string]*IamMember)[vs[1].(string)]
	}).(IamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamMemberInput)(nil)).Elem(), &IamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamMemberArrayInput)(nil)).Elem(), IamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamMemberMapInput)(nil)).Elem(), IamMemberMap{})
	pulumi.RegisterOutputType(IamMemberOutput{})
	pulumi.RegisterOutputType(IamMemberArrayOutput{})
	pulumi.RegisterOutputType(IamMemberMapOutput{})
}
