// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage IAM policies on dataproc jobs. Each of these resources serves a different use case:
//
// * `dataproc.JobIamPolicy`: Authoritative. Sets the IAM policy for the job and replaces any existing policy already attached.
// * `dataproc.JobIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the job are preserved.
// * `dataproc.JobIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the job are preserved.
//
// > **Note:** `dataproc.JobIamPolicy` **cannot** be used in conjunction with `dataproc.JobIamBinding` and `dataproc.JobIamMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the job as `dataproc.JobIamPolicy` replaces the entire policy.
//
// > **Note:** `dataproc.JobIamBinding` resources **can be** used in conjunction with `dataproc.JobIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_dataproc\_job\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewJobIamPolicy(ctx, "editor", &dataproc.JobIamPolicyArgs{
//				Project:    pulumi.String("your-project"),
//				Region:     pulumi.String("your-region"),
//				JobId:      pulumi.String("your-dataproc-job"),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_job\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIamBinding(ctx, "editor", &dataproc.JobIamBindingArgs{
//				JobId: pulumi.String("your-dataproc-job"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_job\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIamMember(ctx, "editor", &dataproc.JobIamMemberArgs{
//				JobId:  pulumi.String("your-dataproc-job"),
//				Member: pulumi.String("user:jane@example.com"),
//				Role:   pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Job IAM resources can be imported using the project, region, job id, role and/or member.
//
// ```sh
//
//	$ pulumi import gcp:dataproc/jobIamBinding:JobIamBinding editor "projects/{project}/regions/{region}/jobs/{job_id}"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/jobIamBinding:JobIamBinding editor "projects/{project}/regions/{region}/jobs/{job_id} roles/editor"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/jobIamBinding:JobIamBinding editor "projects/{project}/regions/{region}/jobs/{job_id} roles/editor user:jane@example.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type JobIamBinding struct {
	pulumi.CustomResourceState

	Condition JobIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the jobs's IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	JobId   pulumi.StringOutput      `pulumi:"jobId"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewJobIamBinding registers a new resource with the given unique name, arguments, and options.
func NewJobIamBinding(ctx *pulumi.Context,
	name string, args *JobIamBindingArgs, opts ...pulumi.ResourceOption) (*JobIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobIamBinding
	err := ctx.RegisterResource("gcp:dataproc/jobIamBinding:JobIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobIamBinding gets an existing JobIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobIamBindingState, opts ...pulumi.ResourceOption) (*JobIamBinding, error) {
	var resource JobIamBinding
	err := ctx.ReadResource("gcp:dataproc/jobIamBinding:JobIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobIamBinding resources.
type jobIamBindingState struct {
	Condition *JobIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the jobs's IAM policy.
	Etag    *string  `pulumi:"etag"`
	JobId   *string  `pulumi:"jobId"`
	Members []string `pulumi:"members"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role *string `pulumi:"role"`
}

type JobIamBindingState struct {
	Condition JobIamBindingConditionPtrInput
	// (Computed) The etag of the jobs's IAM policy.
	Etag    pulumi.StringPtrInput
	JobId   pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role pulumi.StringPtrInput
}

func (JobIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIamBindingState)(nil)).Elem()
}

type jobIamBindingArgs struct {
	Condition *JobIamBindingCondition `pulumi:"condition"`
	JobId     string                  `pulumi:"jobId"`
	Members   []string                `pulumi:"members"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a JobIamBinding resource.
type JobIamBindingArgs struct {
	Condition JobIamBindingConditionPtrInput
	JobId     pulumi.StringInput
	Members   pulumi.StringArrayInput
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role pulumi.StringInput
}

func (JobIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIamBindingArgs)(nil)).Elem()
}

type JobIamBindingInput interface {
	pulumi.Input

	ToJobIamBindingOutput() JobIamBindingOutput
	ToJobIamBindingOutputWithContext(ctx context.Context) JobIamBindingOutput
}

func (*JobIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIamBinding)(nil)).Elem()
}

func (i *JobIamBinding) ToJobIamBindingOutput() JobIamBindingOutput {
	return i.ToJobIamBindingOutputWithContext(context.Background())
}

func (i *JobIamBinding) ToJobIamBindingOutputWithContext(ctx context.Context) JobIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamBindingOutput)
}

// JobIamBindingArrayInput is an input type that accepts JobIamBindingArray and JobIamBindingArrayOutput values.
// You can construct a concrete instance of `JobIamBindingArrayInput` via:
//
//	JobIamBindingArray{ JobIamBindingArgs{...} }
type JobIamBindingArrayInput interface {
	pulumi.Input

	ToJobIamBindingArrayOutput() JobIamBindingArrayOutput
	ToJobIamBindingArrayOutputWithContext(context.Context) JobIamBindingArrayOutput
}

type JobIamBindingArray []JobIamBindingInput

func (JobIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIamBinding)(nil)).Elem()
}

func (i JobIamBindingArray) ToJobIamBindingArrayOutput() JobIamBindingArrayOutput {
	return i.ToJobIamBindingArrayOutputWithContext(context.Background())
}

func (i JobIamBindingArray) ToJobIamBindingArrayOutputWithContext(ctx context.Context) JobIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamBindingArrayOutput)
}

// JobIamBindingMapInput is an input type that accepts JobIamBindingMap and JobIamBindingMapOutput values.
// You can construct a concrete instance of `JobIamBindingMapInput` via:
//
//	JobIamBindingMap{ "key": JobIamBindingArgs{...} }
type JobIamBindingMapInput interface {
	pulumi.Input

	ToJobIamBindingMapOutput() JobIamBindingMapOutput
	ToJobIamBindingMapOutputWithContext(context.Context) JobIamBindingMapOutput
}

type JobIamBindingMap map[string]JobIamBindingInput

func (JobIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIamBinding)(nil)).Elem()
}

func (i JobIamBindingMap) ToJobIamBindingMapOutput() JobIamBindingMapOutput {
	return i.ToJobIamBindingMapOutputWithContext(context.Background())
}

func (i JobIamBindingMap) ToJobIamBindingMapOutputWithContext(ctx context.Context) JobIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamBindingMapOutput)
}

type JobIamBindingOutput struct{ *pulumi.OutputState }

func (JobIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIamBinding)(nil)).Elem()
}

func (o JobIamBindingOutput) ToJobIamBindingOutput() JobIamBindingOutput {
	return o
}

func (o JobIamBindingOutput) ToJobIamBindingOutputWithContext(ctx context.Context) JobIamBindingOutput {
	return o
}

func (o JobIamBindingOutput) Condition() JobIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *JobIamBinding) JobIamBindingConditionPtrOutput { return v.Condition }).(JobIamBindingConditionPtrOutput)
}

// (Computed) The etag of the jobs's IAM policy.
func (o JobIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o JobIamBindingOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamBinding) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

func (o JobIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The project in which the job belongs. If it
// is not provided, the provider will use a default.
func (o JobIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the job belongs. If it
// is not provided, the provider will use a default.
func (o JobIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
//
// `dataproc.JobIamPolicy` only:
func (o JobIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type JobIamBindingArrayOutput struct{ *pulumi.OutputState }

func (JobIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIamBinding)(nil)).Elem()
}

func (o JobIamBindingArrayOutput) ToJobIamBindingArrayOutput() JobIamBindingArrayOutput {
	return o
}

func (o JobIamBindingArrayOutput) ToJobIamBindingArrayOutputWithContext(ctx context.Context) JobIamBindingArrayOutput {
	return o
}

func (o JobIamBindingArrayOutput) Index(i pulumi.IntInput) JobIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobIamBinding {
		return vs[0].([]*JobIamBinding)[vs[1].(int)]
	}).(JobIamBindingOutput)
}

type JobIamBindingMapOutput struct{ *pulumi.OutputState }

func (JobIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIamBinding)(nil)).Elem()
}

func (o JobIamBindingMapOutput) ToJobIamBindingMapOutput() JobIamBindingMapOutput {
	return o
}

func (o JobIamBindingMapOutput) ToJobIamBindingMapOutputWithContext(ctx context.Context) JobIamBindingMapOutput {
	return o
}

func (o JobIamBindingMapOutput) MapIndex(k pulumi.StringInput) JobIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobIamBinding {
		return vs[0].(map[string]*JobIamBinding)[vs[1].(string)]
	}).(JobIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamBindingInput)(nil)).Elem(), &JobIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamBindingArrayInput)(nil)).Elem(), JobIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamBindingMapInput)(nil)).Elem(), JobIamBindingMap{})
	pulumi.RegisterOutputType(JobIamBindingOutput{})
	pulumi.RegisterOutputType(JobIamBindingArrayOutput{})
	pulumi.RegisterOutputType(JobIamBindingMapOutput{})
}
