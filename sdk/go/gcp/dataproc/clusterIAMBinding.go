// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage IAM policies on dataproc clusters. Each of these resources serves a different use case:
//
// * `dataproc.ClusterIamPolicy`: Authoritative. Sets the IAM policy for the cluster and replaces any existing policy already attached.
// * `dataproc.ClusterIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the cluster are preserved.
// * `dataproc.ClusterIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the cluster are preserved.
//
// > **Note:** `dataproc.ClusterIamPolicy` **cannot** be used in conjunction with `dataproc.ClusterIamBinding` and `dataproc.ClusterIamMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the cluster as `dataproc.ClusterIamPolicy` replaces the entire policy.
//
// > **Note:** `dataproc.ClusterIamBinding` resources **can be** used in conjunction with `dataproc.ClusterIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_dataproc\_cluster\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewClusterIamPolicy(ctx, "editor", &dataproc.ClusterIamPolicyArgs{
//				Project:    pulumi.String("your-project"),
//				Region:     pulumi.String("your-region"),
//				Cluster:    pulumi.String("your-dataproc-cluster"),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_cluster\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewClusterIamBinding(ctx, "editor", &dataproc.ClusterIamBindingArgs{
//				Cluster: pulumi.String("your-dataproc-cluster"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_cluster\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewClusterIamMember(ctx, "editor", &dataproc.ClusterIamMemberArgs{
//				Cluster: pulumi.String("your-dataproc-cluster"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Role:    pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cluster IAM resources can be imported using the project, region, cluster name, role and/or member.
//
// ```sh
//
//	$ pulumi import gcp:dataproc/clusterIamBinding:ClusterIamBinding editor "projects/{project}/regions/{region}/clusters/{cluster}"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/clusterIamBinding:ClusterIamBinding editor "projects/{project}/regions/{region}/clusters/{cluster} roles/editor"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/clusterIamBinding:ClusterIamBinding editor "projects/{project}/regions/{region}/clusters/{cluster} roles/editor user:jane@example.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ClusterIamBinding struct {
	pulumi.CustomResourceState

	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   pulumi.StringOutput                 `pulumi:"cluster"`
	Condition ClusterIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the clusters's IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewClusterIamBinding registers a new resource with the given unique name, arguments, and options.
func NewClusterIamBinding(ctx *pulumi.Context,
	name string, args *ClusterIamBindingArgs, opts ...pulumi.ResourceOption) (*ClusterIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterIamBinding
	err := ctx.RegisterResource("gcp:dataproc/clusterIamBinding:ClusterIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterIamBinding gets an existing ClusterIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterIamBindingState, opts ...pulumi.ResourceOption) (*ClusterIamBinding, error) {
	var resource ClusterIamBinding
	err := ctx.ReadResource("gcp:dataproc/clusterIamBinding:ClusterIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterIamBinding resources.
type clusterIamBindingState struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   *string                     `pulumi:"cluster"`
	Condition *ClusterIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the clusters's IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role *string `pulumi:"role"`
}

type ClusterIamBindingState struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   pulumi.StringPtrInput
	Condition ClusterIamBindingConditionPtrInput
	// (Computed) The etag of the clusters's IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role pulumi.StringPtrInput
}

func (ClusterIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterIamBindingState)(nil)).Elem()
}

type clusterIamBindingArgs struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   string                      `pulumi:"cluster"`
	Condition *ClusterIamBindingCondition `pulumi:"condition"`
	Members   []string                    `pulumi:"members"`
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ClusterIamBinding resource.
type ClusterIamBindingArgs struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   pulumi.StringInput
	Condition ClusterIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role pulumi.StringInput
}

func (ClusterIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterIamBindingArgs)(nil)).Elem()
}

type ClusterIamBindingInput interface {
	pulumi.Input

	ToClusterIamBindingOutput() ClusterIamBindingOutput
	ToClusterIamBindingOutputWithContext(ctx context.Context) ClusterIamBindingOutput
}

func (*ClusterIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIamBinding)(nil)).Elem()
}

func (i *ClusterIamBinding) ToClusterIamBindingOutput() ClusterIamBindingOutput {
	return i.ToClusterIamBindingOutputWithContext(context.Background())
}

func (i *ClusterIamBinding) ToClusterIamBindingOutputWithContext(ctx context.Context) ClusterIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamBindingOutput)
}

// ClusterIamBindingArrayInput is an input type that accepts ClusterIamBindingArray and ClusterIamBindingArrayOutput values.
// You can construct a concrete instance of `ClusterIamBindingArrayInput` via:
//
//	ClusterIamBindingArray{ ClusterIamBindingArgs{...} }
type ClusterIamBindingArrayInput interface {
	pulumi.Input

	ToClusterIamBindingArrayOutput() ClusterIamBindingArrayOutput
	ToClusterIamBindingArrayOutputWithContext(context.Context) ClusterIamBindingArrayOutput
}

type ClusterIamBindingArray []ClusterIamBindingInput

func (ClusterIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterIamBinding)(nil)).Elem()
}

func (i ClusterIamBindingArray) ToClusterIamBindingArrayOutput() ClusterIamBindingArrayOutput {
	return i.ToClusterIamBindingArrayOutputWithContext(context.Background())
}

func (i ClusterIamBindingArray) ToClusterIamBindingArrayOutputWithContext(ctx context.Context) ClusterIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamBindingArrayOutput)
}

// ClusterIamBindingMapInput is an input type that accepts ClusterIamBindingMap and ClusterIamBindingMapOutput values.
// You can construct a concrete instance of `ClusterIamBindingMapInput` via:
//
//	ClusterIamBindingMap{ "key": ClusterIamBindingArgs{...} }
type ClusterIamBindingMapInput interface {
	pulumi.Input

	ToClusterIamBindingMapOutput() ClusterIamBindingMapOutput
	ToClusterIamBindingMapOutputWithContext(context.Context) ClusterIamBindingMapOutput
}

type ClusterIamBindingMap map[string]ClusterIamBindingInput

func (ClusterIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterIamBinding)(nil)).Elem()
}

func (i ClusterIamBindingMap) ToClusterIamBindingMapOutput() ClusterIamBindingMapOutput {
	return i.ToClusterIamBindingMapOutputWithContext(context.Background())
}

func (i ClusterIamBindingMap) ToClusterIamBindingMapOutputWithContext(ctx context.Context) ClusterIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamBindingMapOutput)
}

type ClusterIamBindingOutput struct{ *pulumi.OutputState }

func (ClusterIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIamBinding)(nil)).Elem()
}

func (o ClusterIamBindingOutput) ToClusterIamBindingOutput() ClusterIamBindingOutput {
	return o
}

func (o ClusterIamBindingOutput) ToClusterIamBindingOutputWithContext(ctx context.Context) ClusterIamBindingOutput {
	return o
}

// The name or relative resource id of the cluster to manage IAM policies for.
//
// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o ClusterIamBindingOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamBinding) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

func (o ClusterIamBindingOutput) Condition() ClusterIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ClusterIamBinding) ClusterIamBindingConditionPtrOutput { return v.Condition }).(ClusterIamBindingConditionPtrOutput)
}

// (Computed) The etag of the clusters's IAM policy.
func (o ClusterIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ClusterIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The project in which the cluster belongs. If it
// is not provided, the provider will use a default.
func (o ClusterIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the cluster belongs. If it
// is not provided, the provider will use a default.
func (o ClusterIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
//
// `dataproc.ClusterIamPolicy` only:
func (o ClusterIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ClusterIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ClusterIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterIamBinding)(nil)).Elem()
}

func (o ClusterIamBindingArrayOutput) ToClusterIamBindingArrayOutput() ClusterIamBindingArrayOutput {
	return o
}

func (o ClusterIamBindingArrayOutput) ToClusterIamBindingArrayOutputWithContext(ctx context.Context) ClusterIamBindingArrayOutput {
	return o
}

func (o ClusterIamBindingArrayOutput) Index(i pulumi.IntInput) ClusterIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterIamBinding {
		return vs[0].([]*ClusterIamBinding)[vs[1].(int)]
	}).(ClusterIamBindingOutput)
}

type ClusterIamBindingMapOutput struct{ *pulumi.OutputState }

func (ClusterIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterIamBinding)(nil)).Elem()
}

func (o ClusterIamBindingMapOutput) ToClusterIamBindingMapOutput() ClusterIamBindingMapOutput {
	return o
}

func (o ClusterIamBindingMapOutput) ToClusterIamBindingMapOutputWithContext(ctx context.Context) ClusterIamBindingMapOutput {
	return o
}

func (o ClusterIamBindingMapOutput) MapIndex(k pulumi.StringInput) ClusterIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterIamBinding {
		return vs[0].(map[string]*ClusterIamBinding)[vs[1].(string)]
	}).(ClusterIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamBindingInput)(nil)).Elem(), &ClusterIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamBindingArrayInput)(nil)).Elem(), ClusterIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamBindingMapInput)(nil)).Elem(), ClusterIamBindingMap{})
	pulumi.RegisterOutputType(ClusterIamBindingOutput{})
	pulumi.RegisterOutputType(ClusterIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ClusterIamBindingMapOutput{})
}
