// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage IAM policies on dataproc jobs. Each of these resources serves a different use case:
//
// * `dataproc.JobIamPolicy`: Authoritative. Sets the IAM policy for the job and replaces any existing policy already attached.
// * `dataproc.JobIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the job are preserved.
// * `dataproc.JobIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the job are preserved.
//
// > **Note:** `dataproc.JobIamPolicy` **cannot** be used in conjunction with `dataproc.JobIamBinding` and `dataproc.JobIamMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the job as `dataproc.JobIamPolicy` replaces the entire policy.
//
// > **Note:** `dataproc.JobIamBinding` resources **can be** used in conjunction with `dataproc.JobIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_dataproc\_job\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewJobIamPolicy(ctx, "editor", &dataproc.JobIamPolicyArgs{
//				Project:    pulumi.String("your-project"),
//				Region:     pulumi.String("your-region"),
//				JobId:      pulumi.String("your-dataproc-job"),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_job\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIamBinding(ctx, "editor", &dataproc.JobIamBindingArgs{
//				JobId: pulumi.String("your-dataproc-job"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_job\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewJobIamMember(ctx, "editor", &dataproc.JobIamMemberArgs{
//				JobId:  pulumi.String("your-dataproc-job"),
//				Member: pulumi.String("user:jane@example.com"),
//				Role:   pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Job IAM resources can be imported using the project, region, job id, role and/or member.
//
// ```sh
//
//	$ pulumi import gcp:dataproc/jobIamMember:JobIamMember editor "projects/{project}/regions/{region}/jobs/{job_id}"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/jobIamMember:JobIamMember editor "projects/{project}/regions/{region}/jobs/{job_id} roles/editor"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/jobIamMember:JobIamMember editor "projects/{project}/regions/{region}/jobs/{job_id} roles/editor user:jane@example.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type JobIamMember struct {
	pulumi.CustomResourceState

	Condition JobIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the jobs's IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	JobId  pulumi.StringOutput `pulumi:"jobId"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewJobIamMember registers a new resource with the given unique name, arguments, and options.
func NewJobIamMember(ctx *pulumi.Context,
	name string, args *JobIamMemberArgs, opts ...pulumi.ResourceOption) (*JobIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobIamMember
	err := ctx.RegisterResource("gcp:dataproc/jobIamMember:JobIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobIamMember gets an existing JobIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobIamMemberState, opts ...pulumi.ResourceOption) (*JobIamMember, error) {
	var resource JobIamMember
	err := ctx.ReadResource("gcp:dataproc/jobIamMember:JobIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobIamMember resources.
type jobIamMemberState struct {
	Condition *JobIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the jobs's IAM policy.
	Etag   *string `pulumi:"etag"`
	JobId  *string `pulumi:"jobId"`
	Member *string `pulumi:"member"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role *string `pulumi:"role"`
}

type JobIamMemberState struct {
	Condition JobIamMemberConditionPtrInput
	// (Computed) The etag of the jobs's IAM policy.
	Etag   pulumi.StringPtrInput
	JobId  pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role pulumi.StringPtrInput
}

func (JobIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIamMemberState)(nil)).Elem()
}

type jobIamMemberArgs struct {
	Condition *JobIamMemberCondition `pulumi:"condition"`
	JobId     string                 `pulumi:"jobId"`
	Member    string                 `pulumi:"member"`
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a JobIamMember resource.
type JobIamMemberArgs struct {
	Condition JobIamMemberConditionPtrInput
	JobId     pulumi.StringInput
	Member    pulumi.StringInput
	// The project in which the job belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the job belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.JobIamPolicy` only:
	Role pulumi.StringInput
}

func (JobIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIamMemberArgs)(nil)).Elem()
}

type JobIamMemberInput interface {
	pulumi.Input

	ToJobIamMemberOutput() JobIamMemberOutput
	ToJobIamMemberOutputWithContext(ctx context.Context) JobIamMemberOutput
}

func (*JobIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIamMember)(nil)).Elem()
}

func (i *JobIamMember) ToJobIamMemberOutput() JobIamMemberOutput {
	return i.ToJobIamMemberOutputWithContext(context.Background())
}

func (i *JobIamMember) ToJobIamMemberOutputWithContext(ctx context.Context) JobIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamMemberOutput)
}

// JobIamMemberArrayInput is an input type that accepts JobIamMemberArray and JobIamMemberArrayOutput values.
// You can construct a concrete instance of `JobIamMemberArrayInput` via:
//
//	JobIamMemberArray{ JobIamMemberArgs{...} }
type JobIamMemberArrayInput interface {
	pulumi.Input

	ToJobIamMemberArrayOutput() JobIamMemberArrayOutput
	ToJobIamMemberArrayOutputWithContext(context.Context) JobIamMemberArrayOutput
}

type JobIamMemberArray []JobIamMemberInput

func (JobIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIamMember)(nil)).Elem()
}

func (i JobIamMemberArray) ToJobIamMemberArrayOutput() JobIamMemberArrayOutput {
	return i.ToJobIamMemberArrayOutputWithContext(context.Background())
}

func (i JobIamMemberArray) ToJobIamMemberArrayOutputWithContext(ctx context.Context) JobIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamMemberArrayOutput)
}

// JobIamMemberMapInput is an input type that accepts JobIamMemberMap and JobIamMemberMapOutput values.
// You can construct a concrete instance of `JobIamMemberMapInput` via:
//
//	JobIamMemberMap{ "key": JobIamMemberArgs{...} }
type JobIamMemberMapInput interface {
	pulumi.Input

	ToJobIamMemberMapOutput() JobIamMemberMapOutput
	ToJobIamMemberMapOutputWithContext(context.Context) JobIamMemberMapOutput
}

type JobIamMemberMap map[string]JobIamMemberInput

func (JobIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIamMember)(nil)).Elem()
}

func (i JobIamMemberMap) ToJobIamMemberMapOutput() JobIamMemberMapOutput {
	return i.ToJobIamMemberMapOutputWithContext(context.Background())
}

func (i JobIamMemberMap) ToJobIamMemberMapOutputWithContext(ctx context.Context) JobIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamMemberMapOutput)
}

type JobIamMemberOutput struct{ *pulumi.OutputState }

func (JobIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIamMember)(nil)).Elem()
}

func (o JobIamMemberOutput) ToJobIamMemberOutput() JobIamMemberOutput {
	return o
}

func (o JobIamMemberOutput) ToJobIamMemberOutputWithContext(ctx context.Context) JobIamMemberOutput {
	return o
}

func (o JobIamMemberOutput) Condition() JobIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *JobIamMember) JobIamMemberConditionPtrOutput { return v.Condition }).(JobIamMemberConditionPtrOutput)
}

// (Computed) The etag of the jobs's IAM policy.
func (o JobIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o JobIamMemberOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamMember) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

func (o JobIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The project in which the job belongs. If it
// is not provided, the provider will use a default.
func (o JobIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the job belongs. If it
// is not provided, the provider will use a default.
func (o JobIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.JobIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
//
// `dataproc.JobIamPolicy` only:
func (o JobIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type JobIamMemberArrayOutput struct{ *pulumi.OutputState }

func (JobIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIamMember)(nil)).Elem()
}

func (o JobIamMemberArrayOutput) ToJobIamMemberArrayOutput() JobIamMemberArrayOutput {
	return o
}

func (o JobIamMemberArrayOutput) ToJobIamMemberArrayOutputWithContext(ctx context.Context) JobIamMemberArrayOutput {
	return o
}

func (o JobIamMemberArrayOutput) Index(i pulumi.IntInput) JobIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobIamMember {
		return vs[0].([]*JobIamMember)[vs[1].(int)]
	}).(JobIamMemberOutput)
}

type JobIamMemberMapOutput struct{ *pulumi.OutputState }

func (JobIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIamMember)(nil)).Elem()
}

func (o JobIamMemberMapOutput) ToJobIamMemberMapOutput() JobIamMemberMapOutput {
	return o
}

func (o JobIamMemberMapOutput) ToJobIamMemberMapOutputWithContext(ctx context.Context) JobIamMemberMapOutput {
	return o
}

func (o JobIamMemberMapOutput) MapIndex(k pulumi.StringInput) JobIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobIamMember {
		return vs[0].(map[string]*JobIamMember)[vs[1].(string)]
	}).(JobIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamMemberInput)(nil)).Elem(), &JobIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamMemberArrayInput)(nil)).Elem(), JobIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamMemberMapInput)(nil)).Elem(), JobIamMemberMap{})
	pulumi.RegisterOutputType(JobIamMemberOutput{})
	pulumi.RegisterOutputType(JobIamMemberArrayOutput{})
	pulumi.RegisterOutputType(JobIamMemberMapOutput{})
}
