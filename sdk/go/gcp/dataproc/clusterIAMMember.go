// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataproc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage IAM policies on dataproc clusters. Each of these resources serves a different use case:
//
// * `dataproc.ClusterIamPolicy`: Authoritative. Sets the IAM policy for the cluster and replaces any existing policy already attached.
// * `dataproc.ClusterIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the cluster are preserved.
// * `dataproc.ClusterIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the cluster are preserved.
//
// > **Note:** `dataproc.ClusterIamPolicy` **cannot** be used in conjunction with `dataproc.ClusterIamBinding` and `dataproc.ClusterIamMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the cluster as `dataproc.ClusterIamPolicy` replaces the entire policy.
//
// > **Note:** `dataproc.ClusterIamBinding` resources **can be** used in conjunction with `dataproc.ClusterIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_dataproc\_cluster\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataproc.NewClusterIamPolicy(ctx, "editor", &dataproc.ClusterIamPolicyArgs{
//				Project:    pulumi.String("your-project"),
//				Region:     pulumi.String("your-region"),
//				Cluster:    pulumi.String("your-dataproc-cluster"),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_cluster\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewClusterIamBinding(ctx, "editor", &dataproc.ClusterIamBindingArgs{
//				Cluster: pulumi.String("your-dataproc-cluster"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataproc\_cluster\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataproc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataproc.NewClusterIamMember(ctx, "editor", &dataproc.ClusterIamMemberArgs{
//				Cluster: pulumi.String("your-dataproc-cluster"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Role:    pulumi.String("roles/editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cluster IAM resources can be imported using the project, region, cluster name, role and/or member.
//
// ```sh
//
//	$ pulumi import gcp:dataproc/clusterIamMember:ClusterIamMember editor "projects/{project}/regions/{region}/clusters/{cluster}"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/clusterIamMember:ClusterIamMember editor "projects/{project}/regions/{region}/clusters/{cluster} roles/editor"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataproc/clusterIamMember:ClusterIamMember editor "projects/{project}/regions/{region}/clusters/{cluster} roles/editor user:jane@example.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ClusterIamMember struct {
	pulumi.CustomResourceState

	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   pulumi.StringOutput                `pulumi:"cluster"`
	Condition ClusterIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the clusters's IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewClusterIamMember registers a new resource with the given unique name, arguments, and options.
func NewClusterIamMember(ctx *pulumi.Context,
	name string, args *ClusterIamMemberArgs, opts ...pulumi.ResourceOption) (*ClusterIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterIamMember
	err := ctx.RegisterResource("gcp:dataproc/clusterIamMember:ClusterIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterIamMember gets an existing ClusterIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterIamMemberState, opts ...pulumi.ResourceOption) (*ClusterIamMember, error) {
	var resource ClusterIamMember
	err := ctx.ReadResource("gcp:dataproc/clusterIamMember:ClusterIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterIamMember resources.
type clusterIamMemberState struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   *string                    `pulumi:"cluster"`
	Condition *ClusterIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the clusters's IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role *string `pulumi:"role"`
}

type ClusterIamMemberState struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   pulumi.StringPtrInput
	Condition ClusterIamMemberConditionPtrInput
	// (Computed) The etag of the clusters's IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role pulumi.StringPtrInput
}

func (ClusterIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterIamMemberState)(nil)).Elem()
}

type clusterIamMemberArgs struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   string                     `pulumi:"cluster"`
	Condition *ClusterIamMemberCondition `pulumi:"condition"`
	Member    string                     `pulumi:"member"`
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project *string `pulumi:"project"`
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ClusterIamMember resource.
type ClusterIamMemberArgs struct {
	// The name or relative resource id of the cluster to manage IAM policies for.
	//
	// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Cluster   pulumi.StringInput
	Condition ClusterIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The project in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Project pulumi.StringPtrInput
	// The region in which the cluster belongs. If it
	// is not provided, the provider will use a default.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	//
	// `dataproc.ClusterIamPolicy` only:
	Role pulumi.StringInput
}

func (ClusterIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterIamMemberArgs)(nil)).Elem()
}

type ClusterIamMemberInput interface {
	pulumi.Input

	ToClusterIamMemberOutput() ClusterIamMemberOutput
	ToClusterIamMemberOutputWithContext(ctx context.Context) ClusterIamMemberOutput
}

func (*ClusterIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIamMember)(nil)).Elem()
}

func (i *ClusterIamMember) ToClusterIamMemberOutput() ClusterIamMemberOutput {
	return i.ToClusterIamMemberOutputWithContext(context.Background())
}

func (i *ClusterIamMember) ToClusterIamMemberOutputWithContext(ctx context.Context) ClusterIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamMemberOutput)
}

// ClusterIamMemberArrayInput is an input type that accepts ClusterIamMemberArray and ClusterIamMemberArrayOutput values.
// You can construct a concrete instance of `ClusterIamMemberArrayInput` via:
//
//	ClusterIamMemberArray{ ClusterIamMemberArgs{...} }
type ClusterIamMemberArrayInput interface {
	pulumi.Input

	ToClusterIamMemberArrayOutput() ClusterIamMemberArrayOutput
	ToClusterIamMemberArrayOutputWithContext(context.Context) ClusterIamMemberArrayOutput
}

type ClusterIamMemberArray []ClusterIamMemberInput

func (ClusterIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterIamMember)(nil)).Elem()
}

func (i ClusterIamMemberArray) ToClusterIamMemberArrayOutput() ClusterIamMemberArrayOutput {
	return i.ToClusterIamMemberArrayOutputWithContext(context.Background())
}

func (i ClusterIamMemberArray) ToClusterIamMemberArrayOutputWithContext(ctx context.Context) ClusterIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamMemberArrayOutput)
}

// ClusterIamMemberMapInput is an input type that accepts ClusterIamMemberMap and ClusterIamMemberMapOutput values.
// You can construct a concrete instance of `ClusterIamMemberMapInput` via:
//
//	ClusterIamMemberMap{ "key": ClusterIamMemberArgs{...} }
type ClusterIamMemberMapInput interface {
	pulumi.Input

	ToClusterIamMemberMapOutput() ClusterIamMemberMapOutput
	ToClusterIamMemberMapOutputWithContext(context.Context) ClusterIamMemberMapOutput
}

type ClusterIamMemberMap map[string]ClusterIamMemberInput

func (ClusterIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterIamMember)(nil)).Elem()
}

func (i ClusterIamMemberMap) ToClusterIamMemberMapOutput() ClusterIamMemberMapOutput {
	return i.ToClusterIamMemberMapOutputWithContext(context.Background())
}

func (i ClusterIamMemberMap) ToClusterIamMemberMapOutputWithContext(ctx context.Context) ClusterIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamMemberMapOutput)
}

type ClusterIamMemberOutput struct{ *pulumi.OutputState }

func (ClusterIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIamMember)(nil)).Elem()
}

func (o ClusterIamMemberOutput) ToClusterIamMemberOutput() ClusterIamMemberOutput {
	return o
}

func (o ClusterIamMemberOutput) ToClusterIamMemberOutputWithContext(ctx context.Context) ClusterIamMemberOutput {
	return o
}

// The name or relative resource id of the cluster to manage IAM policies for.
//
// For `dataproc.ClusterIamMember` or `dataproc.ClusterIamBinding`:
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o ClusterIamMemberOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamMember) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

func (o ClusterIamMemberOutput) Condition() ClusterIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ClusterIamMember) ClusterIamMemberConditionPtrOutput { return v.Condition }).(ClusterIamMemberConditionPtrOutput)
}

// (Computed) The etag of the clusters's IAM policy.
func (o ClusterIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ClusterIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The project in which the cluster belongs. If it
// is not provided, the provider will use a default.
func (o ClusterIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region in which the cluster belongs. If it
// is not provided, the provider will use a default.
func (o ClusterIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataproc.ClusterIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
//
// `dataproc.ClusterIamPolicy` only:
func (o ClusterIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ClusterIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ClusterIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterIamMember)(nil)).Elem()
}

func (o ClusterIamMemberArrayOutput) ToClusterIamMemberArrayOutput() ClusterIamMemberArrayOutput {
	return o
}

func (o ClusterIamMemberArrayOutput) ToClusterIamMemberArrayOutputWithContext(ctx context.Context) ClusterIamMemberArrayOutput {
	return o
}

func (o ClusterIamMemberArrayOutput) Index(i pulumi.IntInput) ClusterIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterIamMember {
		return vs[0].([]*ClusterIamMember)[vs[1].(int)]
	}).(ClusterIamMemberOutput)
}

type ClusterIamMemberMapOutput struct{ *pulumi.OutputState }

func (ClusterIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterIamMember)(nil)).Elem()
}

func (o ClusterIamMemberMapOutput) ToClusterIamMemberMapOutput() ClusterIamMemberMapOutput {
	return o
}

func (o ClusterIamMemberMapOutput) ToClusterIamMemberMapOutputWithContext(ctx context.Context) ClusterIamMemberMapOutput {
	return o
}

func (o ClusterIamMemberMapOutput) MapIndex(k pulumi.StringInput) ClusterIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterIamMember {
		return vs[0].(map[string]*ClusterIamMember)[vs[1].(string)]
	}).(ClusterIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamMemberInput)(nil)).Elem(), &ClusterIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamMemberArrayInput)(nil)).Elem(), ClusterIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamMemberMapInput)(nil)).Elem(), ClusterIamMemberMap{})
	pulumi.RegisterOutputType(ClusterIamMemberOutput{})
	pulumi.RegisterOutputType(ClusterIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ClusterIamMemberMapOutput{})
}
