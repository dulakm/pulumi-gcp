// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for KMS key ring. Each of these resources serves a different use case:
//
// * `kms.KeyRingIamPolicy`: Authoritative. Sets the IAM policy for the key ring and replaces any existing policy already attached.
// * `kms.KeyRingIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the key ring are preserved.
// * `kms.KeyRingIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the key ring are preserved.
//
// > **Note:** `kms.KeyRingIamPolicy` **cannot** be used in conjunction with `kms.KeyRingIamBinding` and `kms.KeyRingIamMember` or they will fight over what your policy should be.
//
// > **Note:** `kms.KeyRingIamBinding` resources **can be** used in conjunction with `kms.KeyRingIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_kms\_key\_ring\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKeyRingIamPolicy(ctx, "keyRing", &kms.KeyRingIamPolicyArgs{
//				KeyRingId:  keyring.ID(),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKeyRingIamPolicy(ctx, "keyRing", &kms.KeyRingIamPolicyArgs{
//				KeyRingId:  keyring.ID(),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_kms\_key\_ring\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamBinding(ctx, "keyRing", &kms.KeyRingIamBindingArgs{
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamBinding(ctx, "keyRing", &kms.KeyRingIamBindingArgs{
//				Condition: &kms.KeyRingIamBindingConditionArgs{
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//					Title:       pulumi.String("expires_after_2019_12_31"),
//				},
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_kms\_key\_ring\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamMember(ctx, "keyRing", &kms.KeyRingIamMemberArgs{
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Member:    pulumi.String("user:jane@example.com"),
//				Role:      pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamMember(ctx, "keyRing", &kms.KeyRingIamMemberArgs{
//				Condition: &kms.KeyRingIamMemberConditionArgs{
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//					Title:       pulumi.String("expires_after_2019_12_31"),
//				},
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Member:    pulumi.String("user:jane@example.com"),
//				Role:      pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
//
// This member resource can be imported using the `key_ring_id`, role, and account e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/keyRingIamBinding:KeyRingIamBinding key_ring_iam "your-project-id/location-name/key-ring-name roles/viewer user:foo@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiers; the resource in question and the role.
//
// This binding resource can be imported using the `key_ring_id` and role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/keyRingIamBinding:KeyRingIamBinding key_ring_iam "your-project-id/location-name/key-ring-name roles/cloudkms.admin"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question.
//
// This policy resource can be imported using the `key_ring_id`, e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/keyRingIamBinding:KeyRingIamBinding key_ring_iam your-project-id/location-name/key-ring-name
//
// ```
type KeyRingIamBinding struct {
	pulumi.CustomResourceState

	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition KeyRingIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the key ring's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId pulumi.StringOutput      `pulumi:"keyRingId"`
	Members   pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewKeyRingIamBinding registers a new resource with the given unique name, arguments, and options.
func NewKeyRingIamBinding(ctx *pulumi.Context,
	name string, args *KeyRingIamBindingArgs, opts ...pulumi.ResourceOption) (*KeyRingIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyRingId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyRingIamBinding
	err := ctx.RegisterResource("gcp:kms/keyRingIamBinding:KeyRingIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRingIamBinding gets an existing KeyRingIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRingIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRingIamBindingState, opts ...pulumi.ResourceOption) (*KeyRingIamBinding, error) {
	var resource KeyRingIamBinding
	err := ctx.ReadResource("gcp:kms/keyRingIamBinding:KeyRingIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRingIamBinding resources.
type keyRingIamBindingState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *KeyRingIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the key ring's IAM policy.
	Etag *string `pulumi:"etag"`
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId *string  `pulumi:"keyRingId"`
	Members   []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type KeyRingIamBindingState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition KeyRingIamBindingConditionPtrInput
	// (Computed) The etag of the key ring's IAM policy.
	Etag pulumi.StringPtrInput
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (KeyRingIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingIamBindingState)(nil)).Elem()
}

type keyRingIamBindingArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *KeyRingIamBindingCondition `pulumi:"condition"`
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId string   `pulumi:"keyRingId"`
	Members   []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a KeyRingIamBinding resource.
type KeyRingIamBindingArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition KeyRingIamBindingConditionPtrInput
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId pulumi.StringInput
	Members   pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (KeyRingIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingIamBindingArgs)(nil)).Elem()
}

type KeyRingIamBindingInput interface {
	pulumi.Input

	ToKeyRingIamBindingOutput() KeyRingIamBindingOutput
	ToKeyRingIamBindingOutputWithContext(ctx context.Context) KeyRingIamBindingOutput
}

func (*KeyRingIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamBinding)(nil)).Elem()
}

func (i *KeyRingIamBinding) ToKeyRingIamBindingOutput() KeyRingIamBindingOutput {
	return i.ToKeyRingIamBindingOutputWithContext(context.Background())
}

func (i *KeyRingIamBinding) ToKeyRingIamBindingOutputWithContext(ctx context.Context) KeyRingIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamBindingOutput)
}

// KeyRingIamBindingArrayInput is an input type that accepts KeyRingIamBindingArray and KeyRingIamBindingArrayOutput values.
// You can construct a concrete instance of `KeyRingIamBindingArrayInput` via:
//
//	KeyRingIamBindingArray{ KeyRingIamBindingArgs{...} }
type KeyRingIamBindingArrayInput interface {
	pulumi.Input

	ToKeyRingIamBindingArrayOutput() KeyRingIamBindingArrayOutput
	ToKeyRingIamBindingArrayOutputWithContext(context.Context) KeyRingIamBindingArrayOutput
}

type KeyRingIamBindingArray []KeyRingIamBindingInput

func (KeyRingIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRingIamBinding)(nil)).Elem()
}

func (i KeyRingIamBindingArray) ToKeyRingIamBindingArrayOutput() KeyRingIamBindingArrayOutput {
	return i.ToKeyRingIamBindingArrayOutputWithContext(context.Background())
}

func (i KeyRingIamBindingArray) ToKeyRingIamBindingArrayOutputWithContext(ctx context.Context) KeyRingIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamBindingArrayOutput)
}

// KeyRingIamBindingMapInput is an input type that accepts KeyRingIamBindingMap and KeyRingIamBindingMapOutput values.
// You can construct a concrete instance of `KeyRingIamBindingMapInput` via:
//
//	KeyRingIamBindingMap{ "key": KeyRingIamBindingArgs{...} }
type KeyRingIamBindingMapInput interface {
	pulumi.Input

	ToKeyRingIamBindingMapOutput() KeyRingIamBindingMapOutput
	ToKeyRingIamBindingMapOutputWithContext(context.Context) KeyRingIamBindingMapOutput
}

type KeyRingIamBindingMap map[string]KeyRingIamBindingInput

func (KeyRingIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRingIamBinding)(nil)).Elem()
}

func (i KeyRingIamBindingMap) ToKeyRingIamBindingMapOutput() KeyRingIamBindingMapOutput {
	return i.ToKeyRingIamBindingMapOutputWithContext(context.Background())
}

func (i KeyRingIamBindingMap) ToKeyRingIamBindingMapOutputWithContext(ctx context.Context) KeyRingIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamBindingMapOutput)
}

type KeyRingIamBindingOutput struct{ *pulumi.OutputState }

func (KeyRingIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamBinding)(nil)).Elem()
}

func (o KeyRingIamBindingOutput) ToKeyRingIamBindingOutput() KeyRingIamBindingOutput {
	return o
}

func (o KeyRingIamBindingOutput) ToKeyRingIamBindingOutputWithContext(ctx context.Context) KeyRingIamBindingOutput {
	return o
}

// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o KeyRingIamBindingOutput) Condition() KeyRingIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *KeyRingIamBinding) KeyRingIamBindingConditionPtrOutput { return v.Condition }).(KeyRingIamBindingConditionPtrOutput)
}

// (Computed) The etag of the key ring's IAM policy.
func (o KeyRingIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The key ring ID, in the form
// `{project_id}/{location_name}/{key_ring_name}` or
// `{location_name}/{key_ring_name}`. In the second form, the provider's
// project setting will be used as a fallback.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o KeyRingIamBindingOutput) KeyRingId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamBinding) pulumi.StringOutput { return v.KeyRingId }).(pulumi.StringOutput)
}

func (o KeyRingIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KeyRingIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. Only one
// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o KeyRingIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type KeyRingIamBindingArrayOutput struct{ *pulumi.OutputState }

func (KeyRingIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRingIamBinding)(nil)).Elem()
}

func (o KeyRingIamBindingArrayOutput) ToKeyRingIamBindingArrayOutput() KeyRingIamBindingArrayOutput {
	return o
}

func (o KeyRingIamBindingArrayOutput) ToKeyRingIamBindingArrayOutputWithContext(ctx context.Context) KeyRingIamBindingArrayOutput {
	return o
}

func (o KeyRingIamBindingArrayOutput) Index(i pulumi.IntInput) KeyRingIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyRingIamBinding {
		return vs[0].([]*KeyRingIamBinding)[vs[1].(int)]
	}).(KeyRingIamBindingOutput)
}

type KeyRingIamBindingMapOutput struct{ *pulumi.OutputState }

func (KeyRingIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRingIamBinding)(nil)).Elem()
}

func (o KeyRingIamBindingMapOutput) ToKeyRingIamBindingMapOutput() KeyRingIamBindingMapOutput {
	return o
}

func (o KeyRingIamBindingMapOutput) ToKeyRingIamBindingMapOutputWithContext(ctx context.Context) KeyRingIamBindingMapOutput {
	return o
}

func (o KeyRingIamBindingMapOutput) MapIndex(k pulumi.StringInput) KeyRingIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyRingIamBinding {
		return vs[0].(map[string]*KeyRingIamBinding)[vs[1].(string)]
	}).(KeyRingIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamBindingInput)(nil)).Elem(), &KeyRingIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamBindingArrayInput)(nil)).Elem(), KeyRingIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamBindingMapInput)(nil)).Elem(), KeyRingIamBindingMap{})
	pulumi.RegisterOutputType(KeyRingIamBindingOutput{})
	pulumi.RegisterOutputType(KeyRingIamBindingArrayOutput{})
	pulumi.RegisterOutputType(KeyRingIamBindingMapOutput{})
}
