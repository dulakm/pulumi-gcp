// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for KMS key ring. Each of these resources serves a different use case:
//
// * `kms.KeyRingIamPolicy`: Authoritative. Sets the IAM policy for the key ring and replaces any existing policy already attached.
// * `kms.KeyRingIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the key ring are preserved.
// * `kms.KeyRingIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the key ring are preserved.
//
// > **Note:** `kms.KeyRingIamPolicy` **cannot** be used in conjunction with `kms.KeyRingIamBinding` and `kms.KeyRingIamMember` or they will fight over what your policy should be.
//
// > **Note:** `kms.KeyRingIamBinding` resources **can be** used in conjunction with `kms.KeyRingIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_kms\_key\_ring\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKeyRingIamPolicy(ctx, "keyRing", &kms.KeyRingIamPolicyArgs{
//				KeyRingId:  keyring.ID(),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKeyRingIamPolicy(ctx, "keyRing", &kms.KeyRingIamPolicyArgs{
//				KeyRingId:  keyring.ID(),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_kms\_key\_ring\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamBinding(ctx, "keyRing", &kms.KeyRingIamBindingArgs{
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamBinding(ctx, "keyRing", &kms.KeyRingIamBindingArgs{
//				Condition: &kms.KeyRingIamBindingConditionArgs{
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//					Title:       pulumi.String("expires_after_2019_12_31"),
//				},
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_kms\_key\_ring\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamMember(ctx, "keyRing", &kms.KeyRingIamMemberArgs{
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Member:    pulumi.String("user:jane@example.com"),
//				Role:      pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyRingIamMember(ctx, "keyRing", &kms.KeyRingIamMemberArgs{
//				Condition: &kms.KeyRingIamMemberConditionArgs{
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//					Title:       pulumi.String("expires_after_2019_12_31"),
//				},
//				KeyRingId: pulumi.String("your-key-ring-id"),
//				Member:    pulumi.String("user:jane@example.com"),
//				Role:      pulumi.String("roles/cloudkms.admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
//
// This member resource can be imported using the `key_ring_id`, role, and account e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/keyRingIamMember:KeyRingIamMember key_ring_iam "your-project-id/location-name/key-ring-name roles/viewer user:foo@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiers; the resource in question and the role.
//
// This binding resource can be imported using the `key_ring_id` and role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/keyRingIamMember:KeyRingIamMember key_ring_iam "your-project-id/location-name/key-ring-name roles/cloudkms.admin"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question.
//
// This policy resource can be imported using the `key_ring_id`, e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/keyRingIamMember:KeyRingIamMember key_ring_iam your-project-id/location-name/key-ring-name
//
// ```
type KeyRingIamMember struct {
	pulumi.CustomResourceState

	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition KeyRingIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the key ring's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId pulumi.StringOutput `pulumi:"keyRingId"`
	Member    pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewKeyRingIamMember registers a new resource with the given unique name, arguments, and options.
func NewKeyRingIamMember(ctx *pulumi.Context,
	name string, args *KeyRingIamMemberArgs, opts ...pulumi.ResourceOption) (*KeyRingIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyRingId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyRingIamMember
	err := ctx.RegisterResource("gcp:kms/keyRingIamMember:KeyRingIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRingIamMember gets an existing KeyRingIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRingIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRingIamMemberState, opts ...pulumi.ResourceOption) (*KeyRingIamMember, error) {
	var resource KeyRingIamMember
	err := ctx.ReadResource("gcp:kms/keyRingIamMember:KeyRingIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRingIamMember resources.
type keyRingIamMemberState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *KeyRingIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the key ring's IAM policy.
	Etag *string `pulumi:"etag"`
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId *string `pulumi:"keyRingId"`
	Member    *string `pulumi:"member"`
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type KeyRingIamMemberState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition KeyRingIamMemberConditionPtrInput
	// (Computed) The etag of the key ring's IAM policy.
	Etag pulumi.StringPtrInput
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (KeyRingIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingIamMemberState)(nil)).Elem()
}

type keyRingIamMemberArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *KeyRingIamMemberCondition `pulumi:"condition"`
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId string `pulumi:"keyRingId"`
	Member    string `pulumi:"member"`
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a KeyRingIamMember resource.
type KeyRingIamMemberArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition KeyRingIamMemberConditionPtrInput
	// The key ring ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}` or
	// `{location_name}/{key_ring_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	KeyRingId pulumi.StringInput
	Member    pulumi.StringInput
	// The role that should be applied. Only one
	// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (KeyRingIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingIamMemberArgs)(nil)).Elem()
}

type KeyRingIamMemberInput interface {
	pulumi.Input

	ToKeyRingIamMemberOutput() KeyRingIamMemberOutput
	ToKeyRingIamMemberOutputWithContext(ctx context.Context) KeyRingIamMemberOutput
}

func (*KeyRingIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamMember)(nil)).Elem()
}

func (i *KeyRingIamMember) ToKeyRingIamMemberOutput() KeyRingIamMemberOutput {
	return i.ToKeyRingIamMemberOutputWithContext(context.Background())
}

func (i *KeyRingIamMember) ToKeyRingIamMemberOutputWithContext(ctx context.Context) KeyRingIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamMemberOutput)
}

// KeyRingIamMemberArrayInput is an input type that accepts KeyRingIamMemberArray and KeyRingIamMemberArrayOutput values.
// You can construct a concrete instance of `KeyRingIamMemberArrayInput` via:
//
//	KeyRingIamMemberArray{ KeyRingIamMemberArgs{...} }
type KeyRingIamMemberArrayInput interface {
	pulumi.Input

	ToKeyRingIamMemberArrayOutput() KeyRingIamMemberArrayOutput
	ToKeyRingIamMemberArrayOutputWithContext(context.Context) KeyRingIamMemberArrayOutput
}

type KeyRingIamMemberArray []KeyRingIamMemberInput

func (KeyRingIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRingIamMember)(nil)).Elem()
}

func (i KeyRingIamMemberArray) ToKeyRingIamMemberArrayOutput() KeyRingIamMemberArrayOutput {
	return i.ToKeyRingIamMemberArrayOutputWithContext(context.Background())
}

func (i KeyRingIamMemberArray) ToKeyRingIamMemberArrayOutputWithContext(ctx context.Context) KeyRingIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamMemberArrayOutput)
}

// KeyRingIamMemberMapInput is an input type that accepts KeyRingIamMemberMap and KeyRingIamMemberMapOutput values.
// You can construct a concrete instance of `KeyRingIamMemberMapInput` via:
//
//	KeyRingIamMemberMap{ "key": KeyRingIamMemberArgs{...} }
type KeyRingIamMemberMapInput interface {
	pulumi.Input

	ToKeyRingIamMemberMapOutput() KeyRingIamMemberMapOutput
	ToKeyRingIamMemberMapOutputWithContext(context.Context) KeyRingIamMemberMapOutput
}

type KeyRingIamMemberMap map[string]KeyRingIamMemberInput

func (KeyRingIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRingIamMember)(nil)).Elem()
}

func (i KeyRingIamMemberMap) ToKeyRingIamMemberMapOutput() KeyRingIamMemberMapOutput {
	return i.ToKeyRingIamMemberMapOutputWithContext(context.Background())
}

func (i KeyRingIamMemberMap) ToKeyRingIamMemberMapOutputWithContext(ctx context.Context) KeyRingIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamMemberMapOutput)
}

type KeyRingIamMemberOutput struct{ *pulumi.OutputState }

func (KeyRingIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamMember)(nil)).Elem()
}

func (o KeyRingIamMemberOutput) ToKeyRingIamMemberOutput() KeyRingIamMemberOutput {
	return o
}

func (o KeyRingIamMemberOutput) ToKeyRingIamMemberOutputWithContext(ctx context.Context) KeyRingIamMemberOutput {
	return o
}

// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o KeyRingIamMemberOutput) Condition() KeyRingIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *KeyRingIamMember) KeyRingIamMemberConditionPtrOutput { return v.Condition }).(KeyRingIamMemberConditionPtrOutput)
}

// (Computed) The etag of the key ring's IAM policy.
func (o KeyRingIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The key ring ID, in the form
// `{project_id}/{location_name}/{key_ring_name}` or
// `{location_name}/{key_ring_name}`. In the second form, the provider's
// project setting will be used as a fallback.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o KeyRingIamMemberOutput) KeyRingId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamMember) pulumi.StringOutput { return v.KeyRingId }).(pulumi.StringOutput)
}

func (o KeyRingIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `kms.KeyRingIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o KeyRingIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRingIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type KeyRingIamMemberArrayOutput struct{ *pulumi.OutputState }

func (KeyRingIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRingIamMember)(nil)).Elem()
}

func (o KeyRingIamMemberArrayOutput) ToKeyRingIamMemberArrayOutput() KeyRingIamMemberArrayOutput {
	return o
}

func (o KeyRingIamMemberArrayOutput) ToKeyRingIamMemberArrayOutputWithContext(ctx context.Context) KeyRingIamMemberArrayOutput {
	return o
}

func (o KeyRingIamMemberArrayOutput) Index(i pulumi.IntInput) KeyRingIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyRingIamMember {
		return vs[0].([]*KeyRingIamMember)[vs[1].(int)]
	}).(KeyRingIamMemberOutput)
}

type KeyRingIamMemberMapOutput struct{ *pulumi.OutputState }

func (KeyRingIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRingIamMember)(nil)).Elem()
}

func (o KeyRingIamMemberMapOutput) ToKeyRingIamMemberMapOutput() KeyRingIamMemberMapOutput {
	return o
}

func (o KeyRingIamMemberMapOutput) ToKeyRingIamMemberMapOutputWithContext(ctx context.Context) KeyRingIamMemberMapOutput {
	return o
}

func (o KeyRingIamMemberMapOutput) MapIndex(k pulumi.StringInput) KeyRingIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyRingIamMember {
		return vs[0].(map[string]*KeyRingIamMember)[vs[1].(string)]
	}).(KeyRingIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamMemberInput)(nil)).Elem(), &KeyRingIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamMemberArrayInput)(nil)).Elem(), KeyRingIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamMemberMapInput)(nil)).Elem(), KeyRingIamMemberMap{})
	pulumi.RegisterOutputType(KeyRingIamMemberOutput{})
	pulumi.RegisterOutputType(KeyRingIamMemberArrayOutput{})
	pulumi.RegisterOutputType(KeyRingIamMemberMapOutput{})
}
