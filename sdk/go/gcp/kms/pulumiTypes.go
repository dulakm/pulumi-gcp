// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CryptoKeyIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// CryptoKeyIamBindingConditionInput is an input type that accepts CryptoKeyIamBindingConditionArgs and CryptoKeyIamBindingConditionOutput values.
// You can construct a concrete instance of `CryptoKeyIamBindingConditionInput` via:
//
//	CryptoKeyIamBindingConditionArgs{...}
type CryptoKeyIamBindingConditionInput interface {
	pulumi.Input

	ToCryptoKeyIamBindingConditionOutput() CryptoKeyIamBindingConditionOutput
	ToCryptoKeyIamBindingConditionOutputWithContext(context.Context) CryptoKeyIamBindingConditionOutput
}

type CryptoKeyIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIamBindingCondition)(nil)).Elem()
}

func (i CryptoKeyIamBindingConditionArgs) ToCryptoKeyIamBindingConditionOutput() CryptoKeyIamBindingConditionOutput {
	return i.ToCryptoKeyIamBindingConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIamBindingConditionArgs) ToCryptoKeyIamBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamBindingConditionOutput)
}

func (i CryptoKeyIamBindingConditionArgs) ToCryptoKeyIamBindingConditionPtrOutput() CryptoKeyIamBindingConditionPtrOutput {
	return i.ToCryptoKeyIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIamBindingConditionArgs) ToCryptoKeyIamBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamBindingConditionOutput).ToCryptoKeyIamBindingConditionPtrOutputWithContext(ctx)
}

// CryptoKeyIamBindingConditionPtrInput is an input type that accepts CryptoKeyIamBindingConditionArgs, CryptoKeyIamBindingConditionPtr and CryptoKeyIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyIamBindingConditionPtrInput` via:
//
//	        CryptoKeyIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyIamBindingConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIamBindingConditionPtrOutput() CryptoKeyIamBindingConditionPtrOutput
	ToCryptoKeyIamBindingConditionPtrOutputWithContext(context.Context) CryptoKeyIamBindingConditionPtrOutput
}

type cryptoKeyIamBindingConditionPtrType CryptoKeyIamBindingConditionArgs

func CryptoKeyIamBindingConditionPtr(v *CryptoKeyIamBindingConditionArgs) CryptoKeyIamBindingConditionPtrInput {
	return (*cryptoKeyIamBindingConditionPtrType)(v)
}

func (*cryptoKeyIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIamBindingCondition)(nil)).Elem()
}

func (i *cryptoKeyIamBindingConditionPtrType) ToCryptoKeyIamBindingConditionPtrOutput() CryptoKeyIamBindingConditionPtrOutput {
	return i.ToCryptoKeyIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIamBindingConditionPtrType) ToCryptoKeyIamBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamBindingConditionPtrOutput)
}

type CryptoKeyIamBindingConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIamBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIamBindingConditionOutput) ToCryptoKeyIamBindingConditionOutput() CryptoKeyIamBindingConditionOutput {
	return o
}

func (o CryptoKeyIamBindingConditionOutput) ToCryptoKeyIamBindingConditionOutputWithContext(ctx context.Context) CryptoKeyIamBindingConditionOutput {
	return o
}

func (o CryptoKeyIamBindingConditionOutput) ToCryptoKeyIamBindingConditionPtrOutput() CryptoKeyIamBindingConditionPtrOutput {
	return o.ToCryptoKeyIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIamBindingConditionOutput) ToCryptoKeyIamBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyIamBindingCondition) *CryptoKeyIamBindingCondition {
		return &v
	}).(CryptoKeyIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIamBindingCondition)(nil)).Elem()
}

func (o CryptoKeyIamBindingConditionPtrOutput) ToCryptoKeyIamBindingConditionPtrOutput() CryptoKeyIamBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIamBindingConditionPtrOutput) ToCryptoKeyIamBindingConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamBindingConditionPtrOutput {
	return o
}

func (o CryptoKeyIamBindingConditionPtrOutput) Elem() CryptoKeyIamBindingConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIamBindingCondition) CryptoKeyIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret CryptoKeyIamBindingCondition
		return ret
	}).(CryptoKeyIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// CryptoKeyIamMemberConditionInput is an input type that accepts CryptoKeyIamMemberConditionArgs and CryptoKeyIamMemberConditionOutput values.
// You can construct a concrete instance of `CryptoKeyIamMemberConditionInput` via:
//
//	CryptoKeyIamMemberConditionArgs{...}
type CryptoKeyIamMemberConditionInput interface {
	pulumi.Input

	ToCryptoKeyIamMemberConditionOutput() CryptoKeyIamMemberConditionOutput
	ToCryptoKeyIamMemberConditionOutputWithContext(context.Context) CryptoKeyIamMemberConditionOutput
}

type CryptoKeyIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CryptoKeyIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIamMemberCondition)(nil)).Elem()
}

func (i CryptoKeyIamMemberConditionArgs) ToCryptoKeyIamMemberConditionOutput() CryptoKeyIamMemberConditionOutput {
	return i.ToCryptoKeyIamMemberConditionOutputWithContext(context.Background())
}

func (i CryptoKeyIamMemberConditionArgs) ToCryptoKeyIamMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamMemberConditionOutput)
}

func (i CryptoKeyIamMemberConditionArgs) ToCryptoKeyIamMemberConditionPtrOutput() CryptoKeyIamMemberConditionPtrOutput {
	return i.ToCryptoKeyIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyIamMemberConditionArgs) ToCryptoKeyIamMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamMemberConditionOutput).ToCryptoKeyIamMemberConditionPtrOutputWithContext(ctx)
}

// CryptoKeyIamMemberConditionPtrInput is an input type that accepts CryptoKeyIamMemberConditionArgs, CryptoKeyIamMemberConditionPtr and CryptoKeyIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyIamMemberConditionPtrInput` via:
//
//	        CryptoKeyIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyIamMemberConditionPtrInput interface {
	pulumi.Input

	ToCryptoKeyIamMemberConditionPtrOutput() CryptoKeyIamMemberConditionPtrOutput
	ToCryptoKeyIamMemberConditionPtrOutputWithContext(context.Context) CryptoKeyIamMemberConditionPtrOutput
}

type cryptoKeyIamMemberConditionPtrType CryptoKeyIamMemberConditionArgs

func CryptoKeyIamMemberConditionPtr(v *CryptoKeyIamMemberConditionArgs) CryptoKeyIamMemberConditionPtrInput {
	return (*cryptoKeyIamMemberConditionPtrType)(v)
}

func (*cryptoKeyIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIamMemberCondition)(nil)).Elem()
}

func (i *cryptoKeyIamMemberConditionPtrType) ToCryptoKeyIamMemberConditionPtrOutput() CryptoKeyIamMemberConditionPtrOutput {
	return i.ToCryptoKeyIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyIamMemberConditionPtrType) ToCryptoKeyIamMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamMemberConditionPtrOutput)
}

type CryptoKeyIamMemberConditionOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyIamMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIamMemberConditionOutput) ToCryptoKeyIamMemberConditionOutput() CryptoKeyIamMemberConditionOutput {
	return o
}

func (o CryptoKeyIamMemberConditionOutput) ToCryptoKeyIamMemberConditionOutputWithContext(ctx context.Context) CryptoKeyIamMemberConditionOutput {
	return o
}

func (o CryptoKeyIamMemberConditionOutput) ToCryptoKeyIamMemberConditionPtrOutput() CryptoKeyIamMemberConditionPtrOutput {
	return o.ToCryptoKeyIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyIamMemberConditionOutput) ToCryptoKeyIamMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyIamMemberCondition) *CryptoKeyIamMemberCondition {
		return &v
	}).(CryptoKeyIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type CryptoKeyIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIamMemberCondition)(nil)).Elem()
}

func (o CryptoKeyIamMemberConditionPtrOutput) ToCryptoKeyIamMemberConditionPtrOutput() CryptoKeyIamMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIamMemberConditionPtrOutput) ToCryptoKeyIamMemberConditionPtrOutputWithContext(ctx context.Context) CryptoKeyIamMemberConditionPtrOutput {
	return o
}

func (o CryptoKeyIamMemberConditionPtrOutput) Elem() CryptoKeyIamMemberConditionOutput {
	return o.ApplyT(func(v *CryptoKeyIamMemberCondition) CryptoKeyIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret CryptoKeyIamMemberCondition
		return ret
	}).(CryptoKeyIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o CryptoKeyIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o CryptoKeyIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o CryptoKeyIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestation struct {
	// The certificate chains needed to validate the attestation
	// Structure is documented below.
	CertChains *CryptoKeyVersionAttestationCertChains `pulumi:"certChains"`
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	Content *string `pulumi:"content"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	// Structure is documented below.
	ExternalProtectionLevelOptions *CryptoKeyVersionAttestationExternalProtectionLevelOptions `pulumi:"externalProtectionLevelOptions"`
	// (Output)
	// The format of the attestation data.
	Format *string `pulumi:"format"`
}

// CryptoKeyVersionAttestationInput is an input type that accepts CryptoKeyVersionAttestationArgs and CryptoKeyVersionAttestationOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationInput` via:
//
//	CryptoKeyVersionAttestationArgs{...}
type CryptoKeyVersionAttestationInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationOutput() CryptoKeyVersionAttestationOutput
	ToCryptoKeyVersionAttestationOutputWithContext(context.Context) CryptoKeyVersionAttestationOutput
}

type CryptoKeyVersionAttestationArgs struct {
	// The certificate chains needed to validate the attestation
	// Structure is documented below.
	CertChains CryptoKeyVersionAttestationCertChainsPtrInput `pulumi:"certChains"`
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	// Structure is documented below.
	ExternalProtectionLevelOptions CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput `pulumi:"externalProtectionLevelOptions"`
	// (Output)
	// The format of the attestation data.
	Format pulumi.StringPtrInput `pulumi:"format"`
}

func (CryptoKeyVersionAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestation)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationArgs) ToCryptoKeyVersionAttestationOutput() CryptoKeyVersionAttestationOutput {
	return i.ToCryptoKeyVersionAttestationOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationArgs) ToCryptoKeyVersionAttestationOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationOutput)
}

// CryptoKeyVersionAttestationArrayInput is an input type that accepts CryptoKeyVersionAttestationArray and CryptoKeyVersionAttestationArrayOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationArrayInput` via:
//
//	CryptoKeyVersionAttestationArray{ CryptoKeyVersionAttestationArgs{...} }
type CryptoKeyVersionAttestationArrayInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationArrayOutput() CryptoKeyVersionAttestationArrayOutput
	ToCryptoKeyVersionAttestationArrayOutputWithContext(context.Context) CryptoKeyVersionAttestationArrayOutput
}

type CryptoKeyVersionAttestationArray []CryptoKeyVersionAttestationInput

func (CryptoKeyVersionAttestationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoKeyVersionAttestation)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationArray) ToCryptoKeyVersionAttestationArrayOutput() CryptoKeyVersionAttestationArrayOutput {
	return i.ToCryptoKeyVersionAttestationArrayOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationArray) ToCryptoKeyVersionAttestationArrayOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationArrayOutput)
}

type CryptoKeyVersionAttestationOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestation)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationOutput) ToCryptoKeyVersionAttestationOutput() CryptoKeyVersionAttestationOutput {
	return o
}

func (o CryptoKeyVersionAttestationOutput) ToCryptoKeyVersionAttestationOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationOutput {
	return o
}

// The certificate chains needed to validate the attestation
// Structure is documented below.
func (o CryptoKeyVersionAttestationOutput) CertChains() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *CryptoKeyVersionAttestationCertChains { return v.CertChains }).(CryptoKeyVersionAttestationCertChainsPtrOutput)
}

// (Output)
// The attestation data provided by the HSM when the key operation was performed.
func (o CryptoKeyVersionAttestationOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
// Structure is documented below.
func (o CryptoKeyVersionAttestationOutput) ExternalProtectionLevelOptions() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *CryptoKeyVersionAttestationExternalProtectionLevelOptions {
		return v.ExternalProtectionLevelOptions
	}).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput)
}

// (Output)
// The format of the attestation data.
func (o CryptoKeyVersionAttestationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestationArrayOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoKeyVersionAttestation)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationArrayOutput) ToCryptoKeyVersionAttestationArrayOutput() CryptoKeyVersionAttestationArrayOutput {
	return o
}

func (o CryptoKeyVersionAttestationArrayOutput) ToCryptoKeyVersionAttestationArrayOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationArrayOutput {
	return o
}

func (o CryptoKeyVersionAttestationArrayOutput) Index(i pulumi.IntInput) CryptoKeyVersionAttestationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CryptoKeyVersionAttestation {
		return vs[0].([]CryptoKeyVersionAttestation)[vs[1].(int)]
	}).(CryptoKeyVersionAttestationOutput)
}

type CryptoKeyVersionAttestationCertChains struct {
	// Cavium certificate chain corresponding to the attestation.
	CaviumCerts *string `pulumi:"caviumCerts"`
	// Google card certificate chain corresponding to the attestation.
	GoogleCardCerts *string `pulumi:"googleCardCerts"`
	// Google partition certificate chain corresponding to the attestation.
	GooglePartitionCerts *string `pulumi:"googlePartitionCerts"`
}

// CryptoKeyVersionAttestationCertChainsInput is an input type that accepts CryptoKeyVersionAttestationCertChainsArgs and CryptoKeyVersionAttestationCertChainsOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationCertChainsInput` via:
//
//	CryptoKeyVersionAttestationCertChainsArgs{...}
type CryptoKeyVersionAttestationCertChainsInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationCertChainsOutput() CryptoKeyVersionAttestationCertChainsOutput
	ToCryptoKeyVersionAttestationCertChainsOutputWithContext(context.Context) CryptoKeyVersionAttestationCertChainsOutput
}

type CryptoKeyVersionAttestationCertChainsArgs struct {
	// Cavium certificate chain corresponding to the attestation.
	CaviumCerts pulumi.StringPtrInput `pulumi:"caviumCerts"`
	// Google card certificate chain corresponding to the attestation.
	GoogleCardCerts pulumi.StringPtrInput `pulumi:"googleCardCerts"`
	// Google partition certificate chain corresponding to the attestation.
	GooglePartitionCerts pulumi.StringPtrInput `pulumi:"googlePartitionCerts"`
}

func (CryptoKeyVersionAttestationCertChainsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsOutput() CryptoKeyVersionAttestationCertChainsOutput {
	return i.ToCryptoKeyVersionAttestationCertChainsOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationCertChainsOutput)
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return i.ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationCertChainsArgs) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationCertChainsOutput).ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx)
}

// CryptoKeyVersionAttestationCertChainsPtrInput is an input type that accepts CryptoKeyVersionAttestationCertChainsArgs, CryptoKeyVersionAttestationCertChainsPtr and CryptoKeyVersionAttestationCertChainsPtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationCertChainsPtrInput` via:
//
//	        CryptoKeyVersionAttestationCertChainsArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionAttestationCertChainsPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput
	ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput
}

type cryptoKeyVersionAttestationCertChainsPtrType CryptoKeyVersionAttestationCertChainsArgs

func CryptoKeyVersionAttestationCertChainsPtr(v *CryptoKeyVersionAttestationCertChainsArgs) CryptoKeyVersionAttestationCertChainsPtrInput {
	return (*cryptoKeyVersionAttestationCertChainsPtrType)(v)
}

func (*cryptoKeyVersionAttestationCertChainsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (i *cryptoKeyVersionAttestationCertChainsPtrType) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return i.ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionAttestationCertChainsPtrType) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationCertChainsPtrOutput)
}

type CryptoKeyVersionAttestationCertChainsOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationCertChainsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsOutput() CryptoKeyVersionAttestationCertChainsOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o.ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionAttestationCertChainsOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionAttestationCertChains) *CryptoKeyVersionAttestationCertChains {
		return &v
	}).(CryptoKeyVersionAttestationCertChainsPtrOutput)
}

// Cavium certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsOutput) CaviumCerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationCertChains) *string { return v.CaviumCerts }).(pulumi.StringPtrOutput)
}

// Google card certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsOutput) GoogleCardCerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationCertChains) *string { return v.GoogleCardCerts }).(pulumi.StringPtrOutput)
}

// Google partition certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsOutput) GooglePartitionCerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationCertChains) *string { return v.GooglePartitionCerts }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestationCertChainsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationCertChainsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationCertChains)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationCertChainsPtrOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutput() CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsPtrOutput) ToCryptoKeyVersionAttestationCertChainsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationCertChainsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationCertChainsPtrOutput) Elem() CryptoKeyVersionAttestationCertChainsOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) CryptoKeyVersionAttestationCertChains {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionAttestationCertChains
		return ret
	}).(CryptoKeyVersionAttestationCertChainsOutput)
}

// Cavium certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsPtrOutput) CaviumCerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) *string {
		if v == nil {
			return nil
		}
		return v.CaviumCerts
	}).(pulumi.StringPtrOutput)
}

// Google card certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsPtrOutput) GoogleCardCerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) *string {
		if v == nil {
			return nil
		}
		return v.GoogleCardCerts
	}).(pulumi.StringPtrOutput)
}

// Google partition certificate chain corresponding to the attestation.
func (o CryptoKeyVersionAttestationCertChainsPtrOutput) GooglePartitionCerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationCertChains) *string {
		if v == nil {
			return nil
		}
		return v.GooglePartitionCerts
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptions struct {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	EkmConnectionKeyPath *string `pulumi:"ekmConnectionKeyPath"`
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri *string `pulumi:"externalKeyUri"`
}

// CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput is an input type that accepts CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs and CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput` via:
//
//	CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{...}
type CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput
	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs struct {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	EkmConnectionKeyPath pulumi.StringPtrInput `pulumi:"ekmConnectionKeyPath"`
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri pulumi.StringPtrInput `pulumi:"externalKeyUri"`
}

func (CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return i.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput)
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return i.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput).ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx)
}

// CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput is an input type that accepts CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs, CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtr and CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput` via:
//
//	        CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput
	ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput
}

type cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs

func CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtr(v *CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput {
	return (*cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType)(v)
}

func (*cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (i *cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return i.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrType) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput)
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o.ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionAttestationExternalProtectionLevelOptions) *CryptoKeyVersionAttestationExternalProtectionLevelOptions {
		return &v
	}).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput)
}

// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) EkmConnectionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string {
		return v.EkmConnectionKeyPath
	}).(pulumi.StringPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string { return v.ExternalKeyUri }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionAttestationExternalProtectionLevelOptions)(nil)).Elem()
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput() CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ToCryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) Elem() CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationExternalProtectionLevelOptions) CryptoKeyVersionAttestationExternalProtectionLevelOptions {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionAttestationExternalProtectionLevelOptions
		return ret
	}).(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput)
}

// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) EkmConnectionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.EkmConnectionKeyPath
	}).(pulumi.StringPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionAttestationExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.ExternalKeyUri
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplate struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm string `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

// CryptoKeyVersionTemplateInput is an input type that accepts CryptoKeyVersionTemplateArgs and CryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplateInput` via:
//
//	CryptoKeyVersionTemplateArgs{...}
type CryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput
	ToCryptoKeyVersionTemplateOutputWithContext(context.Context) CryptoKeyVersionTemplateOutput
}

type CryptoKeyVersionTemplateArgs struct {
	// The algorithm to use when creating a version based on this template.
	// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return i.ToCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput)
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput).ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx)
}

// CryptoKeyVersionTemplatePtrInput is an input type that accepts CryptoKeyVersionTemplateArgs, CryptoKeyVersionTemplatePtr and CryptoKeyVersionTemplatePtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplatePtrInput` via:
//
//	        CryptoKeyVersionTemplateArgs{...}
//
//	or:
//
//	        nil
type CryptoKeyVersionTemplatePtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput
	ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Context) CryptoKeyVersionTemplatePtrOutput
}

type cryptoKeyVersionTemplatePtrType CryptoKeyVersionTemplateArgs

func CryptoKeyVersionTemplatePtr(v *CryptoKeyVersionTemplateArgs) CryptoKeyVersionTemplatePtrInput {
	return (*cryptoKeyVersionTemplatePtrType)(v)
}

func (*cryptoKeyVersionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplatePtrOutput)
}

type CryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionTemplate) *CryptoKeyVersionTemplate {
		return &v
	}).(CryptoKeyVersionTemplatePtrOutput)
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o CryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
func (o CryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplatePtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) Elem() CryptoKeyVersionTemplateOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) CryptoKeyVersionTemplate {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionTemplate
		return ret
	}).(CryptoKeyVersionTemplateOutput)
}

// The algorithm to use when creating a version based on this template.
// See the [algorithm reference](https://cloud.google.com/kms/docs/reference/rest/v1/CryptoKeyVersionAlgorithm) for possible inputs.
func (o CryptoKeyVersionTemplatePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
func (o CryptoKeyVersionTemplatePtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

type KeyRingIamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// KeyRingIamBindingConditionInput is an input type that accepts KeyRingIamBindingConditionArgs and KeyRingIamBindingConditionOutput values.
// You can construct a concrete instance of `KeyRingIamBindingConditionInput` via:
//
//	KeyRingIamBindingConditionArgs{...}
type KeyRingIamBindingConditionInput interface {
	pulumi.Input

	ToKeyRingIamBindingConditionOutput() KeyRingIamBindingConditionOutput
	ToKeyRingIamBindingConditionOutputWithContext(context.Context) KeyRingIamBindingConditionOutput
}

type KeyRingIamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIamBindingCondition)(nil)).Elem()
}

func (i KeyRingIamBindingConditionArgs) ToKeyRingIamBindingConditionOutput() KeyRingIamBindingConditionOutput {
	return i.ToKeyRingIamBindingConditionOutputWithContext(context.Background())
}

func (i KeyRingIamBindingConditionArgs) ToKeyRingIamBindingConditionOutputWithContext(ctx context.Context) KeyRingIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamBindingConditionOutput)
}

func (i KeyRingIamBindingConditionArgs) ToKeyRingIamBindingConditionPtrOutput() KeyRingIamBindingConditionPtrOutput {
	return i.ToKeyRingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIamBindingConditionArgs) ToKeyRingIamBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamBindingConditionOutput).ToKeyRingIamBindingConditionPtrOutputWithContext(ctx)
}

// KeyRingIamBindingConditionPtrInput is an input type that accepts KeyRingIamBindingConditionArgs, KeyRingIamBindingConditionPtr and KeyRingIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `KeyRingIamBindingConditionPtrInput` via:
//
//	        KeyRingIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type KeyRingIamBindingConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIamBindingConditionPtrOutput() KeyRingIamBindingConditionPtrOutput
	ToKeyRingIamBindingConditionPtrOutputWithContext(context.Context) KeyRingIamBindingConditionPtrOutput
}

type keyRingIamBindingConditionPtrType KeyRingIamBindingConditionArgs

func KeyRingIamBindingConditionPtr(v *KeyRingIamBindingConditionArgs) KeyRingIamBindingConditionPtrInput {
	return (*keyRingIamBindingConditionPtrType)(v)
}

func (*keyRingIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamBindingCondition)(nil)).Elem()
}

func (i *keyRingIamBindingConditionPtrType) ToKeyRingIamBindingConditionPtrOutput() KeyRingIamBindingConditionPtrOutput {
	return i.ToKeyRingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIamBindingConditionPtrType) ToKeyRingIamBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamBindingConditionPtrOutput)
}

type KeyRingIamBindingConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIamBindingCondition)(nil)).Elem()
}

func (o KeyRingIamBindingConditionOutput) ToKeyRingIamBindingConditionOutput() KeyRingIamBindingConditionOutput {
	return o
}

func (o KeyRingIamBindingConditionOutput) ToKeyRingIamBindingConditionOutputWithContext(ctx context.Context) KeyRingIamBindingConditionOutput {
	return o
}

func (o KeyRingIamBindingConditionOutput) ToKeyRingIamBindingConditionPtrOutput() KeyRingIamBindingConditionPtrOutput {
	return o.ToKeyRingIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIamBindingConditionOutput) ToKeyRingIamBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyRingIamBindingCondition) *KeyRingIamBindingCondition {
		return &v
	}).(KeyRingIamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamBindingCondition)(nil)).Elem()
}

func (o KeyRingIamBindingConditionPtrOutput) ToKeyRingIamBindingConditionPtrOutput() KeyRingIamBindingConditionPtrOutput {
	return o
}

func (o KeyRingIamBindingConditionPtrOutput) ToKeyRingIamBindingConditionPtrOutputWithContext(ctx context.Context) KeyRingIamBindingConditionPtrOutput {
	return o
}

func (o KeyRingIamBindingConditionPtrOutput) Elem() KeyRingIamBindingConditionOutput {
	return o.ApplyT(func(v *KeyRingIamBindingCondition) KeyRingIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret KeyRingIamBindingCondition
		return ret
	}).(KeyRingIamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type KeyRingIamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// KeyRingIamMemberConditionInput is an input type that accepts KeyRingIamMemberConditionArgs and KeyRingIamMemberConditionOutput values.
// You can construct a concrete instance of `KeyRingIamMemberConditionInput` via:
//
//	KeyRingIamMemberConditionArgs{...}
type KeyRingIamMemberConditionInput interface {
	pulumi.Input

	ToKeyRingIamMemberConditionOutput() KeyRingIamMemberConditionOutput
	ToKeyRingIamMemberConditionOutputWithContext(context.Context) KeyRingIamMemberConditionOutput
}

type KeyRingIamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (KeyRingIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIamMemberCondition)(nil)).Elem()
}

func (i KeyRingIamMemberConditionArgs) ToKeyRingIamMemberConditionOutput() KeyRingIamMemberConditionOutput {
	return i.ToKeyRingIamMemberConditionOutputWithContext(context.Background())
}

func (i KeyRingIamMemberConditionArgs) ToKeyRingIamMemberConditionOutputWithContext(ctx context.Context) KeyRingIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamMemberConditionOutput)
}

func (i KeyRingIamMemberConditionArgs) ToKeyRingIamMemberConditionPtrOutput() KeyRingIamMemberConditionPtrOutput {
	return i.ToKeyRingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i KeyRingIamMemberConditionArgs) ToKeyRingIamMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamMemberConditionOutput).ToKeyRingIamMemberConditionPtrOutputWithContext(ctx)
}

// KeyRingIamMemberConditionPtrInput is an input type that accepts KeyRingIamMemberConditionArgs, KeyRingIamMemberConditionPtr and KeyRingIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `KeyRingIamMemberConditionPtrInput` via:
//
//	        KeyRingIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type KeyRingIamMemberConditionPtrInput interface {
	pulumi.Input

	ToKeyRingIamMemberConditionPtrOutput() KeyRingIamMemberConditionPtrOutput
	ToKeyRingIamMemberConditionPtrOutputWithContext(context.Context) KeyRingIamMemberConditionPtrOutput
}

type keyRingIamMemberConditionPtrType KeyRingIamMemberConditionArgs

func KeyRingIamMemberConditionPtr(v *KeyRingIamMemberConditionArgs) KeyRingIamMemberConditionPtrInput {
	return (*keyRingIamMemberConditionPtrType)(v)
}

func (*keyRingIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamMemberCondition)(nil)).Elem()
}

func (i *keyRingIamMemberConditionPtrType) ToKeyRingIamMemberConditionPtrOutput() KeyRingIamMemberConditionPtrOutput {
	return i.ToKeyRingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *keyRingIamMemberConditionPtrType) ToKeyRingIamMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingIamMemberConditionPtrOutput)
}

type KeyRingIamMemberConditionOutput struct{ *pulumi.OutputState }

func (KeyRingIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingIamMemberCondition)(nil)).Elem()
}

func (o KeyRingIamMemberConditionOutput) ToKeyRingIamMemberConditionOutput() KeyRingIamMemberConditionOutput {
	return o
}

func (o KeyRingIamMemberConditionOutput) ToKeyRingIamMemberConditionOutputWithContext(ctx context.Context) KeyRingIamMemberConditionOutput {
	return o
}

func (o KeyRingIamMemberConditionOutput) ToKeyRingIamMemberConditionPtrOutput() KeyRingIamMemberConditionPtrOutput {
	return o.ToKeyRingIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o KeyRingIamMemberConditionOutput) ToKeyRingIamMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyRingIamMemberCondition) *KeyRingIamMemberCondition {
		return &v
	}).(KeyRingIamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v KeyRingIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type KeyRingIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (KeyRingIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRingIamMemberCondition)(nil)).Elem()
}

func (o KeyRingIamMemberConditionPtrOutput) ToKeyRingIamMemberConditionPtrOutput() KeyRingIamMemberConditionPtrOutput {
	return o
}

func (o KeyRingIamMemberConditionPtrOutput) ToKeyRingIamMemberConditionPtrOutputWithContext(ctx context.Context) KeyRingIamMemberConditionPtrOutput {
	return o
}

func (o KeyRingIamMemberConditionPtrOutput) Elem() KeyRingIamMemberConditionOutput {
	return o.ApplyT(func(v *KeyRingIamMemberCondition) KeyRingIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret KeyRingIamMemberCondition
		return ret
	}).(KeyRingIamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** The provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o KeyRingIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o KeyRingIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o KeyRingIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRingIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type KeyRingImportJobAttestation struct {
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	Content *string `pulumi:"content"`
	// (Output)
	// The format of the attestation data.
	Format *string `pulumi:"format"`
}

// KeyRingImportJobAttestationInput is an input type that accepts KeyRingImportJobAttestationArgs and KeyRingImportJobAttestationOutput values.
// You can construct a concrete instance of `KeyRingImportJobAttestationInput` via:
//
//	KeyRingImportJobAttestationArgs{...}
type KeyRingImportJobAttestationInput interface {
	pulumi.Input

	ToKeyRingImportJobAttestationOutput() KeyRingImportJobAttestationOutput
	ToKeyRingImportJobAttestationOutputWithContext(context.Context) KeyRingImportJobAttestationOutput
}

type KeyRingImportJobAttestationArgs struct {
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// (Output)
	// The format of the attestation data.
	Format pulumi.StringPtrInput `pulumi:"format"`
}

func (KeyRingImportJobAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobAttestation)(nil)).Elem()
}

func (i KeyRingImportJobAttestationArgs) ToKeyRingImportJobAttestationOutput() KeyRingImportJobAttestationOutput {
	return i.ToKeyRingImportJobAttestationOutputWithContext(context.Background())
}

func (i KeyRingImportJobAttestationArgs) ToKeyRingImportJobAttestationOutputWithContext(ctx context.Context) KeyRingImportJobAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobAttestationOutput)
}

// KeyRingImportJobAttestationArrayInput is an input type that accepts KeyRingImportJobAttestationArray and KeyRingImportJobAttestationArrayOutput values.
// You can construct a concrete instance of `KeyRingImportJobAttestationArrayInput` via:
//
//	KeyRingImportJobAttestationArray{ KeyRingImportJobAttestationArgs{...} }
type KeyRingImportJobAttestationArrayInput interface {
	pulumi.Input

	ToKeyRingImportJobAttestationArrayOutput() KeyRingImportJobAttestationArrayOutput
	ToKeyRingImportJobAttestationArrayOutputWithContext(context.Context) KeyRingImportJobAttestationArrayOutput
}

type KeyRingImportJobAttestationArray []KeyRingImportJobAttestationInput

func (KeyRingImportJobAttestationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobAttestation)(nil)).Elem()
}

func (i KeyRingImportJobAttestationArray) ToKeyRingImportJobAttestationArrayOutput() KeyRingImportJobAttestationArrayOutput {
	return i.ToKeyRingImportJobAttestationArrayOutputWithContext(context.Background())
}

func (i KeyRingImportJobAttestationArray) ToKeyRingImportJobAttestationArrayOutputWithContext(ctx context.Context) KeyRingImportJobAttestationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobAttestationArrayOutput)
}

type KeyRingImportJobAttestationOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobAttestation)(nil)).Elem()
}

func (o KeyRingImportJobAttestationOutput) ToKeyRingImportJobAttestationOutput() KeyRingImportJobAttestationOutput {
	return o
}

func (o KeyRingImportJobAttestationOutput) ToKeyRingImportJobAttestationOutputWithContext(ctx context.Context) KeyRingImportJobAttestationOutput {
	return o
}

// (Output)
// The attestation data provided by the HSM when the key operation was performed.
// A base64-encoded string.
func (o KeyRingImportJobAttestationOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingImportJobAttestation) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// (Output)
// The format of the attestation data.
func (o KeyRingImportJobAttestationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingImportJobAttestation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

type KeyRingImportJobAttestationArrayOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobAttestationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobAttestation)(nil)).Elem()
}

func (o KeyRingImportJobAttestationArrayOutput) ToKeyRingImportJobAttestationArrayOutput() KeyRingImportJobAttestationArrayOutput {
	return o
}

func (o KeyRingImportJobAttestationArrayOutput) ToKeyRingImportJobAttestationArrayOutputWithContext(ctx context.Context) KeyRingImportJobAttestationArrayOutput {
	return o
}

func (o KeyRingImportJobAttestationArrayOutput) Index(i pulumi.IntInput) KeyRingImportJobAttestationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyRingImportJobAttestation {
		return vs[0].([]KeyRingImportJobAttestation)[vs[1].(int)]
	}).(KeyRingImportJobAttestationOutput)
}

type KeyRingImportJobPublicKey struct {
	// (Output)
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem *string `pulumi:"pem"`
}

// KeyRingImportJobPublicKeyInput is an input type that accepts KeyRingImportJobPublicKeyArgs and KeyRingImportJobPublicKeyOutput values.
// You can construct a concrete instance of `KeyRingImportJobPublicKeyInput` via:
//
//	KeyRingImportJobPublicKeyArgs{...}
type KeyRingImportJobPublicKeyInput interface {
	pulumi.Input

	ToKeyRingImportJobPublicKeyOutput() KeyRingImportJobPublicKeyOutput
	ToKeyRingImportJobPublicKeyOutputWithContext(context.Context) KeyRingImportJobPublicKeyOutput
}

type KeyRingImportJobPublicKeyArgs struct {
	// (Output)
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringPtrInput `pulumi:"pem"`
}

func (KeyRingImportJobPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobPublicKey)(nil)).Elem()
}

func (i KeyRingImportJobPublicKeyArgs) ToKeyRingImportJobPublicKeyOutput() KeyRingImportJobPublicKeyOutput {
	return i.ToKeyRingImportJobPublicKeyOutputWithContext(context.Background())
}

func (i KeyRingImportJobPublicKeyArgs) ToKeyRingImportJobPublicKeyOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobPublicKeyOutput)
}

// KeyRingImportJobPublicKeyArrayInput is an input type that accepts KeyRingImportJobPublicKeyArray and KeyRingImportJobPublicKeyArrayOutput values.
// You can construct a concrete instance of `KeyRingImportJobPublicKeyArrayInput` via:
//
//	KeyRingImportJobPublicKeyArray{ KeyRingImportJobPublicKeyArgs{...} }
type KeyRingImportJobPublicKeyArrayInput interface {
	pulumi.Input

	ToKeyRingImportJobPublicKeyArrayOutput() KeyRingImportJobPublicKeyArrayOutput
	ToKeyRingImportJobPublicKeyArrayOutputWithContext(context.Context) KeyRingImportJobPublicKeyArrayOutput
}

type KeyRingImportJobPublicKeyArray []KeyRingImportJobPublicKeyInput

func (KeyRingImportJobPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobPublicKey)(nil)).Elem()
}

func (i KeyRingImportJobPublicKeyArray) ToKeyRingImportJobPublicKeyArrayOutput() KeyRingImportJobPublicKeyArrayOutput {
	return i.ToKeyRingImportJobPublicKeyArrayOutputWithContext(context.Background())
}

func (i KeyRingImportJobPublicKeyArray) ToKeyRingImportJobPublicKeyArrayOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobPublicKeyArrayOutput)
}

type KeyRingImportJobPublicKeyOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobPublicKey)(nil)).Elem()
}

func (o KeyRingImportJobPublicKeyOutput) ToKeyRingImportJobPublicKeyOutput() KeyRingImportJobPublicKeyOutput {
	return o
}

func (o KeyRingImportJobPublicKeyOutput) ToKeyRingImportJobPublicKeyOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyOutput {
	return o
}

// (Output)
// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
// for General Considerations and Textual Encoding of Subject Public Key Info.
func (o KeyRingImportJobPublicKeyOutput) Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRingImportJobPublicKey) *string { return v.Pem }).(pulumi.StringPtrOutput)
}

type KeyRingImportJobPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (KeyRingImportJobPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyRingImportJobPublicKey)(nil)).Elem()
}

func (o KeyRingImportJobPublicKeyArrayOutput) ToKeyRingImportJobPublicKeyArrayOutput() KeyRingImportJobPublicKeyArrayOutput {
	return o
}

func (o KeyRingImportJobPublicKeyArrayOutput) ToKeyRingImportJobPublicKeyArrayOutputWithContext(ctx context.Context) KeyRingImportJobPublicKeyArrayOutput {
	return o
}

func (o KeyRingImportJobPublicKeyArrayOutput) Index(i pulumi.IntInput) KeyRingImportJobPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyRingImportJobPublicKey {
		return vs[0].([]KeyRingImportJobPublicKey)[vs[1].(int)]
	}).(KeyRingImportJobPublicKeyOutput)
}

type RegistryCredential struct {
	// A public key certificate format and data.
	PublicKeyCertificate map[string]interface{} `pulumi:"publicKeyCertificate"`
}

// RegistryCredentialInput is an input type that accepts RegistryCredentialArgs and RegistryCredentialOutput values.
// You can construct a concrete instance of `RegistryCredentialInput` via:
//
//	RegistryCredentialArgs{...}
type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(context.Context) RegistryCredentialOutput
}

type RegistryCredentialArgs struct {
	// A public key certificate format and data.
	PublicKeyCertificate pulumi.MapInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

// RegistryCredentialArrayInput is an input type that accepts RegistryCredentialArray and RegistryCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialArrayInput` via:
//
//	RegistryCredentialArray{ RegistryCredentialArgs{...} }
type RegistryCredentialArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput
	ToRegistryCredentialArrayOutputWithContext(context.Context) RegistryCredentialArrayOutput
}

type RegistryCredentialArray []RegistryCredentialInput

func (RegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return i.ToRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArrayOutput)
}

type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

// A public key certificate format and data.
func (o RegistryCredentialOutput) PublicKeyCertificate() pulumi.MapOutput {
	return o.ApplyT(func(v RegistryCredential) map[string]interface{} { return v.PublicKeyCertificate }).(pulumi.MapOutput)
}

type RegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) Index(i pulumi.IntInput) RegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredential {
		return vs[0].([]RegistryCredential)[vs[1].(int)]
	}).(RegistryCredentialOutput)
}

type RegistryEventNotificationConfigItem struct {
	// PubSub topic name to publish device events.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last `eventNotificationConfigs`
	// item.
	SubfolderMatches *string `pulumi:"subfolderMatches"`
}

// RegistryEventNotificationConfigItemInput is an input type that accepts RegistryEventNotificationConfigItemArgs and RegistryEventNotificationConfigItemOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemInput` via:
//
//	RegistryEventNotificationConfigItemArgs{...}
type RegistryEventNotificationConfigItemInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput
	ToRegistryEventNotificationConfigItemOutputWithContext(context.Context) RegistryEventNotificationConfigItemOutput
}

type RegistryEventNotificationConfigItemArgs struct {
	// PubSub topic name to publish device events.
	PubsubTopicName pulumi.StringInput `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last `eventNotificationConfigs`
	// item.
	SubfolderMatches pulumi.StringPtrInput `pulumi:"subfolderMatches"`
}

func (RegistryEventNotificationConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return i.ToRegistryEventNotificationConfigItemOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArgs) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemOutput)
}

// RegistryEventNotificationConfigItemArrayInput is an input type that accepts RegistryEventNotificationConfigItemArray and RegistryEventNotificationConfigItemArrayOutput values.
// You can construct a concrete instance of `RegistryEventNotificationConfigItemArrayInput` via:
//
//	RegistryEventNotificationConfigItemArray{ RegistryEventNotificationConfigItemArgs{...} }
type RegistryEventNotificationConfigItemArrayInput interface {
	pulumi.Input

	ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput
	ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Context) RegistryEventNotificationConfigItemArrayOutput
}

type RegistryEventNotificationConfigItemArray []RegistryEventNotificationConfigItemInput

func (RegistryEventNotificationConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return i.ToRegistryEventNotificationConfigItemArrayOutputWithContext(context.Background())
}

func (i RegistryEventNotificationConfigItemArray) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryEventNotificationConfigItemArrayOutput)
}

type RegistryEventNotificationConfigItemOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutput() RegistryEventNotificationConfigItemOutput {
	return o
}

func (o RegistryEventNotificationConfigItemOutput) ToRegistryEventNotificationConfigItemOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemOutput {
	return o
}

// PubSub topic name to publish device events.
func (o RegistryEventNotificationConfigItemOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

// If the subfolder name matches this string exactly, this
// configuration will be used. The string must not include the
// leading '/' character. If empty, all strings are matched. Empty
// value can only be used for the last `eventNotificationConfigs`
// item.
func (o RegistryEventNotificationConfigItemOutput) SubfolderMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryEventNotificationConfigItem) *string { return v.SubfolderMatches }).(pulumi.StringPtrOutput)
}

type RegistryEventNotificationConfigItemArrayOutput struct{ *pulumi.OutputState }

func (RegistryEventNotificationConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryEventNotificationConfigItem)(nil)).Elem()
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutput() RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) ToRegistryEventNotificationConfigItemArrayOutputWithContext(ctx context.Context) RegistryEventNotificationConfigItemArrayOutput {
	return o
}

func (o RegistryEventNotificationConfigItemArrayOutput) Index(i pulumi.IntInput) RegistryEventNotificationConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryEventNotificationConfigItem {
		return vs[0].([]RegistryEventNotificationConfigItem)[vs[1].(int)]
	}).(RegistryEventNotificationConfigItemOutput)
}

type GetKMSCryptoKeyVersionPublicKey struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm string `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem string `pulumi:"pem"`
}

// GetKMSCryptoKeyVersionPublicKeyInput is an input type that accepts GetKMSCryptoKeyVersionPublicKeyArgs and GetKMSCryptoKeyVersionPublicKeyOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionPublicKeyInput` via:
//
//	GetKMSCryptoKeyVersionPublicKeyArgs{...}
type GetKMSCryptoKeyVersionPublicKeyInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput
	ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Context) GetKMSCryptoKeyVersionPublicKeyOutput
}

type GetKMSCryptoKeyVersionPublicKeyArgs struct {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
	Pem pulumi.StringInput `pulumi:"pem"`
}

func (GetKMSCryptoKeyVersionPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return i.ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionPublicKeyArgs) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionPublicKeyOutput)
}

// GetKMSCryptoKeyVersionPublicKeyArrayInput is an input type that accepts GetKMSCryptoKeyVersionPublicKeyArray and GetKMSCryptoKeyVersionPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionPublicKeyArrayInput` via:
//
//	GetKMSCryptoKeyVersionPublicKeyArray{ GetKMSCryptoKeyVersionPublicKeyArgs{...} }
type GetKMSCryptoKeyVersionPublicKeyArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionPublicKeyArrayOutput() GetKMSCryptoKeyVersionPublicKeyArrayOutput
	ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(context.Context) GetKMSCryptoKeyVersionPublicKeyArrayOutput
}

type GetKMSCryptoKeyVersionPublicKeyArray []GetKMSCryptoKeyVersionPublicKeyInput

func (GetKMSCryptoKeyVersionPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionPublicKeyArray) ToGetKMSCryptoKeyVersionPublicKeyArrayOutput() GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return i.ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionPublicKeyArray) ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionPublicKeyArrayOutput)
}

type GetKMSCryptoKeyVersionPublicKeyOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutput() GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyOutput) ToGetKMSCryptoKeyVersionPublicKeyOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The public key, encoded in PEM format. For more information, see the RFC 7468 sections for General Considerations and Textual Encoding of Subject Public Key Info.
func (o GetKMSCryptoKeyVersionPublicKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionPublicKey) string { return v.Pem }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionPublicKey)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionPublicKeyArrayOutput) ToGetKMSCryptoKeyVersionPublicKeyArrayOutput() GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyArrayOutput) ToGetKMSCryptoKeyVersionPublicKeyArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionPublicKeyArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionPublicKeyArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyVersionPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyVersionPublicKey {
		return vs[0].([]GetKMSCryptoKeyVersionPublicKey)[vs[1].(int)]
	}).(GetKMSCryptoKeyVersionPublicKeyOutput)
}

type GetKMSCryptoKeyVersionTemplate struct {
	Algorithm       string `pulumi:"algorithm"`
	ProtectionLevel string `pulumi:"protectionLevel"`
}

// GetKMSCryptoKeyVersionTemplateInput is an input type that accepts GetKMSCryptoKeyVersionTemplateArgs and GetKMSCryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionTemplateInput` via:
//
//	GetKMSCryptoKeyVersionTemplateArgs{...}
type GetKMSCryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput
	ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateOutput
}

type GetKMSCryptoKeyVersionTemplateArgs struct {
	Algorithm       pulumi.StringInput `pulumi:"algorithm"`
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
}

func (GetKMSCryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArgs) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateOutput)
}

// GetKMSCryptoKeyVersionTemplateArrayInput is an input type that accepts GetKMSCryptoKeyVersionTemplateArray and GetKMSCryptoKeyVersionTemplateArrayOutput values.
// You can construct a concrete instance of `GetKMSCryptoKeyVersionTemplateArrayInput` via:
//
//	GetKMSCryptoKeyVersionTemplateArray{ GetKMSCryptoKeyVersionTemplateArgs{...} }
type GetKMSCryptoKeyVersionTemplateArrayInput interface {
	pulumi.Input

	ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput
	ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput
}

type GetKMSCryptoKeyVersionTemplateArray []GetKMSCryptoKeyVersionTemplateInput

func (GetKMSCryptoKeyVersionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return i.ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(context.Background())
}

func (i GetKMSCryptoKeyVersionTemplateArray) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKMSCryptoKeyVersionTemplateArrayOutput)
}

type GetKMSCryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutput() GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ToGetKMSCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o GetKMSCryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetKMSCryptoKeyVersionTemplate) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

type GetKMSCryptoKeyVersionTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetKMSCryptoKeyVersionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKMSCryptoKeyVersionTemplate)(nil)).Elem()
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutput() GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) ToGetKMSCryptoKeyVersionTemplateArrayOutputWithContext(ctx context.Context) GetKMSCryptoKeyVersionTemplateArrayOutput {
	return o
}

func (o GetKMSCryptoKeyVersionTemplateArrayOutput) Index(i pulumi.IntInput) GetKMSCryptoKeyVersionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKMSCryptoKeyVersionTemplate {
		return vs[0].([]GetKMSCryptoKeyVersionTemplate)[vs[1].(int)]
	}).(GetKMSCryptoKeyVersionTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamBindingConditionInput)(nil)).Elem(), CryptoKeyIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamBindingConditionPtrInput)(nil)).Elem(), CryptoKeyIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamMemberConditionInput)(nil)).Elem(), CryptoKeyIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamMemberConditionPtrInput)(nil)).Elem(), CryptoKeyIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationInput)(nil)).Elem(), CryptoKeyVersionAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationArrayInput)(nil)).Elem(), CryptoKeyVersionAttestationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationCertChainsInput)(nil)).Elem(), CryptoKeyVersionAttestationCertChainsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationCertChainsPtrInput)(nil)).Elem(), CryptoKeyVersionAttestationCertChainsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptionsInput)(nil)).Elem(), CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrInput)(nil)).Elem(), CryptoKeyVersionAttestationExternalProtectionLevelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplateInput)(nil)).Elem(), CryptoKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplatePtrInput)(nil)).Elem(), CryptoKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamBindingConditionInput)(nil)).Elem(), KeyRingIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamBindingConditionPtrInput)(nil)).Elem(), KeyRingIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamMemberConditionInput)(nil)).Elem(), KeyRingIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingIamMemberConditionPtrInput)(nil)).Elem(), KeyRingIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobAttestationInput)(nil)).Elem(), KeyRingImportJobAttestationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobAttestationArrayInput)(nil)).Elem(), KeyRingImportJobAttestationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobPublicKeyInput)(nil)).Elem(), KeyRingImportJobPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRingImportJobPublicKeyArrayInput)(nil)).Elem(), KeyRingImportJobPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialInput)(nil)).Elem(), RegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialArrayInput)(nil)).Elem(), RegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryEventNotificationConfigItemInput)(nil)).Elem(), RegistryEventNotificationConfigItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryEventNotificationConfigItemArrayInput)(nil)).Elem(), RegistryEventNotificationConfigItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKeyInput)(nil)).Elem(), GetKMSCryptoKeyVersionPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionPublicKeyArrayInput)(nil)).Elem(), GetKMSCryptoKeyVersionPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionTemplateInput)(nil)).Elem(), GetKMSCryptoKeyVersionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKMSCryptoKeyVersionTemplateArrayInput)(nil)).Elem(), GetKMSCryptoKeyVersionTemplateArray{})
	pulumi.RegisterOutputType(CryptoKeyIamBindingConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyIamMemberConditionOutput{})
	pulumi.RegisterOutputType(CryptoKeyIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationArrayOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationCertChainsOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationCertChainsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationExternalProtectionLevelOptionsOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionAttestationExternalProtectionLevelOptionsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplatePtrOutput{})
	pulumi.RegisterOutputType(KeyRingIamBindingConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingIamMemberConditionOutput{})
	pulumi.RegisterOutputType(KeyRingIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobAttestationOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobAttestationArrayOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobPublicKeyOutput{})
	pulumi.RegisterOutputType(KeyRingImportJobPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemOutput{})
	pulumi.RegisterOutputType(RegistryEventNotificationConfigItemArrayOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionPublicKeyOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(GetKMSCryptoKeyVersionTemplateArrayOutput{})
}
