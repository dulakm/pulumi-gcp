// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for KMS crypto key. Each of these resources serves a different use case:
//
// * `kms.CryptoKeyIamPolicy`: Authoritative. Sets the IAM policy for the crypto key and replaces any existing policy already attached.
// * `kms.CryptoKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the crypto key are preserved.
// * `kms.CryptoKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the crypto key are preserved.
//
// > **Note:** `kms.CryptoKeyIamPolicy` **cannot** be used in conjunction with `kms.CryptoKeyIamBinding` and `kms.CryptoKeyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `kms.CryptoKeyIamBinding` resources **can be** used in conjunction with `kms.CryptoKeyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			key, err := kms.NewCryptoKey(ctx, "key", &kms.CryptoKeyArgs{
//				KeyRing:        keyring.ID(),
//				RotationPeriod: pulumi.String("100000s"),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/cloudkms.cryptoKeyEncrypter",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKeyIamPolicy(ctx, "cryptoKey", &kms.CryptoKeyIamPolicyArgs{
//				CryptoKeyId: key.ID(),
//				PolicyData:  *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Condition: {
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//							Title:       "expires_after_2019_12_31",
//						},
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Role: "roles/cloudkms.cryptoKeyEncrypter",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewCryptoKeyIamBinding(ctx, "cryptoKey", &kms.CryptoKeyIamBindingArgs{
//				CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewCryptoKeyIamBinding(ctx, "cryptoKey", &kms.CryptoKeyIamBindingArgs{
//				CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &kms.CryptoKeyIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewCryptoKeyIamMember(ctx, "cryptoKey", &kms.CryptoKeyIamMemberArgs{
//				CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewCryptoKeyIamMember(ctx, "cryptoKey", &kms.CryptoKeyIamMemberArgs{
//				CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
//				Member:      pulumi.String("user:jane@example.com"),
//				Condition: &kms.CryptoKeyIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
//
// This member resource can be imported using the `crypto_key_id`, role, and member identity e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/cryptoKeyIamMember:CryptoKeyIamMember crypto_key "your-project-id/location-name/key-ring-name/key-name roles/viewer user:foo@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiers; first the resource in question and then the role.
//
// These bindings can be imported using the `crypto_key_id` and role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/cryptoKeyIamMember:CryptoKeyIamMember crypto_key "your-project-id/location-name/key-ring-name/key-name roles/editor"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question.
//
// This policy resource can be imported using the `crypto_key_id`, e.g.
//
// ```sh
//
//	$ pulumi import gcp:kms/cryptoKeyIamMember:CryptoKeyIamMember crypto_key your-project-id/location-name/key-ring-name/key-name
//
// ```
type CryptoKeyIamMember struct {
	pulumi.CustomResourceState

	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CryptoKeyIamMemberConditionPtrOutput `pulumi:"condition"`
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
	// the provider's project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	CryptoKeyId pulumi.StringOutput `pulumi:"cryptoKeyId"`
	// (Computed) The etag of the project's IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewCryptoKeyIamMember registers a new resource with the given unique name, arguments, and options.
func NewCryptoKeyIamMember(ctx *pulumi.Context,
	name string, args *CryptoKeyIamMemberArgs, opts ...pulumi.ResourceOption) (*CryptoKeyIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CryptoKeyId == nil {
		return nil, errors.New("invalid value for required argument 'CryptoKeyId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CryptoKeyIamMember
	err := ctx.RegisterResource("gcp:kms/cryptoKeyIamMember:CryptoKeyIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoKeyIamMember gets an existing CryptoKeyIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoKeyIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoKeyIamMemberState, opts ...pulumi.ResourceOption) (*CryptoKeyIamMember, error) {
	var resource CryptoKeyIamMember
	err := ctx.ReadResource("gcp:kms/cryptoKeyIamMember:CryptoKeyIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoKeyIamMember resources.
type cryptoKeyIamMemberState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *CryptoKeyIamMemberCondition `pulumi:"condition"`
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
	// the provider's project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	CryptoKeyId *string `pulumi:"cryptoKeyId"`
	// (Computed) The etag of the project's IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The role that should be applied. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type CryptoKeyIamMemberState struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CryptoKeyIamMemberConditionPtrInput
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
	// the provider's project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	CryptoKeyId pulumi.StringPtrInput
	// (Computed) The etag of the project's IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The role that should be applied. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (CryptoKeyIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyIamMemberState)(nil)).Elem()
}

type cryptoKeyIamMemberArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *CryptoKeyIamMemberCondition `pulumi:"condition"`
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
	// the provider's project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	CryptoKeyId string `pulumi:"cryptoKeyId"`
	Member      string `pulumi:"member"`
	// The role that should be applied. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a CryptoKeyIamMember resource.
type CryptoKeyIamMemberArgs struct {
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CryptoKeyIamMemberConditionPtrInput
	// The crypto key ID, in the form
	// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
	// `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
	// the provider's project setting will be used as a fallback.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	CryptoKeyId pulumi.StringInput
	Member      pulumi.StringInput
	// The role that should be applied. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (CryptoKeyIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyIamMemberArgs)(nil)).Elem()
}

type CryptoKeyIamMemberInput interface {
	pulumi.Input

	ToCryptoKeyIamMemberOutput() CryptoKeyIamMemberOutput
	ToCryptoKeyIamMemberOutputWithContext(ctx context.Context) CryptoKeyIamMemberOutput
}

func (*CryptoKeyIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIamMember)(nil)).Elem()
}

func (i *CryptoKeyIamMember) ToCryptoKeyIamMemberOutput() CryptoKeyIamMemberOutput {
	return i.ToCryptoKeyIamMemberOutputWithContext(context.Background())
}

func (i *CryptoKeyIamMember) ToCryptoKeyIamMemberOutputWithContext(ctx context.Context) CryptoKeyIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamMemberOutput)
}

// CryptoKeyIamMemberArrayInput is an input type that accepts CryptoKeyIamMemberArray and CryptoKeyIamMemberArrayOutput values.
// You can construct a concrete instance of `CryptoKeyIamMemberArrayInput` via:
//
//	CryptoKeyIamMemberArray{ CryptoKeyIamMemberArgs{...} }
type CryptoKeyIamMemberArrayInput interface {
	pulumi.Input

	ToCryptoKeyIamMemberArrayOutput() CryptoKeyIamMemberArrayOutput
	ToCryptoKeyIamMemberArrayOutputWithContext(context.Context) CryptoKeyIamMemberArrayOutput
}

type CryptoKeyIamMemberArray []CryptoKeyIamMemberInput

func (CryptoKeyIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoKeyIamMember)(nil)).Elem()
}

func (i CryptoKeyIamMemberArray) ToCryptoKeyIamMemberArrayOutput() CryptoKeyIamMemberArrayOutput {
	return i.ToCryptoKeyIamMemberArrayOutputWithContext(context.Background())
}

func (i CryptoKeyIamMemberArray) ToCryptoKeyIamMemberArrayOutputWithContext(ctx context.Context) CryptoKeyIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamMemberArrayOutput)
}

// CryptoKeyIamMemberMapInput is an input type that accepts CryptoKeyIamMemberMap and CryptoKeyIamMemberMapOutput values.
// You can construct a concrete instance of `CryptoKeyIamMemberMapInput` via:
//
//	CryptoKeyIamMemberMap{ "key": CryptoKeyIamMemberArgs{...} }
type CryptoKeyIamMemberMapInput interface {
	pulumi.Input

	ToCryptoKeyIamMemberMapOutput() CryptoKeyIamMemberMapOutput
	ToCryptoKeyIamMemberMapOutputWithContext(context.Context) CryptoKeyIamMemberMapOutput
}

type CryptoKeyIamMemberMap map[string]CryptoKeyIamMemberInput

func (CryptoKeyIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoKeyIamMember)(nil)).Elem()
}

func (i CryptoKeyIamMemberMap) ToCryptoKeyIamMemberMapOutput() CryptoKeyIamMemberMapOutput {
	return i.ToCryptoKeyIamMemberMapOutputWithContext(context.Background())
}

func (i CryptoKeyIamMemberMap) ToCryptoKeyIamMemberMapOutputWithContext(ctx context.Context) CryptoKeyIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyIamMemberMapOutput)
}

type CryptoKeyIamMemberOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyIamMember)(nil)).Elem()
}

func (o CryptoKeyIamMemberOutput) ToCryptoKeyIamMemberOutput() CryptoKeyIamMemberOutput {
	return o
}

func (o CryptoKeyIamMemberOutput) ToCryptoKeyIamMemberOutputWithContext(ctx context.Context) CryptoKeyIamMemberOutput {
	return o
}

// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o CryptoKeyIamMemberOutput) Condition() CryptoKeyIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *CryptoKeyIamMember) CryptoKeyIamMemberConditionPtrOutput { return v.Condition }).(CryptoKeyIamMemberConditionPtrOutput)
}

// The crypto key ID, in the form
// `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
// `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
// the provider's project setting will be used as a fallback.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, jane@example.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o CryptoKeyIamMemberOutput) CryptoKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyIamMember) pulumi.StringOutput { return v.CryptoKeyId }).(pulumi.StringOutput)
}

// (Computed) The etag of the project's IAM policy.
func (o CryptoKeyIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o CryptoKeyIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o CryptoKeyIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type CryptoKeyIamMemberArrayOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoKeyIamMember)(nil)).Elem()
}

func (o CryptoKeyIamMemberArrayOutput) ToCryptoKeyIamMemberArrayOutput() CryptoKeyIamMemberArrayOutput {
	return o
}

func (o CryptoKeyIamMemberArrayOutput) ToCryptoKeyIamMemberArrayOutputWithContext(ctx context.Context) CryptoKeyIamMemberArrayOutput {
	return o
}

func (o CryptoKeyIamMemberArrayOutput) Index(i pulumi.IntInput) CryptoKeyIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CryptoKeyIamMember {
		return vs[0].([]*CryptoKeyIamMember)[vs[1].(int)]
	}).(CryptoKeyIamMemberOutput)
}

type CryptoKeyIamMemberMapOutput struct{ *pulumi.OutputState }

func (CryptoKeyIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoKeyIamMember)(nil)).Elem()
}

func (o CryptoKeyIamMemberMapOutput) ToCryptoKeyIamMemberMapOutput() CryptoKeyIamMemberMapOutput {
	return o
}

func (o CryptoKeyIamMemberMapOutput) ToCryptoKeyIamMemberMapOutputWithContext(ctx context.Context) CryptoKeyIamMemberMapOutput {
	return o
}

func (o CryptoKeyIamMemberMapOutput) MapIndex(k pulumi.StringInput) CryptoKeyIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CryptoKeyIamMember {
		return vs[0].(map[string]*CryptoKeyIamMember)[vs[1].(string)]
	}).(CryptoKeyIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamMemberInput)(nil)).Elem(), &CryptoKeyIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamMemberArrayInput)(nil)).Elem(), CryptoKeyIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyIamMemberMapInput)(nil)).Elem(), CryptoKeyIamMemberMap{})
	pulumi.RegisterOutputType(CryptoKeyIamMemberOutput{})
	pulumi.RegisterOutputType(CryptoKeyIamMemberArrayOutput{})
	pulumi.RegisterOutputType(CryptoKeyIamMemberMapOutput{})
}
