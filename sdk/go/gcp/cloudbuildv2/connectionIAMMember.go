// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuildv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Build v2 Connection. Each of these resources serves a different use case:
//
// * `cloudbuildv2.ConnectionIamPolicy`: Authoritative. Sets the IAM policy for the connection and replaces any existing policy already attached.
// * `cloudbuildv2.ConnectionIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the connection are preserved.
// * `cloudbuildv2.ConnectionIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the connection are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `cloudbuildv2.ConnectionIamPolicy`: Retrieves the IAM policy for the connection
//
// > **Note:** `cloudbuildv2.ConnectionIamPolicy` **cannot** be used in conjunction with `cloudbuildv2.ConnectionIamBinding` and `cloudbuildv2.ConnectionIamMember` or they will fight over what your policy should be.
//
// > **Note:** `cloudbuildv2.ConnectionIamBinding` resources **can be** used in conjunction with `cloudbuildv2.ConnectionIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_cloudbuildv2\_connection\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudbuildv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/cloudbuild.connectionViewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudbuildv2.NewConnectionIamPolicy(ctx, "policy", &cloudbuildv2.ConnectionIamPolicyArgs{
//				Project:    pulumi.Any(google_cloudbuildv2_connection.MyConnection.Project),
//				Location:   pulumi.Any(google_cloudbuildv2_connection.MyConnection.Location),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloudbuildv2\_connection\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudbuildv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudbuildv2.NewConnectionIamBinding(ctx, "binding", &cloudbuildv2.ConnectionIamBindingArgs{
//				Project:  pulumi.Any(google_cloudbuildv2_connection.MyConnection.Project),
//				Location: pulumi.Any(google_cloudbuildv2_connection.MyConnection.Location),
//				Role:     pulumi.String("roles/cloudbuild.connectionViewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_cloudbuildv2\_connection\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudbuildv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudbuildv2.NewConnectionIamMember(ctx, "member", &cloudbuildv2.ConnectionIamMemberArgs{
//				Project:  pulumi.Any(google_cloudbuildv2_connection.MyConnection.Project),
//				Location: pulumi.Any(google_cloudbuildv2_connection.MyConnection.Location),
//				Role:     pulumi.String("roles/cloudbuild.connectionViewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/connections/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Build v2 connection IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudbuildv2/connectionIamMember:ConnectionIamMember editor "projects/{{project}}/locations/{{location}}/connections/{{connection}} roles/cloudbuild.connectionViewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudbuildv2/connectionIamMember:ConnectionIamMember editor "projects/{{project}}/locations/{{location}}/connections/{{connection}} roles/cloudbuild.connectionViewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudbuildv2/connectionIamMember:ConnectionIamMember editor projects/{{project}}/locations/{{location}}/connections/{{connection}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ConnectionIamMember struct {
	pulumi.CustomResourceState

	Condition ConnectionIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewConnectionIamMember registers a new resource with the given unique name, arguments, and options.
func NewConnectionIamMember(ctx *pulumi.Context,
	name string, args *ConnectionIamMemberArgs, opts ...pulumi.ResourceOption) (*ConnectionIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionIamMember
	err := ctx.RegisterResource("gcp:cloudbuildv2/connectionIamMember:ConnectionIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionIamMember gets an existing ConnectionIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionIamMemberState, opts ...pulumi.ResourceOption) (*ConnectionIamMember, error) {
	var resource ConnectionIamMember
	err := ctx.ReadResource("gcp:cloudbuildv2/connectionIamMember:ConnectionIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionIamMember resources.
type connectionIamMemberState struct {
	Condition *ConnectionIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type ConnectionIamMemberState struct {
	Condition ConnectionIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (ConnectionIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionIamMemberState)(nil)).Elem()
}

type connectionIamMemberArgs struct {
	Condition *ConnectionIamMemberCondition `pulumi:"condition"`
	Location  *string                       `pulumi:"location"`
	Member    string                        `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ConnectionIamMember resource.
type ConnectionIamMemberArgs struct {
	Condition ConnectionIamMemberConditionPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (ConnectionIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionIamMemberArgs)(nil)).Elem()
}

type ConnectionIamMemberInput interface {
	pulumi.Input

	ToConnectionIamMemberOutput() ConnectionIamMemberOutput
	ToConnectionIamMemberOutputWithContext(ctx context.Context) ConnectionIamMemberOutput
}

func (*ConnectionIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIamMember)(nil)).Elem()
}

func (i *ConnectionIamMember) ToConnectionIamMemberOutput() ConnectionIamMemberOutput {
	return i.ToConnectionIamMemberOutputWithContext(context.Background())
}

func (i *ConnectionIamMember) ToConnectionIamMemberOutputWithContext(ctx context.Context) ConnectionIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamMemberOutput)
}

// ConnectionIamMemberArrayInput is an input type that accepts ConnectionIamMemberArray and ConnectionIamMemberArrayOutput values.
// You can construct a concrete instance of `ConnectionIamMemberArrayInput` via:
//
//	ConnectionIamMemberArray{ ConnectionIamMemberArgs{...} }
type ConnectionIamMemberArrayInput interface {
	pulumi.Input

	ToConnectionIamMemberArrayOutput() ConnectionIamMemberArrayOutput
	ToConnectionIamMemberArrayOutputWithContext(context.Context) ConnectionIamMemberArrayOutput
}

type ConnectionIamMemberArray []ConnectionIamMemberInput

func (ConnectionIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionIamMember)(nil)).Elem()
}

func (i ConnectionIamMemberArray) ToConnectionIamMemberArrayOutput() ConnectionIamMemberArrayOutput {
	return i.ToConnectionIamMemberArrayOutputWithContext(context.Background())
}

func (i ConnectionIamMemberArray) ToConnectionIamMemberArrayOutputWithContext(ctx context.Context) ConnectionIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamMemberArrayOutput)
}

// ConnectionIamMemberMapInput is an input type that accepts ConnectionIamMemberMap and ConnectionIamMemberMapOutput values.
// You can construct a concrete instance of `ConnectionIamMemberMapInput` via:
//
//	ConnectionIamMemberMap{ "key": ConnectionIamMemberArgs{...} }
type ConnectionIamMemberMapInput interface {
	pulumi.Input

	ToConnectionIamMemberMapOutput() ConnectionIamMemberMapOutput
	ToConnectionIamMemberMapOutputWithContext(context.Context) ConnectionIamMemberMapOutput
}

type ConnectionIamMemberMap map[string]ConnectionIamMemberInput

func (ConnectionIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionIamMember)(nil)).Elem()
}

func (i ConnectionIamMemberMap) ToConnectionIamMemberMapOutput() ConnectionIamMemberMapOutput {
	return i.ToConnectionIamMemberMapOutputWithContext(context.Background())
}

func (i ConnectionIamMemberMap) ToConnectionIamMemberMapOutputWithContext(ctx context.Context) ConnectionIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamMemberMapOutput)
}

type ConnectionIamMemberOutput struct{ *pulumi.OutputState }

func (ConnectionIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIamMember)(nil)).Elem()
}

func (o ConnectionIamMemberOutput) ToConnectionIamMemberOutput() ConnectionIamMemberOutput {
	return o
}

func (o ConnectionIamMemberOutput) ToConnectionIamMemberOutputWithContext(ctx context.Context) ConnectionIamMemberOutput {
	return o
}

func (o ConnectionIamMemberOutput) Condition() ConnectionIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ConnectionIamMember) ConnectionIamMemberConditionPtrOutput { return v.Condition }).(ConnectionIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o ConnectionIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ConnectionIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ConnectionIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o ConnectionIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ConnectionIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `cloudbuildv2.ConnectionIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o ConnectionIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ConnectionIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ConnectionIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionIamMember)(nil)).Elem()
}

func (o ConnectionIamMemberArrayOutput) ToConnectionIamMemberArrayOutput() ConnectionIamMemberArrayOutput {
	return o
}

func (o ConnectionIamMemberArrayOutput) ToConnectionIamMemberArrayOutputWithContext(ctx context.Context) ConnectionIamMemberArrayOutput {
	return o
}

func (o ConnectionIamMemberArrayOutput) Index(i pulumi.IntInput) ConnectionIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionIamMember {
		return vs[0].([]*ConnectionIamMember)[vs[1].(int)]
	}).(ConnectionIamMemberOutput)
}

type ConnectionIamMemberMapOutput struct{ *pulumi.OutputState }

func (ConnectionIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionIamMember)(nil)).Elem()
}

func (o ConnectionIamMemberMapOutput) ToConnectionIamMemberMapOutput() ConnectionIamMemberMapOutput {
	return o
}

func (o ConnectionIamMemberMapOutput) ToConnectionIamMemberMapOutputWithContext(ctx context.Context) ConnectionIamMemberMapOutput {
	return o
}

func (o ConnectionIamMemberMapOutput) MapIndex(k pulumi.StringInput) ConnectionIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionIamMember {
		return vs[0].(map[string]*ConnectionIamMember)[vs[1].(string)]
	}).(ConnectionIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamMemberInput)(nil)).Elem(), &ConnectionIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamMemberArrayInput)(nil)).Elem(), ConnectionIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamMemberMapInput)(nil)).Elem(), ConnectionIamMemberMap{})
	pulumi.RegisterOutputType(ConnectionIamMemberOutput{})
	pulumi.RegisterOutputType(ConnectionIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ConnectionIamMemberMapOutput{})
}
