// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine Subnetwork. Each of these resources serves a different use case:
//
// * `compute.SubnetworkIamPolicy`: Authoritative. Sets the IAM policy for the subnetwork and replaces any existing policy already attached.
// * `compute.SubnetworkIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the subnetwork are preserved.
// * `compute.SubnetworkIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the subnetwork are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.SubnetworkIamPolicy`: Retrieves the IAM policy for the subnetwork
//
// > **Note:** `compute.SubnetworkIamPolicy` **cannot** be used in conjunction with `compute.SubnetworkIamBinding` and `compute.SubnetworkIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.SubnetworkIamBinding` resources **can be** used in conjunction with `compute.SubnetworkIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## google\_compute\_subnetwork\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/compute.networkUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewSubnetworkIamPolicy(ctx, "policy", &compute.SubnetworkIamPolicyArgs{
//				Project:    pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Project),
//				Region:     pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Region),
//				Subnetwork: pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Name),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/compute.networkUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewSubnetworkIamPolicy(ctx, "policy", &compute.SubnetworkIamPolicyArgs{
//				Project:    pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Project),
//				Region:     pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Region),
//				Subnetwork: pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Name),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## google\_compute\_subnetwork\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewSubnetworkIamBinding(ctx, "binding", &compute.SubnetworkIamBindingArgs{
//				Project:    pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Project),
//				Region:     pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Region),
//				Subnetwork: pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Name),
//				Role:       pulumi.String("roles/compute.networkUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewSubnetworkIamBinding(ctx, "binding", &compute.SubnetworkIamBindingArgs{
//				Project:    pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Project),
//				Region:     pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Region),
//				Subnetwork: pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Name),
//				Role:       pulumi.String("roles/compute.networkUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.SubnetworkIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## google\_compute\_subnetwork\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewSubnetworkIamMember(ctx, "member", &compute.SubnetworkIamMemberArgs{
//				Project:    pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Project),
//				Region:     pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Region),
//				Subnetwork: pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Name),
//				Role:       pulumi.String("roles/compute.networkUser"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewSubnetworkIamMember(ctx, "member", &compute.SubnetworkIamMemberArgs{
//				Project:    pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Project),
//				Region:     pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Region),
//				Subnetwork: pulumi.Any(google_compute_subnetwork.NetworkWithPrivateSecondaryIpRanges.Name),
//				Role:       pulumi.String("roles/compute.networkUser"),
//				Member:     pulumi.String("user:jane@example.com"),
//				Condition: &compute.SubnetworkIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/regions/{{region}}/subnetworks/{{name}} * {{project}}/{{region}}/{{name}} * {{region}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine subnetwork IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/subnetworkIamMember:SubnetworkIamMember editor "projects/{{project}}/regions/{{region}}/subnetworks/{{subnetwork}} roles/compute.networkUser user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/subnetworkIamMember:SubnetworkIamMember editor "projects/{{project}}/regions/{{region}}/subnetworks/{{subnetwork}} roles/compute.networkUser"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/subnetworkIamMember:SubnetworkIamMember editor projects/{{project}}/regions/{{region}}/subnetworks/{{subnetwork}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type SubnetworkIamMember struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition SubnetworkIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The GCP region for this subnetwork.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.SubnetworkIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	Subnetwork pulumi.StringOutput `pulumi:"subnetwork"`
}

// NewSubnetworkIamMember registers a new resource with the given unique name, arguments, and options.
func NewSubnetworkIamMember(ctx *pulumi.Context,
	name string, args *SubnetworkIamMemberArgs, opts ...pulumi.ResourceOption) (*SubnetworkIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Subnetwork == nil {
		return nil, errors.New("invalid value for required argument 'Subnetwork'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubnetworkIamMember
	err := ctx.RegisterResource("gcp:compute/subnetworkIamMember:SubnetworkIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetworkIamMember gets an existing SubnetworkIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetworkIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetworkIamMemberState, opts ...pulumi.ResourceOption) (*SubnetworkIamMember, error) {
	var resource SubnetworkIamMember
	err := ctx.ReadResource("gcp:compute/subnetworkIamMember:SubnetworkIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetworkIamMember resources.
type subnetworkIamMemberState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *SubnetworkIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The GCP region for this subnetwork.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.SubnetworkIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	Subnetwork *string `pulumi:"subnetwork"`
}

type SubnetworkIamMemberState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition SubnetworkIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The GCP region for this subnetwork.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.SubnetworkIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Subnetwork pulumi.StringPtrInput
}

func (SubnetworkIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetworkIamMemberState)(nil)).Elem()
}

type subnetworkIamMemberArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *SubnetworkIamMemberCondition `pulumi:"condition"`
	Member    string                        `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The GCP region for this subnetwork.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.SubnetworkIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	Subnetwork string `pulumi:"subnetwork"`
}

// The set of arguments for constructing a SubnetworkIamMember resource.
type SubnetworkIamMemberArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition SubnetworkIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The GCP region for this subnetwork.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.SubnetworkIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Subnetwork pulumi.StringInput
}

func (SubnetworkIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetworkIamMemberArgs)(nil)).Elem()
}

type SubnetworkIamMemberInput interface {
	pulumi.Input

	ToSubnetworkIamMemberOutput() SubnetworkIamMemberOutput
	ToSubnetworkIamMemberOutputWithContext(ctx context.Context) SubnetworkIamMemberOutput
}

func (*SubnetworkIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkIamMember)(nil)).Elem()
}

func (i *SubnetworkIamMember) ToSubnetworkIamMemberOutput() SubnetworkIamMemberOutput {
	return i.ToSubnetworkIamMemberOutputWithContext(context.Background())
}

func (i *SubnetworkIamMember) ToSubnetworkIamMemberOutputWithContext(ctx context.Context) SubnetworkIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIamMemberOutput)
}

// SubnetworkIamMemberArrayInput is an input type that accepts SubnetworkIamMemberArray and SubnetworkIamMemberArrayOutput values.
// You can construct a concrete instance of `SubnetworkIamMemberArrayInput` via:
//
//	SubnetworkIamMemberArray{ SubnetworkIamMemberArgs{...} }
type SubnetworkIamMemberArrayInput interface {
	pulumi.Input

	ToSubnetworkIamMemberArrayOutput() SubnetworkIamMemberArrayOutput
	ToSubnetworkIamMemberArrayOutputWithContext(context.Context) SubnetworkIamMemberArrayOutput
}

type SubnetworkIamMemberArray []SubnetworkIamMemberInput

func (SubnetworkIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetworkIamMember)(nil)).Elem()
}

func (i SubnetworkIamMemberArray) ToSubnetworkIamMemberArrayOutput() SubnetworkIamMemberArrayOutput {
	return i.ToSubnetworkIamMemberArrayOutputWithContext(context.Background())
}

func (i SubnetworkIamMemberArray) ToSubnetworkIamMemberArrayOutputWithContext(ctx context.Context) SubnetworkIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIamMemberArrayOutput)
}

// SubnetworkIamMemberMapInput is an input type that accepts SubnetworkIamMemberMap and SubnetworkIamMemberMapOutput values.
// You can construct a concrete instance of `SubnetworkIamMemberMapInput` via:
//
//	SubnetworkIamMemberMap{ "key": SubnetworkIamMemberArgs{...} }
type SubnetworkIamMemberMapInput interface {
	pulumi.Input

	ToSubnetworkIamMemberMapOutput() SubnetworkIamMemberMapOutput
	ToSubnetworkIamMemberMapOutputWithContext(context.Context) SubnetworkIamMemberMapOutput
}

type SubnetworkIamMemberMap map[string]SubnetworkIamMemberInput

func (SubnetworkIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetworkIamMember)(nil)).Elem()
}

func (i SubnetworkIamMemberMap) ToSubnetworkIamMemberMapOutput() SubnetworkIamMemberMapOutput {
	return i.ToSubnetworkIamMemberMapOutputWithContext(context.Background())
}

func (i SubnetworkIamMemberMap) ToSubnetworkIamMemberMapOutputWithContext(ctx context.Context) SubnetworkIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIamMemberMapOutput)
}

type SubnetworkIamMemberOutput struct{ *pulumi.OutputState }

func (SubnetworkIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkIamMember)(nil)).Elem()
}

func (o SubnetworkIamMemberOutput) ToSubnetworkIamMemberOutput() SubnetworkIamMemberOutput {
	return o
}

func (o SubnetworkIamMemberOutput) ToSubnetworkIamMemberOutputWithContext(ctx context.Context) SubnetworkIamMemberOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o SubnetworkIamMemberOutput) Condition() SubnetworkIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) SubnetworkIamMemberConditionPtrOutput { return v.Condition }).(SubnetworkIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o SubnetworkIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SubnetworkIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o SubnetworkIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The GCP region for this subnetwork.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o SubnetworkIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `compute.SubnetworkIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o SubnetworkIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o SubnetworkIamMemberOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetworkIamMember) pulumi.StringOutput { return v.Subnetwork }).(pulumi.StringOutput)
}

type SubnetworkIamMemberArrayOutput struct{ *pulumi.OutputState }

func (SubnetworkIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetworkIamMember)(nil)).Elem()
}

func (o SubnetworkIamMemberArrayOutput) ToSubnetworkIamMemberArrayOutput() SubnetworkIamMemberArrayOutput {
	return o
}

func (o SubnetworkIamMemberArrayOutput) ToSubnetworkIamMemberArrayOutputWithContext(ctx context.Context) SubnetworkIamMemberArrayOutput {
	return o
}

func (o SubnetworkIamMemberArrayOutput) Index(i pulumi.IntInput) SubnetworkIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubnetworkIamMember {
		return vs[0].([]*SubnetworkIamMember)[vs[1].(int)]
	}).(SubnetworkIamMemberOutput)
}

type SubnetworkIamMemberMapOutput struct{ *pulumi.OutputState }

func (SubnetworkIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetworkIamMember)(nil)).Elem()
}

func (o SubnetworkIamMemberMapOutput) ToSubnetworkIamMemberMapOutput() SubnetworkIamMemberMapOutput {
	return o
}

func (o SubnetworkIamMemberMapOutput) ToSubnetworkIamMemberMapOutputWithContext(ctx context.Context) SubnetworkIamMemberMapOutput {
	return o
}

func (o SubnetworkIamMemberMapOutput) MapIndex(k pulumi.StringInput) SubnetworkIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubnetworkIamMember {
		return vs[0].(map[string]*SubnetworkIamMember)[vs[1].(string)]
	}).(SubnetworkIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkIamMemberInput)(nil)).Elem(), &SubnetworkIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkIamMemberArrayInput)(nil)).Elem(), SubnetworkIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkIamMemberMapInput)(nil)).Elem(), SubnetworkIamMemberMap{})
	pulumi.RegisterOutputType(SubnetworkIamMemberOutput{})
	pulumi.RegisterOutputType(SubnetworkIamMemberArrayOutput{})
	pulumi.RegisterOutputType(SubnetworkIamMemberMapOutput{})
}
