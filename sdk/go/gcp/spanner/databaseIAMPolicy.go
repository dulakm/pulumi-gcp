// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for a Spanner database. Each of these resources serves a different use case:
//
// * `spanner.DatabaseIamPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.
//
// > **Warning:** It's entirely possibly to lock yourself out of your database using `spanner.DatabaseIamPolicy`. Any permissions granted by default will be removed unless you include them in your config.
//
// * `spanner.DatabaseIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
// * `spanner.DatabaseIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.
//
// > **Note:** `spanner.DatabaseIamPolicy` **cannot** be used in conjunction with `spanner.DatabaseIamBinding` and `spanner.DatabaseIamMember` or they will fight over what your policy should be.
//
// > **Note:** `spanner.DatabaseIamBinding` resources **can be** used in conjunction with `spanner.DatabaseIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_spanner\_database\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = spanner.NewDatabaseIamPolicy(ctx, "database", &spanner.DatabaseIamPolicyArgs{
//				Instance:   pulumi.String("your-instance-name"),
//				Database:   pulumi.String("your-database-name"),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_spanner\_database\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spanner.NewDatabaseIamBinding(ctx, "database", &spanner.DatabaseIamBindingArgs{
//				Database: pulumi.String("your-database-name"),
//				Instance: pulumi.String("your-instance-name"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role: pulumi.String("roles/compute.networkUser"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_spanner\_database\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/spanner"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spanner.NewDatabaseIamMember(ctx, "database", &spanner.DatabaseIamMemberArgs{
//				Database: pulumi.String("your-database-name"),
//				Instance: pulumi.String("your-instance-name"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Role:     pulumi.String("roles/compute.networkUser"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* {{project}}/{{instance}}/{{database}} * {{instance}}/{{database}} (project is taken from provider project) IAM member imports use space-delimited identifiers; the resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:spanner/databaseIamPolicy:DatabaseIamPolicy database "project-name/instance-name/database-name roles/viewer user:foo@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiers; the resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:spanner/databaseIamPolicy:DatabaseIamPolicy database "project-name/instance-name/database-name roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:spanner/databaseIamPolicy:DatabaseIamPolicy database project-name/instance-name/database-name
//
// ```
//
//	-> **Custom Roles:** If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type DatabaseIamPolicy struct {
	pulumi.CustomResourceState

	// The name of the Spanner database.
	Database pulumi.StringOutput `pulumi:"database"`
	// (Computed) The etag of the database's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the Spanner instance the database belongs to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewDatabaseIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDatabaseIamPolicy(ctx *pulumi.Context,
	name string, args *DatabaseIamPolicyArgs, opts ...pulumi.ResourceOption) (*DatabaseIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseIamPolicy
	err := ctx.RegisterResource("gcp:spanner/databaseIamPolicy:DatabaseIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseIamPolicy gets an existing DatabaseIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseIamPolicyState, opts ...pulumi.ResourceOption) (*DatabaseIamPolicy, error) {
	var resource DatabaseIamPolicy
	err := ctx.ReadResource("gcp:spanner/databaseIamPolicy:DatabaseIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseIamPolicy resources.
type databaseIamPolicyState struct {
	// The name of the Spanner database.
	Database *string `pulumi:"database"`
	// (Computed) The etag of the database's IAM policy.
	Etag *string `pulumi:"etag"`
	// The name of the Spanner instance the database belongs to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Instance *string `pulumi:"instance"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type DatabaseIamPolicyState struct {
	// The name of the Spanner database.
	Database pulumi.StringPtrInput
	// (Computed) The etag of the database's IAM policy.
	Etag pulumi.StringPtrInput
	// The name of the Spanner instance the database belongs to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Instance pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (DatabaseIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseIamPolicyState)(nil)).Elem()
}

type databaseIamPolicyArgs struct {
	// The name of the Spanner database.
	Database string `pulumi:"database"`
	// The name of the Spanner instance the database belongs to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Instance string `pulumi:"instance"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a DatabaseIamPolicy resource.
type DatabaseIamPolicyArgs struct {
	// The name of the Spanner database.
	Database pulumi.StringInput
	// The name of the Spanner instance the database belongs to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Instance pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (DatabaseIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseIamPolicyArgs)(nil)).Elem()
}

type DatabaseIamPolicyInput interface {
	pulumi.Input

	ToDatabaseIamPolicyOutput() DatabaseIamPolicyOutput
	ToDatabaseIamPolicyOutputWithContext(ctx context.Context) DatabaseIamPolicyOutput
}

func (*DatabaseIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIamPolicy)(nil)).Elem()
}

func (i *DatabaseIamPolicy) ToDatabaseIamPolicyOutput() DatabaseIamPolicyOutput {
	return i.ToDatabaseIamPolicyOutputWithContext(context.Background())
}

func (i *DatabaseIamPolicy) ToDatabaseIamPolicyOutputWithContext(ctx context.Context) DatabaseIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamPolicyOutput)
}

// DatabaseIamPolicyArrayInput is an input type that accepts DatabaseIamPolicyArray and DatabaseIamPolicyArrayOutput values.
// You can construct a concrete instance of `DatabaseIamPolicyArrayInput` via:
//
//	DatabaseIamPolicyArray{ DatabaseIamPolicyArgs{...} }
type DatabaseIamPolicyArrayInput interface {
	pulumi.Input

	ToDatabaseIamPolicyArrayOutput() DatabaseIamPolicyArrayOutput
	ToDatabaseIamPolicyArrayOutputWithContext(context.Context) DatabaseIamPolicyArrayOutput
}

type DatabaseIamPolicyArray []DatabaseIamPolicyInput

func (DatabaseIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseIamPolicy)(nil)).Elem()
}

func (i DatabaseIamPolicyArray) ToDatabaseIamPolicyArrayOutput() DatabaseIamPolicyArrayOutput {
	return i.ToDatabaseIamPolicyArrayOutputWithContext(context.Background())
}

func (i DatabaseIamPolicyArray) ToDatabaseIamPolicyArrayOutputWithContext(ctx context.Context) DatabaseIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamPolicyArrayOutput)
}

// DatabaseIamPolicyMapInput is an input type that accepts DatabaseIamPolicyMap and DatabaseIamPolicyMapOutput values.
// You can construct a concrete instance of `DatabaseIamPolicyMapInput` via:
//
//	DatabaseIamPolicyMap{ "key": DatabaseIamPolicyArgs{...} }
type DatabaseIamPolicyMapInput interface {
	pulumi.Input

	ToDatabaseIamPolicyMapOutput() DatabaseIamPolicyMapOutput
	ToDatabaseIamPolicyMapOutputWithContext(context.Context) DatabaseIamPolicyMapOutput
}

type DatabaseIamPolicyMap map[string]DatabaseIamPolicyInput

func (DatabaseIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseIamPolicy)(nil)).Elem()
}

func (i DatabaseIamPolicyMap) ToDatabaseIamPolicyMapOutput() DatabaseIamPolicyMapOutput {
	return i.ToDatabaseIamPolicyMapOutputWithContext(context.Background())
}

func (i DatabaseIamPolicyMap) ToDatabaseIamPolicyMapOutputWithContext(ctx context.Context) DatabaseIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamPolicyMapOutput)
}

type DatabaseIamPolicyOutput struct{ *pulumi.OutputState }

func (DatabaseIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIamPolicy)(nil)).Elem()
}

func (o DatabaseIamPolicyOutput) ToDatabaseIamPolicyOutput() DatabaseIamPolicyOutput {
	return o
}

func (o DatabaseIamPolicyOutput) ToDatabaseIamPolicyOutputWithContext(ctx context.Context) DatabaseIamPolicyOutput {
	return o
}

// The name of the Spanner database.
func (o DatabaseIamPolicyOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseIamPolicy) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// (Computed) The etag of the database's IAM policy.
func (o DatabaseIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the Spanner instance the database belongs to.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o DatabaseIamPolicyOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseIamPolicy) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIamPolicy` data source.
func (o DatabaseIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o DatabaseIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type DatabaseIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (DatabaseIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseIamPolicy)(nil)).Elem()
}

func (o DatabaseIamPolicyArrayOutput) ToDatabaseIamPolicyArrayOutput() DatabaseIamPolicyArrayOutput {
	return o
}

func (o DatabaseIamPolicyArrayOutput) ToDatabaseIamPolicyArrayOutputWithContext(ctx context.Context) DatabaseIamPolicyArrayOutput {
	return o
}

func (o DatabaseIamPolicyArrayOutput) Index(i pulumi.IntInput) DatabaseIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseIamPolicy {
		return vs[0].([]*DatabaseIamPolicy)[vs[1].(int)]
	}).(DatabaseIamPolicyOutput)
}

type DatabaseIamPolicyMapOutput struct{ *pulumi.OutputState }

func (DatabaseIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseIamPolicy)(nil)).Elem()
}

func (o DatabaseIamPolicyMapOutput) ToDatabaseIamPolicyMapOutput() DatabaseIamPolicyMapOutput {
	return o
}

func (o DatabaseIamPolicyMapOutput) ToDatabaseIamPolicyMapOutputWithContext(ctx context.Context) DatabaseIamPolicyMapOutput {
	return o
}

func (o DatabaseIamPolicyMapOutput) MapIndex(k pulumi.StringInput) DatabaseIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseIamPolicy {
		return vs[0].(map[string]*DatabaseIamPolicy)[vs[1].(string)]
	}).(DatabaseIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamPolicyInput)(nil)).Elem(), &DatabaseIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamPolicyArrayInput)(nil)).Elem(), DatabaseIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamPolicyMapInput)(nil)).Elem(), DatabaseIamPolicyMap{})
	pulumi.RegisterOutputType(DatabaseIamPolicyOutput{})
	pulumi.RegisterOutputType(DatabaseIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(DatabaseIamPolicyMapOutput{})
}
