// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DatabaseEncryptionConfig struct {
	// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
	// in the same location as the Spanner Database.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// DatabaseEncryptionConfigInput is an input type that accepts DatabaseEncryptionConfigArgs and DatabaseEncryptionConfigOutput values.
// You can construct a concrete instance of `DatabaseEncryptionConfigInput` via:
//
//	DatabaseEncryptionConfigArgs{...}
type DatabaseEncryptionConfigInput interface {
	pulumi.Input

	ToDatabaseEncryptionConfigOutput() DatabaseEncryptionConfigOutput
	ToDatabaseEncryptionConfigOutputWithContext(context.Context) DatabaseEncryptionConfigOutput
}

type DatabaseEncryptionConfigArgs struct {
	// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
	// in the same location as the Spanner Database.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatabaseEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionConfig)(nil)).Elem()
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigOutput() DatabaseEncryptionConfigOutput {
	return i.ToDatabaseEncryptionConfigOutputWithContext(context.Background())
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigOutputWithContext(ctx context.Context) DatabaseEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigOutput)
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return i.ToDatabaseEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i DatabaseEncryptionConfigArgs) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigOutput).ToDatabaseEncryptionConfigPtrOutputWithContext(ctx)
}

// DatabaseEncryptionConfigPtrInput is an input type that accepts DatabaseEncryptionConfigArgs, DatabaseEncryptionConfigPtr and DatabaseEncryptionConfigPtrOutput values.
// You can construct a concrete instance of `DatabaseEncryptionConfigPtrInput` via:
//
//	        DatabaseEncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type DatabaseEncryptionConfigPtrInput interface {
	pulumi.Input

	ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput
	ToDatabaseEncryptionConfigPtrOutputWithContext(context.Context) DatabaseEncryptionConfigPtrOutput
}

type databaseEncryptionConfigPtrType DatabaseEncryptionConfigArgs

func DatabaseEncryptionConfigPtr(v *DatabaseEncryptionConfigArgs) DatabaseEncryptionConfigPtrInput {
	return (*databaseEncryptionConfigPtrType)(v)
}

func (*databaseEncryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryptionConfig)(nil)).Elem()
}

func (i *databaseEncryptionConfigPtrType) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return i.ToDatabaseEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *databaseEncryptionConfigPtrType) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionConfigPtrOutput)
}

type DatabaseEncryptionConfigOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionConfig)(nil)).Elem()
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigOutput() DatabaseEncryptionConfigOutput {
	return o
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigOutputWithContext(ctx context.Context) DatabaseEncryptionConfigOutput {
	return o
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return o.ToDatabaseEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o DatabaseEncryptionConfigOutput) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseEncryptionConfig) *DatabaseEncryptionConfig {
		return &v
	}).(DatabaseEncryptionConfigPtrOutput)
}

// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
// in the same location as the Spanner Database.
func (o DatabaseEncryptionConfigOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEncryptionConfig) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatabaseEncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryptionConfig)(nil)).Elem()
}

func (o DatabaseEncryptionConfigPtrOutput) ToDatabaseEncryptionConfigPtrOutput() DatabaseEncryptionConfigPtrOutput {
	return o
}

func (o DatabaseEncryptionConfigPtrOutput) ToDatabaseEncryptionConfigPtrOutputWithContext(ctx context.Context) DatabaseEncryptionConfigPtrOutput {
	return o
}

func (o DatabaseEncryptionConfigPtrOutput) Elem() DatabaseEncryptionConfigOutput {
	return o.ApplyT(func(v *DatabaseEncryptionConfig) DatabaseEncryptionConfig {
		if v != nil {
			return *v
		}
		var ret DatabaseEncryptionConfig
		return ret
	}).(DatabaseEncryptionConfigOutput)
}

// Fully qualified name of the KMS key to use to encrypt this database. This key must exist
// in the same location as the Spanner Database.
func (o DatabaseEncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type DatabaseIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatabaseIamBindingConditionInput is an input type that accepts DatabaseIamBindingConditionArgs and DatabaseIamBindingConditionOutput values.
// You can construct a concrete instance of `DatabaseIamBindingConditionInput` via:
//
//	DatabaseIamBindingConditionArgs{...}
type DatabaseIamBindingConditionInput interface {
	pulumi.Input

	ToDatabaseIamBindingConditionOutput() DatabaseIamBindingConditionOutput
	ToDatabaseIamBindingConditionOutputWithContext(context.Context) DatabaseIamBindingConditionOutput
}

type DatabaseIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatabaseIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIamBindingCondition)(nil)).Elem()
}

func (i DatabaseIamBindingConditionArgs) ToDatabaseIamBindingConditionOutput() DatabaseIamBindingConditionOutput {
	return i.ToDatabaseIamBindingConditionOutputWithContext(context.Background())
}

func (i DatabaseIamBindingConditionArgs) ToDatabaseIamBindingConditionOutputWithContext(ctx context.Context) DatabaseIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamBindingConditionOutput)
}

func (i DatabaseIamBindingConditionArgs) ToDatabaseIamBindingConditionPtrOutput() DatabaseIamBindingConditionPtrOutput {
	return i.ToDatabaseIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i DatabaseIamBindingConditionArgs) ToDatabaseIamBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamBindingConditionOutput).ToDatabaseIamBindingConditionPtrOutputWithContext(ctx)
}

// DatabaseIamBindingConditionPtrInput is an input type that accepts DatabaseIamBindingConditionArgs, DatabaseIamBindingConditionPtr and DatabaseIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `DatabaseIamBindingConditionPtrInput` via:
//
//	        DatabaseIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type DatabaseIamBindingConditionPtrInput interface {
	pulumi.Input

	ToDatabaseIamBindingConditionPtrOutput() DatabaseIamBindingConditionPtrOutput
	ToDatabaseIamBindingConditionPtrOutputWithContext(context.Context) DatabaseIamBindingConditionPtrOutput
}

type databaseIamBindingConditionPtrType DatabaseIamBindingConditionArgs

func DatabaseIamBindingConditionPtr(v *DatabaseIamBindingConditionArgs) DatabaseIamBindingConditionPtrInput {
	return (*databaseIamBindingConditionPtrType)(v)
}

func (*databaseIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIamBindingCondition)(nil)).Elem()
}

func (i *databaseIamBindingConditionPtrType) ToDatabaseIamBindingConditionPtrOutput() DatabaseIamBindingConditionPtrOutput {
	return i.ToDatabaseIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *databaseIamBindingConditionPtrType) ToDatabaseIamBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamBindingConditionPtrOutput)
}

type DatabaseIamBindingConditionOutput struct{ *pulumi.OutputState }

func (DatabaseIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIamBindingCondition)(nil)).Elem()
}

func (o DatabaseIamBindingConditionOutput) ToDatabaseIamBindingConditionOutput() DatabaseIamBindingConditionOutput {
	return o
}

func (o DatabaseIamBindingConditionOutput) ToDatabaseIamBindingConditionOutputWithContext(ctx context.Context) DatabaseIamBindingConditionOutput {
	return o
}

func (o DatabaseIamBindingConditionOutput) ToDatabaseIamBindingConditionPtrOutput() DatabaseIamBindingConditionPtrOutput {
	return o.ToDatabaseIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o DatabaseIamBindingConditionOutput) ToDatabaseIamBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIamBindingCondition) *DatabaseIamBindingCondition {
		return &v
	}).(DatabaseIamBindingConditionPtrOutput)
}

func (o DatabaseIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatabaseIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatabaseIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatabaseIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIamBindingCondition)(nil)).Elem()
}

func (o DatabaseIamBindingConditionPtrOutput) ToDatabaseIamBindingConditionPtrOutput() DatabaseIamBindingConditionPtrOutput {
	return o
}

func (o DatabaseIamBindingConditionPtrOutput) ToDatabaseIamBindingConditionPtrOutputWithContext(ctx context.Context) DatabaseIamBindingConditionPtrOutput {
	return o
}

func (o DatabaseIamBindingConditionPtrOutput) Elem() DatabaseIamBindingConditionOutput {
	return o.ApplyT(func(v *DatabaseIamBindingCondition) DatabaseIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret DatabaseIamBindingCondition
		return ret
	}).(DatabaseIamBindingConditionOutput)
}

func (o DatabaseIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DatabaseIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatabaseIamMemberConditionInput is an input type that accepts DatabaseIamMemberConditionArgs and DatabaseIamMemberConditionOutput values.
// You can construct a concrete instance of `DatabaseIamMemberConditionInput` via:
//
//	DatabaseIamMemberConditionArgs{...}
type DatabaseIamMemberConditionInput interface {
	pulumi.Input

	ToDatabaseIamMemberConditionOutput() DatabaseIamMemberConditionOutput
	ToDatabaseIamMemberConditionOutputWithContext(context.Context) DatabaseIamMemberConditionOutput
}

type DatabaseIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatabaseIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIamMemberCondition)(nil)).Elem()
}

func (i DatabaseIamMemberConditionArgs) ToDatabaseIamMemberConditionOutput() DatabaseIamMemberConditionOutput {
	return i.ToDatabaseIamMemberConditionOutputWithContext(context.Background())
}

func (i DatabaseIamMemberConditionArgs) ToDatabaseIamMemberConditionOutputWithContext(ctx context.Context) DatabaseIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamMemberConditionOutput)
}

func (i DatabaseIamMemberConditionArgs) ToDatabaseIamMemberConditionPtrOutput() DatabaseIamMemberConditionPtrOutput {
	return i.ToDatabaseIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i DatabaseIamMemberConditionArgs) ToDatabaseIamMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamMemberConditionOutput).ToDatabaseIamMemberConditionPtrOutputWithContext(ctx)
}

// DatabaseIamMemberConditionPtrInput is an input type that accepts DatabaseIamMemberConditionArgs, DatabaseIamMemberConditionPtr and DatabaseIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `DatabaseIamMemberConditionPtrInput` via:
//
//	        DatabaseIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type DatabaseIamMemberConditionPtrInput interface {
	pulumi.Input

	ToDatabaseIamMemberConditionPtrOutput() DatabaseIamMemberConditionPtrOutput
	ToDatabaseIamMemberConditionPtrOutputWithContext(context.Context) DatabaseIamMemberConditionPtrOutput
}

type databaseIamMemberConditionPtrType DatabaseIamMemberConditionArgs

func DatabaseIamMemberConditionPtr(v *DatabaseIamMemberConditionArgs) DatabaseIamMemberConditionPtrInput {
	return (*databaseIamMemberConditionPtrType)(v)
}

func (*databaseIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIamMemberCondition)(nil)).Elem()
}

func (i *databaseIamMemberConditionPtrType) ToDatabaseIamMemberConditionPtrOutput() DatabaseIamMemberConditionPtrOutput {
	return i.ToDatabaseIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *databaseIamMemberConditionPtrType) ToDatabaseIamMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIamMemberConditionPtrOutput)
}

type DatabaseIamMemberConditionOutput struct{ *pulumi.OutputState }

func (DatabaseIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIamMemberCondition)(nil)).Elem()
}

func (o DatabaseIamMemberConditionOutput) ToDatabaseIamMemberConditionOutput() DatabaseIamMemberConditionOutput {
	return o
}

func (o DatabaseIamMemberConditionOutput) ToDatabaseIamMemberConditionOutputWithContext(ctx context.Context) DatabaseIamMemberConditionOutput {
	return o
}

func (o DatabaseIamMemberConditionOutput) ToDatabaseIamMemberConditionPtrOutput() DatabaseIamMemberConditionPtrOutput {
	return o.ToDatabaseIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o DatabaseIamMemberConditionOutput) ToDatabaseIamMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIamMemberCondition) *DatabaseIamMemberCondition {
		return &v
	}).(DatabaseIamMemberConditionPtrOutput)
}

func (o DatabaseIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatabaseIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatabaseIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatabaseIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIamMemberCondition)(nil)).Elem()
}

func (o DatabaseIamMemberConditionPtrOutput) ToDatabaseIamMemberConditionPtrOutput() DatabaseIamMemberConditionPtrOutput {
	return o
}

func (o DatabaseIamMemberConditionPtrOutput) ToDatabaseIamMemberConditionPtrOutputWithContext(ctx context.Context) DatabaseIamMemberConditionPtrOutput {
	return o
}

func (o DatabaseIamMemberConditionPtrOutput) Elem() DatabaseIamMemberConditionOutput {
	return o.ApplyT(func(v *DatabaseIamMemberCondition) DatabaseIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret DatabaseIamMemberCondition
		return ret
	}).(DatabaseIamMemberConditionOutput)
}

func (o DatabaseIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// InstanceIamBindingConditionInput is an input type that accepts InstanceIamBindingConditionArgs and InstanceIamBindingConditionOutput values.
// You can construct a concrete instance of `InstanceIamBindingConditionInput` via:
//
//	InstanceIamBindingConditionArgs{...}
type InstanceIamBindingConditionInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput
	ToInstanceIamBindingConditionOutputWithContext(context.Context) InstanceIamBindingConditionOutput
}

type InstanceIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingCondition)(nil)).Elem()
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput {
	return i.ToInstanceIamBindingConditionOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionOutputWithContext(ctx context.Context) InstanceIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionOutput)
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return i.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIamBindingConditionArgs) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionOutput).ToInstanceIamBindingConditionPtrOutputWithContext(ctx)
}

// InstanceIamBindingConditionPtrInput is an input type that accepts InstanceIamBindingConditionArgs, InstanceIamBindingConditionPtr and InstanceIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIamBindingConditionPtrInput` via:
//
//	        InstanceIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type InstanceIamBindingConditionPtrInput interface {
	pulumi.Input

	ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput
	ToInstanceIamBindingConditionPtrOutputWithContext(context.Context) InstanceIamBindingConditionPtrOutput
}

type instanceIamBindingConditionPtrType InstanceIamBindingConditionArgs

func InstanceIamBindingConditionPtr(v *InstanceIamBindingConditionArgs) InstanceIamBindingConditionPtrInput {
	return (*instanceIamBindingConditionPtrType)(v)
}

func (*instanceIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingCondition)(nil)).Elem()
}

func (i *instanceIamBindingConditionPtrType) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return i.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIamBindingConditionPtrType) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamBindingConditionPtrOutput)
}

type InstanceIamBindingConditionOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamBindingCondition)(nil)).Elem()
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionOutput() InstanceIamBindingConditionOutput {
	return o
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionOutputWithContext(ctx context.Context) InstanceIamBindingConditionOutput {
	return o
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return o.ToInstanceIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIamBindingConditionOutput) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceIamBindingCondition) *InstanceIamBindingCondition {
		return &v
	}).(InstanceIamBindingConditionPtrOutput)
}

func (o InstanceIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamBindingCondition)(nil)).Elem()
}

func (o InstanceIamBindingConditionPtrOutput) ToInstanceIamBindingConditionPtrOutput() InstanceIamBindingConditionPtrOutput {
	return o
}

func (o InstanceIamBindingConditionPtrOutput) ToInstanceIamBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIamBindingConditionPtrOutput {
	return o
}

func (o InstanceIamBindingConditionPtrOutput) Elem() InstanceIamBindingConditionOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) InstanceIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret InstanceIamBindingCondition
		return ret
	}).(InstanceIamBindingConditionOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// InstanceIamMemberConditionInput is an input type that accepts InstanceIamMemberConditionArgs and InstanceIamMemberConditionOutput values.
// You can construct a concrete instance of `InstanceIamMemberConditionInput` via:
//
//	InstanceIamMemberConditionArgs{...}
type InstanceIamMemberConditionInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput
	ToInstanceIamMemberConditionOutputWithContext(context.Context) InstanceIamMemberConditionOutput
}

type InstanceIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (InstanceIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberCondition)(nil)).Elem()
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput {
	return i.ToInstanceIamMemberConditionOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionOutputWithContext(ctx context.Context) InstanceIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionOutput)
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return i.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIamMemberConditionArgs) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionOutput).ToInstanceIamMemberConditionPtrOutputWithContext(ctx)
}

// InstanceIamMemberConditionPtrInput is an input type that accepts InstanceIamMemberConditionArgs, InstanceIamMemberConditionPtr and InstanceIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIamMemberConditionPtrInput` via:
//
//	        InstanceIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type InstanceIamMemberConditionPtrInput interface {
	pulumi.Input

	ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput
	ToInstanceIamMemberConditionPtrOutputWithContext(context.Context) InstanceIamMemberConditionPtrOutput
}

type instanceIamMemberConditionPtrType InstanceIamMemberConditionArgs

func InstanceIamMemberConditionPtr(v *InstanceIamMemberConditionArgs) InstanceIamMemberConditionPtrInput {
	return (*instanceIamMemberConditionPtrType)(v)
}

func (*instanceIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberCondition)(nil)).Elem()
}

func (i *instanceIamMemberConditionPtrType) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return i.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIamMemberConditionPtrType) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIamMemberConditionPtrOutput)
}

type InstanceIamMemberConditionOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIamMemberCondition)(nil)).Elem()
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionOutput() InstanceIamMemberConditionOutput {
	return o
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionOutputWithContext(ctx context.Context) InstanceIamMemberConditionOutput {
	return o
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return o.ToInstanceIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIamMemberConditionOutput) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceIamMemberCondition) *InstanceIamMemberCondition {
		return &v
	}).(InstanceIamMemberConditionPtrOutput)
}

func (o InstanceIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o InstanceIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIamMemberCondition)(nil)).Elem()
}

func (o InstanceIamMemberConditionPtrOutput) ToInstanceIamMemberConditionPtrOutput() InstanceIamMemberConditionPtrOutput {
	return o
}

func (o InstanceIamMemberConditionPtrOutput) ToInstanceIamMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIamMemberConditionPtrOutput {
	return o
}

func (o InstanceIamMemberConditionPtrOutput) Elem() InstanceIamMemberConditionOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) InstanceIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret InstanceIamMemberCondition
		return ret
	}).(InstanceIamMemberConditionOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o InstanceIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseEncryptionConfigInput)(nil)).Elem(), DatabaseEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseEncryptionConfigPtrInput)(nil)).Elem(), DatabaseEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamBindingConditionInput)(nil)).Elem(), DatabaseIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamBindingConditionPtrInput)(nil)).Elem(), DatabaseIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamMemberConditionInput)(nil)).Elem(), DatabaseIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIamMemberConditionPtrInput)(nil)).Elem(), DatabaseIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingConditionInput)(nil)).Elem(), InstanceIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamBindingConditionPtrInput)(nil)).Elem(), InstanceIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamMemberConditionInput)(nil)).Elem(), InstanceIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIamMemberConditionPtrInput)(nil)).Elem(), InstanceIamMemberConditionArgs{})
	pulumi.RegisterOutputType(DatabaseEncryptionConfigOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(DatabaseIamBindingConditionOutput{})
	pulumi.RegisterOutputType(DatabaseIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseIamMemberConditionOutput{})
	pulumi.RegisterOutputType(DatabaseIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionOutput{})
	pulumi.RegisterOutputType(InstanceIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionOutput{})
	pulumi.RegisterOutputType(InstanceIamMemberConditionPtrOutput{})
}
