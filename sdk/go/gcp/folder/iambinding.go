// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package folder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows creation and management of a single binding within IAM policy for
// an existing Google Cloud Platform folder.
//
// > **Note:** This resource _must not_ be used in conjunction with
//
//	`folder.IamPolicy` or they will fight over what your policy
//	should be.
//
// > **Note:** On create, this resource will overwrite members of any existing roles.
//
//	Use `pulumi import` and inspect the output to ensure
//	your existing members are preserved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/folder"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			department1, err := organizations.NewFolder(ctx, "department1", &organizations.FolderArgs{
//				DisplayName: pulumi.String("Department 1"),
//				Parent:      pulumi.String("organizations/1234567"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = folder.NewIamBinding(ctx, "admin", &folder.IamBindingArgs{
//				Folder: department1.Name,
//				Role:   pulumi.String("roles/editor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:alice@gmail.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IAM binding imports use space-delimited identifiers; first the resource in question and then the role.
//
// These bindings can be imported using the `folder` and role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:folder/iamBinding:IamBinding viewer "folder-name roles/viewer"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM binding with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type IamBinding struct {
	pulumi.CustomResourceState

	Condition IamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the folder's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The resource name of the folder the policy is attached to. Its format is folders/{folder_id}.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// An array of identities that will be granted the privilege in the `role`.
	// Each entry can have one of the following values:
	// * **user:{emailid}**: An email address that is associated with a specific Google account. For example, alice@gmail.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `folder.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewIamBinding registers a new resource with the given unique name, arguments, and options.
func NewIamBinding(ctx *pulumi.Context,
	name string, args *IamBindingArgs, opts ...pulumi.ResourceOption) (*IamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamBinding
	err := ctx.RegisterResource("gcp:folder/iamBinding:IamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamBinding gets an existing IamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamBindingState, opts ...pulumi.ResourceOption) (*IamBinding, error) {
	var resource IamBinding
	err := ctx.ReadResource("gcp:folder/iamBinding:IamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamBinding resources.
type iamBindingState struct {
	Condition *IamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the folder's IAM policy.
	Etag *string `pulumi:"etag"`
	// The resource name of the folder the policy is attached to. Its format is folders/{folder_id}.
	Folder *string `pulumi:"folder"`
	// An array of identities that will be granted the privilege in the `role`.
	// Each entry can have one of the following values:
	// * **user:{emailid}**: An email address that is associated with a specific Google account. For example, alice@gmail.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `folder.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type IamBindingState struct {
	Condition IamBindingConditionPtrInput
	// (Computed) The etag of the folder's IAM policy.
	Etag pulumi.StringPtrInput
	// The resource name of the folder the policy is attached to. Its format is folders/{folder_id}.
	Folder pulumi.StringPtrInput
	// An array of identities that will be granted the privilege in the `role`.
	// Each entry can have one of the following values:
	// * **user:{emailid}**: An email address that is associated with a specific Google account. For example, alice@gmail.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `folder.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (IamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamBindingState)(nil)).Elem()
}

type iamBindingArgs struct {
	Condition *IamBindingCondition `pulumi:"condition"`
	// The resource name of the folder the policy is attached to. Its format is folders/{folder_id}.
	Folder string `pulumi:"folder"`
	// An array of identities that will be granted the privilege in the `role`.
	// Each entry can have one of the following values:
	// * **user:{emailid}**: An email address that is associated with a specific Google account. For example, alice@gmail.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `folder.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a IamBinding resource.
type IamBindingArgs struct {
	Condition IamBindingConditionPtrInput
	// The resource name of the folder the policy is attached to. Its format is folders/{folder_id}.
	Folder pulumi.StringInput
	// An array of identities that will be granted the privilege in the `role`.
	// Each entry can have one of the following values:
	// * **user:{emailid}**: An email address that is associated with a specific Google account. For example, alice@gmail.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `folder.IamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (IamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamBindingArgs)(nil)).Elem()
}

type IamBindingInput interface {
	pulumi.Input

	ToIamBindingOutput() IamBindingOutput
	ToIamBindingOutputWithContext(ctx context.Context) IamBindingOutput
}

func (*IamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**IamBinding)(nil)).Elem()
}

func (i *IamBinding) ToIamBindingOutput() IamBindingOutput {
	return i.ToIamBindingOutputWithContext(context.Background())
}

func (i *IamBinding) ToIamBindingOutputWithContext(ctx context.Context) IamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBindingOutput)
}

// IamBindingArrayInput is an input type that accepts IamBindingArray and IamBindingArrayOutput values.
// You can construct a concrete instance of `IamBindingArrayInput` via:
//
//	IamBindingArray{ IamBindingArgs{...} }
type IamBindingArrayInput interface {
	pulumi.Input

	ToIamBindingArrayOutput() IamBindingArrayOutput
	ToIamBindingArrayOutputWithContext(context.Context) IamBindingArrayOutput
}

type IamBindingArray []IamBindingInput

func (IamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamBinding)(nil)).Elem()
}

func (i IamBindingArray) ToIamBindingArrayOutput() IamBindingArrayOutput {
	return i.ToIamBindingArrayOutputWithContext(context.Background())
}

func (i IamBindingArray) ToIamBindingArrayOutputWithContext(ctx context.Context) IamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBindingArrayOutput)
}

// IamBindingMapInput is an input type that accepts IamBindingMap and IamBindingMapOutput values.
// You can construct a concrete instance of `IamBindingMapInput` via:
//
//	IamBindingMap{ "key": IamBindingArgs{...} }
type IamBindingMapInput interface {
	pulumi.Input

	ToIamBindingMapOutput() IamBindingMapOutput
	ToIamBindingMapOutputWithContext(context.Context) IamBindingMapOutput
}

type IamBindingMap map[string]IamBindingInput

func (IamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamBinding)(nil)).Elem()
}

func (i IamBindingMap) ToIamBindingMapOutput() IamBindingMapOutput {
	return i.ToIamBindingMapOutputWithContext(context.Background())
}

func (i IamBindingMap) ToIamBindingMapOutputWithContext(ctx context.Context) IamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBindingMapOutput)
}

type IamBindingOutput struct{ *pulumi.OutputState }

func (IamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamBinding)(nil)).Elem()
}

func (o IamBindingOutput) ToIamBindingOutput() IamBindingOutput {
	return o
}

func (o IamBindingOutput) ToIamBindingOutputWithContext(ctx context.Context) IamBindingOutput {
	return o
}

func (o IamBindingOutput) Condition() IamBindingConditionPtrOutput {
	return o.ApplyT(func(v *IamBinding) IamBindingConditionPtrOutput { return v.Condition }).(IamBindingConditionPtrOutput)
}

// (Computed) The etag of the folder's IAM policy.
func (o IamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *IamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The resource name of the folder the policy is attached to. Its format is folders/{folder_id}.
func (o IamBindingOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *IamBinding) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// An array of identities that will be granted the privilege in the `role`.
// Each entry can have one of the following values:
// * **user:{emailid}**: An email address that is associated with a specific Google account. For example, alice@gmail.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * For more details on format and restrictions see https://cloud.google.com/billing/reference/rest/v1/Policy#Binding
func (o IamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. Only one
// `folder.IamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o IamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *IamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type IamBindingArrayOutput struct{ *pulumi.OutputState }

func (IamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamBinding)(nil)).Elem()
}

func (o IamBindingArrayOutput) ToIamBindingArrayOutput() IamBindingArrayOutput {
	return o
}

func (o IamBindingArrayOutput) ToIamBindingArrayOutputWithContext(ctx context.Context) IamBindingArrayOutput {
	return o
}

func (o IamBindingArrayOutput) Index(i pulumi.IntInput) IamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamBinding {
		return vs[0].([]*IamBinding)[vs[1].(int)]
	}).(IamBindingOutput)
}

type IamBindingMapOutput struct{ *pulumi.OutputState }

func (IamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamBinding)(nil)).Elem()
}

func (o IamBindingMapOutput) ToIamBindingMapOutput() IamBindingMapOutput {
	return o
}

func (o IamBindingMapOutput) ToIamBindingMapOutputWithContext(ctx context.Context) IamBindingMapOutput {
	return o
}

func (o IamBindingMapOutput) MapIndex(k pulumi.StringInput) IamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamBinding {
		return vs[0].(map[string]*IamBinding)[vs[1].(string)]
	}).(IamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamBindingInput)(nil)).Elem(), &IamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamBindingArrayInput)(nil)).Elem(), IamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamBindingMapInput)(nil)).Elem(), IamBindingMap{})
	pulumi.RegisterOutputType(IamBindingOutput{})
	pulumi.RegisterOutputType(IamBindingArrayOutput{})
	pulumi.RegisterOutputType(IamBindingMapOutput{})
}
