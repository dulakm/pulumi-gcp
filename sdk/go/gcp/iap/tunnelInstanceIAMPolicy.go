// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Identity-Aware Proxy TunnelInstance. Each of these resources serves a different use case:
//
// * `iap.TunnelInstanceIamPolicy`: Authoritative. Sets the IAM policy for the tunnelinstance and replaces any existing policy already attached.
// * `iap.TunnelInstanceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tunnelinstance are preserved.
// * `iap.TunnelInstanceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tunnelinstance are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iap.TunnelInstanceIamPolicy`: Retrieves the IAM policy for the tunnelinstance
//
// > **Note:** `iap.TunnelInstanceIamPolicy` **cannot** be used in conjunction with `iap.TunnelInstanceIamBinding` and `iap.TunnelInstanceIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iap.TunnelInstanceIamBinding` resources **can be** used in conjunction with `iap.TunnelInstanceIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## google\_iap\_tunnel\_instance\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/iap.tunnelResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewTunnelInstanceIamPolicy(ctx, "policy", &iap.TunnelInstanceIamPolicyArgs{
//				Project:    pulumi.Any(google_compute_instance.Tunnelvm.Project),
//				Zone:       pulumi.Any(google_compute_instance.Tunnelvm.Zone),
//				Instance:   pulumi.Any(google_compute_instance.Tunnelvm.Name),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/iap.tunnelResourceAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iap.NewTunnelInstanceIamPolicy(ctx, "policy", &iap.TunnelInstanceIamPolicyArgs{
//				Project:    pulumi.Any(google_compute_instance.Tunnelvm.Project),
//				Zone:       pulumi.Any(google_compute_instance.Tunnelvm.Zone),
//				Instance:   pulumi.Any(google_compute_instance.Tunnelvm.Name),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## google\_iap\_tunnel\_instance\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelInstanceIamBinding(ctx, "binding", &iap.TunnelInstanceIamBindingArgs{
//				Project:  pulumi.Any(google_compute_instance.Tunnelvm.Project),
//				Zone:     pulumi.Any(google_compute_instance.Tunnelvm.Zone),
//				Instance: pulumi.Any(google_compute_instance.Tunnelvm.Name),
//				Role:     pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelInstanceIamBinding(ctx, "binding", &iap.TunnelInstanceIamBindingArgs{
//				Project:  pulumi.Any(google_compute_instance.Tunnelvm.Project),
//				Zone:     pulumi.Any(google_compute_instance.Tunnelvm.Zone),
//				Instance: pulumi.Any(google_compute_instance.Tunnelvm.Name),
//				Role:     pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &iap.TunnelInstanceIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## google\_iap\_tunnel\_instance\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelInstanceIamMember(ctx, "member", &iap.TunnelInstanceIamMemberArgs{
//				Project:  pulumi.Any(google_compute_instance.Tunnelvm.Project),
//				Zone:     pulumi.Any(google_compute_instance.Tunnelvm.Zone),
//				Instance: pulumi.Any(google_compute_instance.Tunnelvm.Name),
//				Role:     pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iap.NewTunnelInstanceIamMember(ctx, "member", &iap.TunnelInstanceIamMemberArgs{
//				Project:  pulumi.Any(google_compute_instance.Tunnelvm.Project),
//				Zone:     pulumi.Any(google_compute_instance.Tunnelvm.Zone),
//				Instance: pulumi.Any(google_compute_instance.Tunnelvm.Name),
//				Role:     pulumi.String("roles/iap.tunnelResourceAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &iap.TunnelInstanceIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/iap_tunnel/zones/{{zone}}/instances/{{name}} * projects/{{project}}/zones/{{zone}}/instances/{{name}} * {{project}}/{{zone}}/{{name}} * {{zone}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Identity-Aware Proxy tunnelinstance IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iap/tunnelInstanceIamPolicy:TunnelInstanceIamPolicy editor "projects/{{project}}/iap_tunnel/zones/{{zone}}/instances/{{tunnel_instance}} roles/iap.tunnelResourceAccessor user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iap/tunnelInstanceIamPolicy:TunnelInstanceIamPolicy editor "projects/{{project}}/iap_tunnel/zones/{{zone}}/instances/{{tunnel_instance}} roles/iap.tunnelResourceAccessor"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:iap/tunnelInstanceIamPolicy:TunnelInstanceIamPolicy editor projects/{{project}}/iap_tunnel/zones/{{zone}}/instances/{{tunnel_instance}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type TunnelInstanceIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	Zone    pulumi.StringOutput `pulumi:"zone"`
}

// NewTunnelInstanceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTunnelInstanceIamPolicy(ctx *pulumi.Context,
	name string, args *TunnelInstanceIamPolicyArgs, opts ...pulumi.ResourceOption) (*TunnelInstanceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TunnelInstanceIamPolicy
	err := ctx.RegisterResource("gcp:iap/tunnelInstanceIamPolicy:TunnelInstanceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnelInstanceIamPolicy gets an existing TunnelInstanceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnelInstanceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelInstanceIamPolicyState, opts ...pulumi.ResourceOption) (*TunnelInstanceIamPolicy, error) {
	var resource TunnelInstanceIamPolicy
	err := ctx.ReadResource("gcp:iap/tunnelInstanceIamPolicy:TunnelInstanceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TunnelInstanceIamPolicy resources.
type tunnelInstanceIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Instance *string `pulumi:"instance"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	Zone    *string `pulumi:"zone"`
}

type TunnelInstanceIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Instance pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	Zone    pulumi.StringPtrInput
}

func (TunnelInstanceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelInstanceIamPolicyState)(nil)).Elem()
}

type tunnelInstanceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Instance string `pulumi:"instance"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	Zone    *string `pulumi:"zone"`
}

// The set of arguments for constructing a TunnelInstanceIamPolicy resource.
type TunnelInstanceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Instance pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	Zone    pulumi.StringPtrInput
}

func (TunnelInstanceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelInstanceIamPolicyArgs)(nil)).Elem()
}

type TunnelInstanceIamPolicyInput interface {
	pulumi.Input

	ToTunnelInstanceIamPolicyOutput() TunnelInstanceIamPolicyOutput
	ToTunnelInstanceIamPolicyOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyOutput
}

func (*TunnelInstanceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIamPolicy)(nil)).Elem()
}

func (i *TunnelInstanceIamPolicy) ToTunnelInstanceIamPolicyOutput() TunnelInstanceIamPolicyOutput {
	return i.ToTunnelInstanceIamPolicyOutputWithContext(context.Background())
}

func (i *TunnelInstanceIamPolicy) ToTunnelInstanceIamPolicyOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIamPolicyOutput)
}

// TunnelInstanceIamPolicyArrayInput is an input type that accepts TunnelInstanceIamPolicyArray and TunnelInstanceIamPolicyArrayOutput values.
// You can construct a concrete instance of `TunnelInstanceIamPolicyArrayInput` via:
//
//	TunnelInstanceIamPolicyArray{ TunnelInstanceIamPolicyArgs{...} }
type TunnelInstanceIamPolicyArrayInput interface {
	pulumi.Input

	ToTunnelInstanceIamPolicyArrayOutput() TunnelInstanceIamPolicyArrayOutput
	ToTunnelInstanceIamPolicyArrayOutputWithContext(context.Context) TunnelInstanceIamPolicyArrayOutput
}

type TunnelInstanceIamPolicyArray []TunnelInstanceIamPolicyInput

func (TunnelInstanceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelInstanceIamPolicy)(nil)).Elem()
}

func (i TunnelInstanceIamPolicyArray) ToTunnelInstanceIamPolicyArrayOutput() TunnelInstanceIamPolicyArrayOutput {
	return i.ToTunnelInstanceIamPolicyArrayOutputWithContext(context.Background())
}

func (i TunnelInstanceIamPolicyArray) ToTunnelInstanceIamPolicyArrayOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIamPolicyArrayOutput)
}

// TunnelInstanceIamPolicyMapInput is an input type that accepts TunnelInstanceIamPolicyMap and TunnelInstanceIamPolicyMapOutput values.
// You can construct a concrete instance of `TunnelInstanceIamPolicyMapInput` via:
//
//	TunnelInstanceIamPolicyMap{ "key": TunnelInstanceIamPolicyArgs{...} }
type TunnelInstanceIamPolicyMapInput interface {
	pulumi.Input

	ToTunnelInstanceIamPolicyMapOutput() TunnelInstanceIamPolicyMapOutput
	ToTunnelInstanceIamPolicyMapOutputWithContext(context.Context) TunnelInstanceIamPolicyMapOutput
}

type TunnelInstanceIamPolicyMap map[string]TunnelInstanceIamPolicyInput

func (TunnelInstanceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelInstanceIamPolicy)(nil)).Elem()
}

func (i TunnelInstanceIamPolicyMap) ToTunnelInstanceIamPolicyMapOutput() TunnelInstanceIamPolicyMapOutput {
	return i.ToTunnelInstanceIamPolicyMapOutputWithContext(context.Background())
}

func (i TunnelInstanceIamPolicyMap) ToTunnelInstanceIamPolicyMapOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelInstanceIamPolicyMapOutput)
}

type TunnelInstanceIamPolicyOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelInstanceIamPolicy)(nil)).Elem()
}

func (o TunnelInstanceIamPolicyOutput) ToTunnelInstanceIamPolicyOutput() TunnelInstanceIamPolicyOutput {
	return o
}

func (o TunnelInstanceIamPolicyOutput) ToTunnelInstanceIamPolicyOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o TunnelInstanceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelInstanceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o TunnelInstanceIamPolicyOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelInstanceIamPolicy) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIamPolicy` data source.
func (o TunnelInstanceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelInstanceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o TunnelInstanceIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelInstanceIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TunnelInstanceIamPolicyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelInstanceIamPolicy) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type TunnelInstanceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelInstanceIamPolicy)(nil)).Elem()
}

func (o TunnelInstanceIamPolicyArrayOutput) ToTunnelInstanceIamPolicyArrayOutput() TunnelInstanceIamPolicyArrayOutput {
	return o
}

func (o TunnelInstanceIamPolicyArrayOutput) ToTunnelInstanceIamPolicyArrayOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyArrayOutput {
	return o
}

func (o TunnelInstanceIamPolicyArrayOutput) Index(i pulumi.IntInput) TunnelInstanceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TunnelInstanceIamPolicy {
		return vs[0].([]*TunnelInstanceIamPolicy)[vs[1].(int)]
	}).(TunnelInstanceIamPolicyOutput)
}

type TunnelInstanceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (TunnelInstanceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelInstanceIamPolicy)(nil)).Elem()
}

func (o TunnelInstanceIamPolicyMapOutput) ToTunnelInstanceIamPolicyMapOutput() TunnelInstanceIamPolicyMapOutput {
	return o
}

func (o TunnelInstanceIamPolicyMapOutput) ToTunnelInstanceIamPolicyMapOutputWithContext(ctx context.Context) TunnelInstanceIamPolicyMapOutput {
	return o
}

func (o TunnelInstanceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) TunnelInstanceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TunnelInstanceIamPolicy {
		return vs[0].(map[string]*TunnelInstanceIamPolicy)[vs[1].(string)]
	}).(TunnelInstanceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelInstanceIamPolicyInput)(nil)).Elem(), &TunnelInstanceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelInstanceIamPolicyArrayInput)(nil)).Elem(), TunnelInstanceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelInstanceIamPolicyMapInput)(nil)).Elem(), TunnelInstanceIamPolicyMap{})
	pulumi.RegisterOutputType(TunnelInstanceIamPolicyOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(TunnelInstanceIamPolicyMapOutput{})
}
