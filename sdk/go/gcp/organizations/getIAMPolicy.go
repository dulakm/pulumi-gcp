// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generates an IAM policy document that may be referenced by and applied to
// other Google Cloud Platform IAM resources, such as the `projects.IamPolicy` resource.
//
// **Note:** Please review the documentation of the resource that you will be using the datasource with. Some resources such as `projects.IamPolicy` and others have limitations in their API methods which are noted on their respective page.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				AuditConfigs: []organizations.GetIamPolicyAuditConfig{
//					{
//						AuditLogConfigs: []organizations.GetIamPolicyAuditConfigAuditLogConfig{
//							{
//								ExemptedMembers: []string{
//									"user:you@domain.com",
//								},
//								LogType: "DATA_READ",
//							},
//							{
//								LogType: "DATA_WRITE",
//							},
//							{
//								LogType: "ADMIN_READ",
//							},
//						},
//						Service: "cloudkms.googleapis.com",
//					},
//				},
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Members: []string{
//							"serviceAccount:your-custom-sa@your-project.iam.gserviceaccount.com",
//						},
//						Role: "roles/compute.instanceAdmin",
//					},
//					{
//						Members: []string{
//							"user:alice@gmail.com",
//						},
//						Role: "roles/storage.objectViewer",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This data source is used to define IAM policies to apply to other resources.
// Currently, defining a policy through a datasource and referencing that policy
// from another resource is the only way to apply an IAM policy to a resource.
func LookupIamPolicy(ctx *pulumi.Context, args *LookupIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIamPolicyResult
	err := ctx.Invoke("gcp:organizations/getIamPolicy:getIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIamPolicy.
type LookupIamPolicyArgs struct {
	// A nested configuration block that defines logging additional configuration for your project. This field is only supported on `projects.IamPolicy`, `folder.IamPolicy` and `organizations.IamPolicy`.
	AuditConfigs []GetIamPolicyAuditConfig `pulumi:"auditConfigs"`
	// A nested configuration block (described below)
	// defining a binding to be included in the policy document. Multiple
	// `binding` arguments are supported.
	//
	// Each document configuration must have one or more `binding` blocks, which
	// each accept the following arguments:
	Bindings []GetIamPolicyBinding `pulumi:"bindings"`
}

// A collection of values returned by getIamPolicy.
type LookupIamPolicyResult struct {
	AuditConfigs []GetIamPolicyAuditConfig `pulumi:"auditConfigs"`
	Bindings     []GetIamPolicyBinding     `pulumi:"bindings"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The above bindings serialized in a format suitable for
	// referencing from a resource that supports IAM.
	PolicyData string `pulumi:"policyData"`
}

func LookupIamPolicyOutput(ctx *pulumi.Context, args LookupIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIamPolicyResult, error) {
			args := v.(LookupIamPolicyArgs)
			r, err := LookupIamPolicy(ctx, &args, opts...)
			var s LookupIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIamPolicyResultOutput)
}

// A collection of arguments for invoking getIamPolicy.
type LookupIamPolicyOutputArgs struct {
	// A nested configuration block that defines logging additional configuration for your project. This field is only supported on `projects.IamPolicy`, `folder.IamPolicy` and `organizations.IamPolicy`.
	AuditConfigs GetIamPolicyAuditConfigArrayInput `pulumi:"auditConfigs"`
	// A nested configuration block (described below)
	// defining a binding to be included in the policy document. Multiple
	// `binding` arguments are supported.
	//
	// Each document configuration must have one or more `binding` blocks, which
	// each accept the following arguments:
	Bindings GetIamPolicyBindingArrayInput `pulumi:"bindings"`
}

func (LookupIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getIamPolicy.
type LookupIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamPolicyResult)(nil)).Elem()
}

func (o LookupIamPolicyResultOutput) ToLookupIamPolicyResultOutput() LookupIamPolicyResultOutput {
	return o
}

func (o LookupIamPolicyResultOutput) ToLookupIamPolicyResultOutputWithContext(ctx context.Context) LookupIamPolicyResultOutput {
	return o
}

func (o LookupIamPolicyResultOutput) AuditConfigs() GetIamPolicyAuditConfigArrayOutput {
	return o.ApplyT(func(v LookupIamPolicyResult) []GetIamPolicyAuditConfig { return v.AuditConfigs }).(GetIamPolicyAuditConfigArrayOutput)
}

func (o LookupIamPolicyResultOutput) Bindings() GetIamPolicyBindingArrayOutput {
	return o.ApplyT(func(v LookupIamPolicyResult) []GetIamPolicyBinding { return v.Bindings }).(GetIamPolicyBindingArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The above bindings serialized in a format suitable for
// referencing from a resource that supports IAM.
func (o LookupIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIamPolicyResultOutput{})
}
