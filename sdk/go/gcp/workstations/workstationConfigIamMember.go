// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkstationConfigIamMember struct {
	pulumi.CustomResourceState

	Condition            WorkstationConfigIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                 pulumi.StringOutput                          `pulumi:"etag"`
	Location             pulumi.StringOutput                          `pulumi:"location"`
	Member               pulumi.StringOutput                          `pulumi:"member"`
	Project              pulumi.StringOutput                          `pulumi:"project"`
	Role                 pulumi.StringOutput                          `pulumi:"role"`
	WorkstationClusterId pulumi.StringOutput                          `pulumi:"workstationClusterId"`
	WorkstationConfigId  pulumi.StringOutput                          `pulumi:"workstationConfigId"`
}

// NewWorkstationConfigIamMember registers a new resource with the given unique name, arguments, and options.
func NewWorkstationConfigIamMember(ctx *pulumi.Context,
	name string, args *WorkstationConfigIamMemberArgs, opts ...pulumi.ResourceOption) (*WorkstationConfigIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	var resource WorkstationConfigIamMember
	err := ctx.RegisterResource("gcp:workstations/workstationConfigIamMember:WorkstationConfigIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationConfigIamMember gets an existing WorkstationConfigIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationConfigIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationConfigIamMemberState, opts ...pulumi.ResourceOption) (*WorkstationConfigIamMember, error) {
	var resource WorkstationConfigIamMember
	err := ctx.ReadResource("gcp:workstations/workstationConfigIamMember:WorkstationConfigIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationConfigIamMember resources.
type workstationConfigIamMemberState struct {
	Condition            *WorkstationConfigIamMemberCondition `pulumi:"condition"`
	Etag                 *string                              `pulumi:"etag"`
	Location             *string                              `pulumi:"location"`
	Member               *string                              `pulumi:"member"`
	Project              *string                              `pulumi:"project"`
	Role                 *string                              `pulumi:"role"`
	WorkstationClusterId *string                              `pulumi:"workstationClusterId"`
	WorkstationConfigId  *string                              `pulumi:"workstationConfigId"`
}

type WorkstationConfigIamMemberState struct {
	Condition            WorkstationConfigIamMemberConditionPtrInput
	Etag                 pulumi.StringPtrInput
	Location             pulumi.StringPtrInput
	Member               pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	Role                 pulumi.StringPtrInput
	WorkstationClusterId pulumi.StringPtrInput
	WorkstationConfigId  pulumi.StringPtrInput
}

func (WorkstationConfigIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigIamMemberState)(nil)).Elem()
}

type workstationConfigIamMemberArgs struct {
	Condition            *WorkstationConfigIamMemberCondition `pulumi:"condition"`
	Location             *string                              `pulumi:"location"`
	Member               string                               `pulumi:"member"`
	Project              *string                              `pulumi:"project"`
	Role                 string                               `pulumi:"role"`
	WorkstationClusterId string                               `pulumi:"workstationClusterId"`
	WorkstationConfigId  string                               `pulumi:"workstationConfigId"`
}

// The set of arguments for constructing a WorkstationConfigIamMember resource.
type WorkstationConfigIamMemberArgs struct {
	Condition            WorkstationConfigIamMemberConditionPtrInput
	Location             pulumi.StringPtrInput
	Member               pulumi.StringInput
	Project              pulumi.StringPtrInput
	Role                 pulumi.StringInput
	WorkstationClusterId pulumi.StringInput
	WorkstationConfigId  pulumi.StringInput
}

func (WorkstationConfigIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigIamMemberArgs)(nil)).Elem()
}

type WorkstationConfigIamMemberInput interface {
	pulumi.Input

	ToWorkstationConfigIamMemberOutput() WorkstationConfigIamMemberOutput
	ToWorkstationConfigIamMemberOutputWithContext(ctx context.Context) WorkstationConfigIamMemberOutput
}

func (*WorkstationConfigIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfigIamMember)(nil)).Elem()
}

func (i *WorkstationConfigIamMember) ToWorkstationConfigIamMemberOutput() WorkstationConfigIamMemberOutput {
	return i.ToWorkstationConfigIamMemberOutputWithContext(context.Background())
}

func (i *WorkstationConfigIamMember) ToWorkstationConfigIamMemberOutputWithContext(ctx context.Context) WorkstationConfigIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigIamMemberOutput)
}

// WorkstationConfigIamMemberArrayInput is an input type that accepts WorkstationConfigIamMemberArray and WorkstationConfigIamMemberArrayOutput values.
// You can construct a concrete instance of `WorkstationConfigIamMemberArrayInput` via:
//
//	WorkstationConfigIamMemberArray{ WorkstationConfigIamMemberArgs{...} }
type WorkstationConfigIamMemberArrayInput interface {
	pulumi.Input

	ToWorkstationConfigIamMemberArrayOutput() WorkstationConfigIamMemberArrayOutput
	ToWorkstationConfigIamMemberArrayOutputWithContext(context.Context) WorkstationConfigIamMemberArrayOutput
}

type WorkstationConfigIamMemberArray []WorkstationConfigIamMemberInput

func (WorkstationConfigIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationConfigIamMember)(nil)).Elem()
}

func (i WorkstationConfigIamMemberArray) ToWorkstationConfigIamMemberArrayOutput() WorkstationConfigIamMemberArrayOutput {
	return i.ToWorkstationConfigIamMemberArrayOutputWithContext(context.Background())
}

func (i WorkstationConfigIamMemberArray) ToWorkstationConfigIamMemberArrayOutputWithContext(ctx context.Context) WorkstationConfigIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigIamMemberArrayOutput)
}

// WorkstationConfigIamMemberMapInput is an input type that accepts WorkstationConfigIamMemberMap and WorkstationConfigIamMemberMapOutput values.
// You can construct a concrete instance of `WorkstationConfigIamMemberMapInput` via:
//
//	WorkstationConfigIamMemberMap{ "key": WorkstationConfigIamMemberArgs{...} }
type WorkstationConfigIamMemberMapInput interface {
	pulumi.Input

	ToWorkstationConfigIamMemberMapOutput() WorkstationConfigIamMemberMapOutput
	ToWorkstationConfigIamMemberMapOutputWithContext(context.Context) WorkstationConfigIamMemberMapOutput
}

type WorkstationConfigIamMemberMap map[string]WorkstationConfigIamMemberInput

func (WorkstationConfigIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationConfigIamMember)(nil)).Elem()
}

func (i WorkstationConfigIamMemberMap) ToWorkstationConfigIamMemberMapOutput() WorkstationConfigIamMemberMapOutput {
	return i.ToWorkstationConfigIamMemberMapOutputWithContext(context.Background())
}

func (i WorkstationConfigIamMemberMap) ToWorkstationConfigIamMemberMapOutputWithContext(ctx context.Context) WorkstationConfigIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigIamMemberMapOutput)
}

type WorkstationConfigIamMemberOutput struct{ *pulumi.OutputState }

func (WorkstationConfigIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfigIamMember)(nil)).Elem()
}

func (o WorkstationConfigIamMemberOutput) ToWorkstationConfigIamMemberOutput() WorkstationConfigIamMemberOutput {
	return o
}

func (o WorkstationConfigIamMemberOutput) ToWorkstationConfigIamMemberOutputWithContext(ctx context.Context) WorkstationConfigIamMemberOutput {
	return o
}

func (o WorkstationConfigIamMemberOutput) Condition() WorkstationConfigIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) WorkstationConfigIamMemberConditionPtrOutput { return v.Condition }).(WorkstationConfigIamMemberConditionPtrOutput)
}

func (o WorkstationConfigIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamMemberOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

func (o WorkstationConfigIamMemberOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfigIamMember) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

type WorkstationConfigIamMemberArrayOutput struct{ *pulumi.OutputState }

func (WorkstationConfigIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationConfigIamMember)(nil)).Elem()
}

func (o WorkstationConfigIamMemberArrayOutput) ToWorkstationConfigIamMemberArrayOutput() WorkstationConfigIamMemberArrayOutput {
	return o
}

func (o WorkstationConfigIamMemberArrayOutput) ToWorkstationConfigIamMemberArrayOutputWithContext(ctx context.Context) WorkstationConfigIamMemberArrayOutput {
	return o
}

func (o WorkstationConfigIamMemberArrayOutput) Index(i pulumi.IntInput) WorkstationConfigIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationConfigIamMember {
		return vs[0].([]*WorkstationConfigIamMember)[vs[1].(int)]
	}).(WorkstationConfigIamMemberOutput)
}

type WorkstationConfigIamMemberMapOutput struct{ *pulumi.OutputState }

func (WorkstationConfigIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationConfigIamMember)(nil)).Elem()
}

func (o WorkstationConfigIamMemberMapOutput) ToWorkstationConfigIamMemberMapOutput() WorkstationConfigIamMemberMapOutput {
	return o
}

func (o WorkstationConfigIamMemberMapOutput) ToWorkstationConfigIamMemberMapOutputWithContext(ctx context.Context) WorkstationConfigIamMemberMapOutput {
	return o
}

func (o WorkstationConfigIamMemberMapOutput) MapIndex(k pulumi.StringInput) WorkstationConfigIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationConfigIamMember {
		return vs[0].(map[string]*WorkstationConfigIamMember)[vs[1].(string)]
	}).(WorkstationConfigIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigIamMemberInput)(nil)).Elem(), &WorkstationConfigIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigIamMemberArrayInput)(nil)).Elem(), WorkstationConfigIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigIamMemberMapInput)(nil)).Elem(), WorkstationConfigIamMemberMap{})
	pulumi.RegisterOutputType(WorkstationConfigIamMemberOutput{})
	pulumi.RegisterOutputType(WorkstationConfigIamMemberArrayOutput{})
	pulumi.RegisterOutputType(WorkstationConfigIamMemberMapOutput{})
}
