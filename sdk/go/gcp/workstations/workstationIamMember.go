// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workstations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkstationIamMember struct {
	pulumi.CustomResourceState

	Condition            WorkstationIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                 pulumi.StringOutput                    `pulumi:"etag"`
	Location             pulumi.StringOutput                    `pulumi:"location"`
	Member               pulumi.StringOutput                    `pulumi:"member"`
	Project              pulumi.StringOutput                    `pulumi:"project"`
	Role                 pulumi.StringOutput                    `pulumi:"role"`
	WorkstationClusterId pulumi.StringOutput                    `pulumi:"workstationClusterId"`
	WorkstationConfigId  pulumi.StringOutput                    `pulumi:"workstationConfigId"`
	WorkstationId        pulumi.StringOutput                    `pulumi:"workstationId"`
}

// NewWorkstationIamMember registers a new resource with the given unique name, arguments, and options.
func NewWorkstationIamMember(ctx *pulumi.Context,
	name string, args *WorkstationIamMemberArgs, opts ...pulumi.ResourceOption) (*WorkstationIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	if args.WorkstationId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationId'")
	}
	var resource WorkstationIamMember
	err := ctx.RegisterResource("gcp:workstations/workstationIamMember:WorkstationIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationIamMember gets an existing WorkstationIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationIamMemberState, opts ...pulumi.ResourceOption) (*WorkstationIamMember, error) {
	var resource WorkstationIamMember
	err := ctx.ReadResource("gcp:workstations/workstationIamMember:WorkstationIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationIamMember resources.
type workstationIamMemberState struct {
	Condition            *WorkstationIamMemberCondition `pulumi:"condition"`
	Etag                 *string                        `pulumi:"etag"`
	Location             *string                        `pulumi:"location"`
	Member               *string                        `pulumi:"member"`
	Project              *string                        `pulumi:"project"`
	Role                 *string                        `pulumi:"role"`
	WorkstationClusterId *string                        `pulumi:"workstationClusterId"`
	WorkstationConfigId  *string                        `pulumi:"workstationConfigId"`
	WorkstationId        *string                        `pulumi:"workstationId"`
}

type WorkstationIamMemberState struct {
	Condition            WorkstationIamMemberConditionPtrInput
	Etag                 pulumi.StringPtrInput
	Location             pulumi.StringPtrInput
	Member               pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	Role                 pulumi.StringPtrInput
	WorkstationClusterId pulumi.StringPtrInput
	WorkstationConfigId  pulumi.StringPtrInput
	WorkstationId        pulumi.StringPtrInput
}

func (WorkstationIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamMemberState)(nil)).Elem()
}

type workstationIamMemberArgs struct {
	Condition            *WorkstationIamMemberCondition `pulumi:"condition"`
	Location             *string                        `pulumi:"location"`
	Member               string                         `pulumi:"member"`
	Project              *string                        `pulumi:"project"`
	Role                 string                         `pulumi:"role"`
	WorkstationClusterId string                         `pulumi:"workstationClusterId"`
	WorkstationConfigId  string                         `pulumi:"workstationConfigId"`
	WorkstationId        string                         `pulumi:"workstationId"`
}

// The set of arguments for constructing a WorkstationIamMember resource.
type WorkstationIamMemberArgs struct {
	Condition            WorkstationIamMemberConditionPtrInput
	Location             pulumi.StringPtrInput
	Member               pulumi.StringInput
	Project              pulumi.StringPtrInput
	Role                 pulumi.StringInput
	WorkstationClusterId pulumi.StringInput
	WorkstationConfigId  pulumi.StringInput
	WorkstationId        pulumi.StringInput
}

func (WorkstationIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationIamMemberArgs)(nil)).Elem()
}

type WorkstationIamMemberInput interface {
	pulumi.Input

	ToWorkstationIamMemberOutput() WorkstationIamMemberOutput
	ToWorkstationIamMemberOutputWithContext(ctx context.Context) WorkstationIamMemberOutput
}

func (*WorkstationIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamMember)(nil)).Elem()
}

func (i *WorkstationIamMember) ToWorkstationIamMemberOutput() WorkstationIamMemberOutput {
	return i.ToWorkstationIamMemberOutputWithContext(context.Background())
}

func (i *WorkstationIamMember) ToWorkstationIamMemberOutputWithContext(ctx context.Context) WorkstationIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamMemberOutput)
}

// WorkstationIamMemberArrayInput is an input type that accepts WorkstationIamMemberArray and WorkstationIamMemberArrayOutput values.
// You can construct a concrete instance of `WorkstationIamMemberArrayInput` via:
//
//	WorkstationIamMemberArray{ WorkstationIamMemberArgs{...} }
type WorkstationIamMemberArrayInput interface {
	pulumi.Input

	ToWorkstationIamMemberArrayOutput() WorkstationIamMemberArrayOutput
	ToWorkstationIamMemberArrayOutputWithContext(context.Context) WorkstationIamMemberArrayOutput
}

type WorkstationIamMemberArray []WorkstationIamMemberInput

func (WorkstationIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamMember)(nil)).Elem()
}

func (i WorkstationIamMemberArray) ToWorkstationIamMemberArrayOutput() WorkstationIamMemberArrayOutput {
	return i.ToWorkstationIamMemberArrayOutputWithContext(context.Background())
}

func (i WorkstationIamMemberArray) ToWorkstationIamMemberArrayOutputWithContext(ctx context.Context) WorkstationIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamMemberArrayOutput)
}

// WorkstationIamMemberMapInput is an input type that accepts WorkstationIamMemberMap and WorkstationIamMemberMapOutput values.
// You can construct a concrete instance of `WorkstationIamMemberMapInput` via:
//
//	WorkstationIamMemberMap{ "key": WorkstationIamMemberArgs{...} }
type WorkstationIamMemberMapInput interface {
	pulumi.Input

	ToWorkstationIamMemberMapOutput() WorkstationIamMemberMapOutput
	ToWorkstationIamMemberMapOutputWithContext(context.Context) WorkstationIamMemberMapOutput
}

type WorkstationIamMemberMap map[string]WorkstationIamMemberInput

func (WorkstationIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamMember)(nil)).Elem()
}

func (i WorkstationIamMemberMap) ToWorkstationIamMemberMapOutput() WorkstationIamMemberMapOutput {
	return i.ToWorkstationIamMemberMapOutputWithContext(context.Background())
}

func (i WorkstationIamMemberMap) ToWorkstationIamMemberMapOutputWithContext(ctx context.Context) WorkstationIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationIamMemberMapOutput)
}

type WorkstationIamMemberOutput struct{ *pulumi.OutputState }

func (WorkstationIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationIamMember)(nil)).Elem()
}

func (o WorkstationIamMemberOutput) ToWorkstationIamMemberOutput() WorkstationIamMemberOutput {
	return o
}

func (o WorkstationIamMemberOutput) ToWorkstationIamMemberOutputWithContext(ctx context.Context) WorkstationIamMemberOutput {
	return o
}

func (o WorkstationIamMemberOutput) Condition() WorkstationIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *WorkstationIamMember) WorkstationIamMemberConditionPtrOutput { return v.Condition }).(WorkstationIamMemberConditionPtrOutput)
}

func (o WorkstationIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

func (o WorkstationIamMemberOutput) WorkstationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationIamMember) pulumi.StringOutput { return v.WorkstationId }).(pulumi.StringOutput)
}

type WorkstationIamMemberArrayOutput struct{ *pulumi.OutputState }

func (WorkstationIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkstationIamMember)(nil)).Elem()
}

func (o WorkstationIamMemberArrayOutput) ToWorkstationIamMemberArrayOutput() WorkstationIamMemberArrayOutput {
	return o
}

func (o WorkstationIamMemberArrayOutput) ToWorkstationIamMemberArrayOutputWithContext(ctx context.Context) WorkstationIamMemberArrayOutput {
	return o
}

func (o WorkstationIamMemberArrayOutput) Index(i pulumi.IntInput) WorkstationIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkstationIamMember {
		return vs[0].([]*WorkstationIamMember)[vs[1].(int)]
	}).(WorkstationIamMemberOutput)
}

type WorkstationIamMemberMapOutput struct{ *pulumi.OutputState }

func (WorkstationIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkstationIamMember)(nil)).Elem()
}

func (o WorkstationIamMemberMapOutput) ToWorkstationIamMemberMapOutput() WorkstationIamMemberMapOutput {
	return o
}

func (o WorkstationIamMemberMapOutput) ToWorkstationIamMemberMapOutputWithContext(ctx context.Context) WorkstationIamMemberMapOutput {
	return o
}

func (o WorkstationIamMemberMapOutput) MapIndex(k pulumi.StringInput) WorkstationIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkstationIamMember {
		return vs[0].(map[string]*WorkstationIamMember)[vs[1].(string)]
	}).(WorkstationIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamMemberInput)(nil)).Elem(), &WorkstationIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamMemberArrayInput)(nil)).Elem(), WorkstationIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationIamMemberMapInput)(nil)).Elem(), WorkstationIamMemberMap{})
	pulumi.RegisterOutputType(WorkstationIamMemberOutput{})
	pulumi.RegisterOutputType(WorkstationIamMemberArrayOutput{})
	pulumi.RegisterOutputType(WorkstationIamMemberMapOutput{})
}
