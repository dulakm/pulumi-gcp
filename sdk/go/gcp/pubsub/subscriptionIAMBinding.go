// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for pubsub subscription. Each of these resources serves a different use case:
//
// * `pubsub.SubscriptionIamPolicy`: Authoritative. Sets the IAM policy for the subscription and replaces any existing policy already attached.
// * `pubsub.SubscriptionIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the subscription are preserved.
// * `pubsub.SubscriptionIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the subscription are preserved.
//
// > **Note:** `pubsub.SubscriptionIamPolicy` **cannot** be used in conjunction with `pubsub.SubscriptionIamBinding` and `pubsub.SubscriptionIamMember` or they will fight over what your policy should be.
//
// > **Note:** `pubsub.SubscriptionIamBinding` resources **can be** used in conjunction with `pubsub.SubscriptionIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_pubsub\_subscription\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pubsub.NewSubscriptionIamPolicy(ctx, "editor", &pubsub.SubscriptionIamPolicyArgs{
//				Subscription: pulumi.String("your-subscription-name"),
//				PolicyData:   *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_pubsub\_subscription\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewSubscriptionIamBinding(ctx, "editor", &pubsub.SubscriptionIamBindingArgs{
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role:         pulumi.String("roles/editor"),
//				Subscription: pulumi.String("your-subscription-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_pubsub\_subscription\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewSubscriptionIamMember(ctx, "editor", &pubsub.SubscriptionIamMemberArgs{
//				Member:       pulumi.String("user:jane@example.com"),
//				Role:         pulumi.String("roles/editor"),
//				Subscription: pulumi.String("your-subscription-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pubsub subscription IAM resources can be imported using the project, subscription name, role and member.
//
// ```sh
//
//	$ pulumi import gcp:pubsub/subscriptionIamBinding:SubscriptionIamBinding editor projects/{your-project-id}/subscriptions/{your-subscription-name}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:pubsub/subscriptionIamBinding:SubscriptionIamBinding editor "projects/{your-project-id}/subscriptions/{your-subscription-name} roles/editor"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:pubsub/subscriptionIamBinding:SubscriptionIamBinding editor "projects/{your-project-id}/subscriptions/{your-subscription-name} roles/editor jane@example.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type SubscriptionIamBinding struct {
	pulumi.CustomResourceState

	Condition SubscriptionIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the subscription's IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `pubsub.SubscriptionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription pulumi.StringOutput `pulumi:"subscription"`
}

// NewSubscriptionIamBinding registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionIamBinding(ctx *pulumi.Context,
	name string, args *SubscriptionIamBindingArgs, opts ...pulumi.ResourceOption) (*SubscriptionIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Subscription == nil {
		return nil, errors.New("invalid value for required argument 'Subscription'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionIamBinding
	err := ctx.RegisterResource("gcp:pubsub/subscriptionIamBinding:SubscriptionIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionIamBinding gets an existing SubscriptionIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionIamBindingState, opts ...pulumi.ResourceOption) (*SubscriptionIamBinding, error) {
	var resource SubscriptionIamBinding
	err := ctx.ReadResource("gcp:pubsub/subscriptionIamBinding:SubscriptionIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionIamBinding resources.
type subscriptionIamBindingState struct {
	Condition *SubscriptionIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the subscription's IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `pubsub.SubscriptionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription *string `pulumi:"subscription"`
}

type SubscriptionIamBindingState struct {
	Condition SubscriptionIamBindingConditionPtrInput
	// (Computed) The etag of the subscription's IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `pubsub.SubscriptionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription pulumi.StringPtrInput
}

func (SubscriptionIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionIamBindingState)(nil)).Elem()
}

type subscriptionIamBindingArgs struct {
	Condition *SubscriptionIamBindingCondition `pulumi:"condition"`
	Members   []string                         `pulumi:"members"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `pubsub.SubscriptionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription string `pulumi:"subscription"`
}

// The set of arguments for constructing a SubscriptionIamBinding resource.
type SubscriptionIamBindingArgs struct {
	Condition SubscriptionIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `pubsub.SubscriptionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription pulumi.StringInput
}

func (SubscriptionIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionIamBindingArgs)(nil)).Elem()
}

type SubscriptionIamBindingInput interface {
	pulumi.Input

	ToSubscriptionIamBindingOutput() SubscriptionIamBindingOutput
	ToSubscriptionIamBindingOutputWithContext(ctx context.Context) SubscriptionIamBindingOutput
}

func (*SubscriptionIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIamBinding)(nil)).Elem()
}

func (i *SubscriptionIamBinding) ToSubscriptionIamBindingOutput() SubscriptionIamBindingOutput {
	return i.ToSubscriptionIamBindingOutputWithContext(context.Background())
}

func (i *SubscriptionIamBinding) ToSubscriptionIamBindingOutputWithContext(ctx context.Context) SubscriptionIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamBindingOutput)
}

// SubscriptionIamBindingArrayInput is an input type that accepts SubscriptionIamBindingArray and SubscriptionIamBindingArrayOutput values.
// You can construct a concrete instance of `SubscriptionIamBindingArrayInput` via:
//
//	SubscriptionIamBindingArray{ SubscriptionIamBindingArgs{...} }
type SubscriptionIamBindingArrayInput interface {
	pulumi.Input

	ToSubscriptionIamBindingArrayOutput() SubscriptionIamBindingArrayOutput
	ToSubscriptionIamBindingArrayOutputWithContext(context.Context) SubscriptionIamBindingArrayOutput
}

type SubscriptionIamBindingArray []SubscriptionIamBindingInput

func (SubscriptionIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionIamBinding)(nil)).Elem()
}

func (i SubscriptionIamBindingArray) ToSubscriptionIamBindingArrayOutput() SubscriptionIamBindingArrayOutput {
	return i.ToSubscriptionIamBindingArrayOutputWithContext(context.Background())
}

func (i SubscriptionIamBindingArray) ToSubscriptionIamBindingArrayOutputWithContext(ctx context.Context) SubscriptionIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamBindingArrayOutput)
}

// SubscriptionIamBindingMapInput is an input type that accepts SubscriptionIamBindingMap and SubscriptionIamBindingMapOutput values.
// You can construct a concrete instance of `SubscriptionIamBindingMapInput` via:
//
//	SubscriptionIamBindingMap{ "key": SubscriptionIamBindingArgs{...} }
type SubscriptionIamBindingMapInput interface {
	pulumi.Input

	ToSubscriptionIamBindingMapOutput() SubscriptionIamBindingMapOutput
	ToSubscriptionIamBindingMapOutputWithContext(context.Context) SubscriptionIamBindingMapOutput
}

type SubscriptionIamBindingMap map[string]SubscriptionIamBindingInput

func (SubscriptionIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionIamBinding)(nil)).Elem()
}

func (i SubscriptionIamBindingMap) ToSubscriptionIamBindingMapOutput() SubscriptionIamBindingMapOutput {
	return i.ToSubscriptionIamBindingMapOutputWithContext(context.Background())
}

func (i SubscriptionIamBindingMap) ToSubscriptionIamBindingMapOutputWithContext(ctx context.Context) SubscriptionIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamBindingMapOutput)
}

type SubscriptionIamBindingOutput struct{ *pulumi.OutputState }

func (SubscriptionIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIamBinding)(nil)).Elem()
}

func (o SubscriptionIamBindingOutput) ToSubscriptionIamBindingOutput() SubscriptionIamBindingOutput {
	return o
}

func (o SubscriptionIamBindingOutput) ToSubscriptionIamBindingOutputWithContext(ctx context.Context) SubscriptionIamBindingOutput {
	return o
}

func (o SubscriptionIamBindingOutput) Condition() SubscriptionIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *SubscriptionIamBinding) SubscriptionIamBindingConditionPtrOutput { return v.Condition }).(SubscriptionIamBindingConditionPtrOutput)
}

// (Computed) The etag of the subscription's IAM policy.
func (o SubscriptionIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SubscriptionIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o SubscriptionIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `pubsub.SubscriptionIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o SubscriptionIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The subscription name or id to bind to attach IAM policy to.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o SubscriptionIamBindingOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamBinding) pulumi.StringOutput { return v.Subscription }).(pulumi.StringOutput)
}

type SubscriptionIamBindingArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionIamBinding)(nil)).Elem()
}

func (o SubscriptionIamBindingArrayOutput) ToSubscriptionIamBindingArrayOutput() SubscriptionIamBindingArrayOutput {
	return o
}

func (o SubscriptionIamBindingArrayOutput) ToSubscriptionIamBindingArrayOutputWithContext(ctx context.Context) SubscriptionIamBindingArrayOutput {
	return o
}

func (o SubscriptionIamBindingArrayOutput) Index(i pulumi.IntInput) SubscriptionIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionIamBinding {
		return vs[0].([]*SubscriptionIamBinding)[vs[1].(int)]
	}).(SubscriptionIamBindingOutput)
}

type SubscriptionIamBindingMapOutput struct{ *pulumi.OutputState }

func (SubscriptionIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionIamBinding)(nil)).Elem()
}

func (o SubscriptionIamBindingMapOutput) ToSubscriptionIamBindingMapOutput() SubscriptionIamBindingMapOutput {
	return o
}

func (o SubscriptionIamBindingMapOutput) ToSubscriptionIamBindingMapOutputWithContext(ctx context.Context) SubscriptionIamBindingMapOutput {
	return o
}

func (o SubscriptionIamBindingMapOutput) MapIndex(k pulumi.StringInput) SubscriptionIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionIamBinding {
		return vs[0].(map[string]*SubscriptionIamBinding)[vs[1].(string)]
	}).(SubscriptionIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIamBindingInput)(nil)).Elem(), &SubscriptionIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIamBindingArrayInput)(nil)).Elem(), SubscriptionIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIamBindingMapInput)(nil)).Elem(), SubscriptionIamBindingMap{})
	pulumi.RegisterOutputType(SubscriptionIamBindingOutput{})
	pulumi.RegisterOutputType(SubscriptionIamBindingArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionIamBindingMapOutput{})
}
