// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for pubsub subscription. Each of these resources serves a different use case:
//
// * `pubsub.SubscriptionIamPolicy`: Authoritative. Sets the IAM policy for the subscription and replaces any existing policy already attached.
// * `pubsub.SubscriptionIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the subscription are preserved.
// * `pubsub.SubscriptionIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the subscription are preserved.
//
// > **Note:** `pubsub.SubscriptionIamPolicy` **cannot** be used in conjunction with `pubsub.SubscriptionIamBinding` and `pubsub.SubscriptionIamMember` or they will fight over what your policy should be.
//
// > **Note:** `pubsub.SubscriptionIamBinding` resources **can be** used in conjunction with `pubsub.SubscriptionIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_pubsub\_subscription\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIamPolicy(ctx, &organizations.LookupIamPolicyArgs{
//				Bindings: []organizations.GetIamPolicyBinding{
//					{
//						Role: "roles/editor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pubsub.NewSubscriptionIamPolicy(ctx, "editor", &pubsub.SubscriptionIamPolicyArgs{
//				Subscription: pulumi.String("your-subscription-name"),
//				PolicyData:   *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_pubsub\_subscription\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewSubscriptionIamBinding(ctx, "editor", &pubsub.SubscriptionIamBindingArgs{
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Role:         pulumi.String("roles/editor"),
//				Subscription: pulumi.String("your-subscription-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_pubsub\_subscription\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewSubscriptionIamMember(ctx, "editor", &pubsub.SubscriptionIamMemberArgs{
//				Member:       pulumi.String("user:jane@example.com"),
//				Role:         pulumi.String("roles/editor"),
//				Subscription: pulumi.String("your-subscription-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pubsub subscription IAM resources can be imported using the project, subscription name, role and member.
//
// ```sh
//
//	$ pulumi import gcp:pubsub/subscriptionIamPolicy:SubscriptionIamPolicy editor projects/{your-project-id}/subscriptions/{your-subscription-name}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:pubsub/subscriptionIamPolicy:SubscriptionIamPolicy editor "projects/{your-project-id}/subscriptions/{your-subscription-name} roles/editor"
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:pubsub/subscriptionIamPolicy:SubscriptionIamPolicy editor "projects/{your-project-id}/subscriptions/{your-subscription-name} roles/editor jane@example.com"
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type SubscriptionIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the subscription's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	//
	// ***
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription pulumi.StringOutput `pulumi:"subscription"`
}

// NewSubscriptionIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionIamPolicy(ctx *pulumi.Context,
	name string, args *SubscriptionIamPolicyArgs, opts ...pulumi.ResourceOption) (*SubscriptionIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Subscription == nil {
		return nil, errors.New("invalid value for required argument 'Subscription'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionIamPolicy
	err := ctx.RegisterResource("gcp:pubsub/subscriptionIamPolicy:SubscriptionIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionIamPolicy gets an existing SubscriptionIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionIamPolicyState, opts ...pulumi.ResourceOption) (*SubscriptionIamPolicy, error) {
	var resource SubscriptionIamPolicy
	err := ctx.ReadResource("gcp:pubsub/subscriptionIamPolicy:SubscriptionIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionIamPolicy resources.
type subscriptionIamPolicyState struct {
	// (Computed) The etag of the subscription's IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	//
	// ***
	PolicyData *string `pulumi:"policyData"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription *string `pulumi:"subscription"`
}

type SubscriptionIamPolicyState struct {
	// (Computed) The etag of the subscription's IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	//
	// ***
	PolicyData pulumi.StringPtrInput
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription pulumi.StringPtrInput
}

func (SubscriptionIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionIamPolicyState)(nil)).Elem()
}

type subscriptionIamPolicyArgs struct {
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	//
	// ***
	PolicyData string `pulumi:"policyData"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription string `pulumi:"subscription"`
}

// The set of arguments for constructing a SubscriptionIamPolicy resource.
type SubscriptionIamPolicyArgs struct {
	// The policy data generated by
	// a `organizations.getIamPolicy` data source.
	//
	// ***
	PolicyData pulumi.StringInput
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The subscription name or id to bind to attach IAM policy to.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Subscription pulumi.StringInput
}

func (SubscriptionIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionIamPolicyArgs)(nil)).Elem()
}

type SubscriptionIamPolicyInput interface {
	pulumi.Input

	ToSubscriptionIamPolicyOutput() SubscriptionIamPolicyOutput
	ToSubscriptionIamPolicyOutputWithContext(ctx context.Context) SubscriptionIamPolicyOutput
}

func (*SubscriptionIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIamPolicy)(nil)).Elem()
}

func (i *SubscriptionIamPolicy) ToSubscriptionIamPolicyOutput() SubscriptionIamPolicyOutput {
	return i.ToSubscriptionIamPolicyOutputWithContext(context.Background())
}

func (i *SubscriptionIamPolicy) ToSubscriptionIamPolicyOutputWithContext(ctx context.Context) SubscriptionIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamPolicyOutput)
}

// SubscriptionIamPolicyArrayInput is an input type that accepts SubscriptionIamPolicyArray and SubscriptionIamPolicyArrayOutput values.
// You can construct a concrete instance of `SubscriptionIamPolicyArrayInput` via:
//
//	SubscriptionIamPolicyArray{ SubscriptionIamPolicyArgs{...} }
type SubscriptionIamPolicyArrayInput interface {
	pulumi.Input

	ToSubscriptionIamPolicyArrayOutput() SubscriptionIamPolicyArrayOutput
	ToSubscriptionIamPolicyArrayOutputWithContext(context.Context) SubscriptionIamPolicyArrayOutput
}

type SubscriptionIamPolicyArray []SubscriptionIamPolicyInput

func (SubscriptionIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionIamPolicy)(nil)).Elem()
}

func (i SubscriptionIamPolicyArray) ToSubscriptionIamPolicyArrayOutput() SubscriptionIamPolicyArrayOutput {
	return i.ToSubscriptionIamPolicyArrayOutputWithContext(context.Background())
}

func (i SubscriptionIamPolicyArray) ToSubscriptionIamPolicyArrayOutputWithContext(ctx context.Context) SubscriptionIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamPolicyArrayOutput)
}

// SubscriptionIamPolicyMapInput is an input type that accepts SubscriptionIamPolicyMap and SubscriptionIamPolicyMapOutput values.
// You can construct a concrete instance of `SubscriptionIamPolicyMapInput` via:
//
//	SubscriptionIamPolicyMap{ "key": SubscriptionIamPolicyArgs{...} }
type SubscriptionIamPolicyMapInput interface {
	pulumi.Input

	ToSubscriptionIamPolicyMapOutput() SubscriptionIamPolicyMapOutput
	ToSubscriptionIamPolicyMapOutputWithContext(context.Context) SubscriptionIamPolicyMapOutput
}

type SubscriptionIamPolicyMap map[string]SubscriptionIamPolicyInput

func (SubscriptionIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionIamPolicy)(nil)).Elem()
}

func (i SubscriptionIamPolicyMap) ToSubscriptionIamPolicyMapOutput() SubscriptionIamPolicyMapOutput {
	return i.ToSubscriptionIamPolicyMapOutputWithContext(context.Background())
}

func (i SubscriptionIamPolicyMap) ToSubscriptionIamPolicyMapOutputWithContext(ctx context.Context) SubscriptionIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIamPolicyMapOutput)
}

type SubscriptionIamPolicyOutput struct{ *pulumi.OutputState }

func (SubscriptionIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIamPolicy)(nil)).Elem()
}

func (o SubscriptionIamPolicyOutput) ToSubscriptionIamPolicyOutput() SubscriptionIamPolicyOutput {
	return o
}

func (o SubscriptionIamPolicyOutput) ToSubscriptionIamPolicyOutputWithContext(ctx context.Context) SubscriptionIamPolicyOutput {
	return o
}

// (Computed) The etag of the subscription's IAM policy.
func (o SubscriptionIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIamPolicy` data source.
//
// ***
func (o SubscriptionIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o SubscriptionIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The subscription name or id to bind to attach IAM policy to.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
func (o SubscriptionIamPolicyOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionIamPolicy) pulumi.StringOutput { return v.Subscription }).(pulumi.StringOutput)
}

type SubscriptionIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionIamPolicy)(nil)).Elem()
}

func (o SubscriptionIamPolicyArrayOutput) ToSubscriptionIamPolicyArrayOutput() SubscriptionIamPolicyArrayOutput {
	return o
}

func (o SubscriptionIamPolicyArrayOutput) ToSubscriptionIamPolicyArrayOutputWithContext(ctx context.Context) SubscriptionIamPolicyArrayOutput {
	return o
}

func (o SubscriptionIamPolicyArrayOutput) Index(i pulumi.IntInput) SubscriptionIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionIamPolicy {
		return vs[0].([]*SubscriptionIamPolicy)[vs[1].(int)]
	}).(SubscriptionIamPolicyOutput)
}

type SubscriptionIamPolicyMapOutput struct{ *pulumi.OutputState }

func (SubscriptionIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionIamPolicy)(nil)).Elem()
}

func (o SubscriptionIamPolicyMapOutput) ToSubscriptionIamPolicyMapOutput() SubscriptionIamPolicyMapOutput {
	return o
}

func (o SubscriptionIamPolicyMapOutput) ToSubscriptionIamPolicyMapOutputWithContext(ctx context.Context) SubscriptionIamPolicyMapOutput {
	return o
}

func (o SubscriptionIamPolicyMapOutput) MapIndex(k pulumi.StringInput) SubscriptionIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionIamPolicy {
		return vs[0].(map[string]*SubscriptionIamPolicy)[vs[1].(string)]
	}).(SubscriptionIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIamPolicyInput)(nil)).Elem(), &SubscriptionIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIamPolicyArrayInput)(nil)).Elem(), SubscriptionIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIamPolicyMapInput)(nil)).Elem(), SubscriptionIamPolicyMap{})
	pulumi.RegisterOutputType(SubscriptionIamPolicyOutput{})
	pulumi.RegisterOutputType(SubscriptionIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionIamPolicyMapOutput{})
}
