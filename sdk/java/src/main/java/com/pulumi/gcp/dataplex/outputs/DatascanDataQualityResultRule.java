// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatascanDataQualityResultRule {
    /**
     * @return (Output)
     * The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.
     * Evaluated count can be configured to either
     * 1. include all rows (default) - with null rows automatically failing rule evaluation, or
     * 2. exclude null rows from the evaluatedCount, by setting ignore_nulls = true.
     * 
     */
    private @Nullable String evaluatedCount;
    /**
     * @return (Output)
     * The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.
     * 
     */
    private @Nullable String failingRowsQuery;
    /**
     * @return (Output)
     * The number of rows with null values in the specified column.
     * 
     */
    private @Nullable String nullCount;
    /**
     * @return (Output)
     * The ratio of passedCount / evaluatedCount. This field is only valid for ColumnMap type rules.
     * 
     */
    private @Nullable Integer passRatio;
    /**
     * @return (Output)
     * Whether the rule passed or failed.
     * 
     */
    private @Nullable Boolean passed;
    /**
     * @return (Output)
     * The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.
     * 
     */
    private @Nullable String passedCount;
    /**
     * @return (Output)
     * The rule specified in the DataQualitySpec, as is.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRule> rules;

    private DatascanDataQualityResultRule() {}
    /**
     * @return (Output)
     * The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.
     * Evaluated count can be configured to either
     * 1. include all rows (default) - with null rows automatically failing rule evaluation, or
     * 2. exclude null rows from the evaluatedCount, by setting ignore_nulls = true.
     * 
     */
    public Optional<String> evaluatedCount() {
        return Optional.ofNullable(this.evaluatedCount);
    }
    /**
     * @return (Output)
     * The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.
     * 
     */
    public Optional<String> failingRowsQuery() {
        return Optional.ofNullable(this.failingRowsQuery);
    }
    /**
     * @return (Output)
     * The number of rows with null values in the specified column.
     * 
     */
    public Optional<String> nullCount() {
        return Optional.ofNullable(this.nullCount);
    }
    /**
     * @return (Output)
     * The ratio of passedCount / evaluatedCount. This field is only valid for ColumnMap type rules.
     * 
     */
    public Optional<Integer> passRatio() {
        return Optional.ofNullable(this.passRatio);
    }
    /**
     * @return (Output)
     * Whether the rule passed or failed.
     * 
     */
    public Optional<Boolean> passed() {
        return Optional.ofNullable(this.passed);
    }
    /**
     * @return (Output)
     * The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.
     * 
     */
    public Optional<String> passedCount() {
        return Optional.ofNullable(this.passedCount);
    }
    /**
     * @return (Output)
     * The rule specified in the DataQualitySpec, as is.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatascanDataQualityResultRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String evaluatedCount;
        private @Nullable String failingRowsQuery;
        private @Nullable String nullCount;
        private @Nullable Integer passRatio;
        private @Nullable Boolean passed;
        private @Nullable String passedCount;
        private @Nullable List<DatascanDataQualityResultRuleRule> rules;
        public Builder() {}
        public Builder(DatascanDataQualityResultRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.evaluatedCount = defaults.evaluatedCount;
    	      this.failingRowsQuery = defaults.failingRowsQuery;
    	      this.nullCount = defaults.nullCount;
    	      this.passRatio = defaults.passRatio;
    	      this.passed = defaults.passed;
    	      this.passedCount = defaults.passedCount;
    	      this.rules = defaults.rules;
        }

        @CustomType.Setter
        public Builder evaluatedCount(@Nullable String evaluatedCount) {
            this.evaluatedCount = evaluatedCount;
            return this;
        }
        @CustomType.Setter
        public Builder failingRowsQuery(@Nullable String failingRowsQuery) {
            this.failingRowsQuery = failingRowsQuery;
            return this;
        }
        @CustomType.Setter
        public Builder nullCount(@Nullable String nullCount) {
            this.nullCount = nullCount;
            return this;
        }
        @CustomType.Setter
        public Builder passRatio(@Nullable Integer passRatio) {
            this.passRatio = passRatio;
            return this;
        }
        @CustomType.Setter
        public Builder passed(@Nullable Boolean passed) {
            this.passed = passed;
            return this;
        }
        @CustomType.Setter
        public Builder passedCount(@Nullable String passedCount) {
            this.passedCount = passedCount;
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<DatascanDataQualityResultRuleRule> rules) {
            this.rules = rules;
            return this;
        }
        public Builder rules(DatascanDataQualityResultRuleRule... rules) {
            return rules(List.of(rules));
        }
        public DatascanDataQualityResultRule build() {
            final var o = new DatascanDataQualityResultRule();
            o.evaluatedCount = evaluatedCount;
            o.failingRowsQuery = failingRowsQuery;
            o.nullCount = nullCount;
            o.passRatio = passRatio;
            o.passed = passed;
            o.passedCount = passedCount;
            o.rules = rules;
            return o;
        }
    }
}
