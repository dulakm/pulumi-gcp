// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.DatascanDataProfileResultProfileFieldProfileDoubleProfileArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataProfileResultProfileFieldProfileIntegerProfileArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataProfileResultProfileFieldProfileStringProfileArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataProfileResultProfileFieldProfileTopNValuesArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataProfileResultProfileFieldProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataProfileResultProfileFieldProfileArgs Empty = new DatascanDataProfileResultProfileFieldProfileArgs();

    /**
     * Ratio of rows with distinct values against total scanned rows. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
     * 
     */
    @Import(name="distinctRatio")
    private @Nullable Output<Integer> distinctRatio;

    /**
     * @return Ratio of rows with distinct values against total scanned rows. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
     * 
     */
    public Optional<Output<Integer>> distinctRatio() {
        return Optional.ofNullable(this.distinctRatio);
    }

    /**
     * (Output)
     * Double type field information.
     * Structure is documented below.
     * 
     */
    @Import(name="doubleProfiles")
    private @Nullable Output<List<DatascanDataProfileResultProfileFieldProfileDoubleProfileArgs>> doubleProfiles;

    /**
     * @return (Output)
     * Double type field information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataProfileResultProfileFieldProfileDoubleProfileArgs>>> doubleProfiles() {
        return Optional.ofNullable(this.doubleProfiles);
    }

    /**
     * (Output)
     * Integer type field information.
     * Structure is documented below.
     * 
     */
    @Import(name="integerProfiles")
    private @Nullable Output<List<DatascanDataProfileResultProfileFieldProfileIntegerProfileArgs>> integerProfiles;

    /**
     * @return (Output)
     * Integer type field information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataProfileResultProfileFieldProfileIntegerProfileArgs>>> integerProfiles() {
        return Optional.ofNullable(this.integerProfiles);
    }

    /**
     * (Output)
     * Ratio of rows with null value against total scanned rows.
     * 
     */
    @Import(name="nullRatio")
    private @Nullable Output<Integer> nullRatio;

    /**
     * @return (Output)
     * Ratio of rows with null value against total scanned rows.
     * 
     */
    public Optional<Output<Integer>> nullRatio() {
        return Optional.ofNullable(this.nullRatio);
    }

    /**
     * (Output)
     * String type field information.
     * Structure is documented below.
     * 
     */
    @Import(name="stringProfiles")
    private @Nullable Output<List<DatascanDataProfileResultProfileFieldProfileStringProfileArgs>> stringProfiles;

    /**
     * @return (Output)
     * String type field information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataProfileResultProfileFieldProfileStringProfileArgs>>> stringProfiles() {
        return Optional.ofNullable(this.stringProfiles);
    }

    /**
     * The list of top N non-null values and number of times they occur in the scanned data. N is 10 or equal to the number of distinct values in the field, whichever is smaller. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
     * Structure is documented below.
     * 
     */
    @Import(name="topNValues")
    private @Nullable Output<DatascanDataProfileResultProfileFieldProfileTopNValuesArgs> topNValues;

    /**
     * @return The list of top N non-null values and number of times they occur in the scanned data. N is 10 or equal to the number of distinct values in the field, whichever is smaller. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataProfileResultProfileFieldProfileTopNValuesArgs>> topNValues() {
        return Optional.ofNullable(this.topNValues);
    }

    private DatascanDataProfileResultProfileFieldProfileArgs() {}

    private DatascanDataProfileResultProfileFieldProfileArgs(DatascanDataProfileResultProfileFieldProfileArgs $) {
        this.distinctRatio = $.distinctRatio;
        this.doubleProfiles = $.doubleProfiles;
        this.integerProfiles = $.integerProfiles;
        this.nullRatio = $.nullRatio;
        this.stringProfiles = $.stringProfiles;
        this.topNValues = $.topNValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataProfileResultProfileFieldProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataProfileResultProfileFieldProfileArgs $;

        public Builder() {
            $ = new DatascanDataProfileResultProfileFieldProfileArgs();
        }

        public Builder(DatascanDataProfileResultProfileFieldProfileArgs defaults) {
            $ = new DatascanDataProfileResultProfileFieldProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param distinctRatio Ratio of rows with distinct values against total scanned rows. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
         * 
         * @return builder
         * 
         */
        public Builder distinctRatio(@Nullable Output<Integer> distinctRatio) {
            $.distinctRatio = distinctRatio;
            return this;
        }

        /**
         * @param distinctRatio Ratio of rows with distinct values against total scanned rows. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
         * 
         * @return builder
         * 
         */
        public Builder distinctRatio(Integer distinctRatio) {
            return distinctRatio(Output.of(distinctRatio));
        }

        /**
         * @param doubleProfiles (Output)
         * Double type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder doubleProfiles(@Nullable Output<List<DatascanDataProfileResultProfileFieldProfileDoubleProfileArgs>> doubleProfiles) {
            $.doubleProfiles = doubleProfiles;
            return this;
        }

        /**
         * @param doubleProfiles (Output)
         * Double type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder doubleProfiles(List<DatascanDataProfileResultProfileFieldProfileDoubleProfileArgs> doubleProfiles) {
            return doubleProfiles(Output.of(doubleProfiles));
        }

        /**
         * @param doubleProfiles (Output)
         * Double type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder doubleProfiles(DatascanDataProfileResultProfileFieldProfileDoubleProfileArgs... doubleProfiles) {
            return doubleProfiles(List.of(doubleProfiles));
        }

        /**
         * @param integerProfiles (Output)
         * Integer type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder integerProfiles(@Nullable Output<List<DatascanDataProfileResultProfileFieldProfileIntegerProfileArgs>> integerProfiles) {
            $.integerProfiles = integerProfiles;
            return this;
        }

        /**
         * @param integerProfiles (Output)
         * Integer type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder integerProfiles(List<DatascanDataProfileResultProfileFieldProfileIntegerProfileArgs> integerProfiles) {
            return integerProfiles(Output.of(integerProfiles));
        }

        /**
         * @param integerProfiles (Output)
         * Integer type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder integerProfiles(DatascanDataProfileResultProfileFieldProfileIntegerProfileArgs... integerProfiles) {
            return integerProfiles(List.of(integerProfiles));
        }

        /**
         * @param nullRatio (Output)
         * Ratio of rows with null value against total scanned rows.
         * 
         * @return builder
         * 
         */
        public Builder nullRatio(@Nullable Output<Integer> nullRatio) {
            $.nullRatio = nullRatio;
            return this;
        }

        /**
         * @param nullRatio (Output)
         * Ratio of rows with null value against total scanned rows.
         * 
         * @return builder
         * 
         */
        public Builder nullRatio(Integer nullRatio) {
            return nullRatio(Output.of(nullRatio));
        }

        /**
         * @param stringProfiles (Output)
         * String type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stringProfiles(@Nullable Output<List<DatascanDataProfileResultProfileFieldProfileStringProfileArgs>> stringProfiles) {
            $.stringProfiles = stringProfiles;
            return this;
        }

        /**
         * @param stringProfiles (Output)
         * String type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stringProfiles(List<DatascanDataProfileResultProfileFieldProfileStringProfileArgs> stringProfiles) {
            return stringProfiles(Output.of(stringProfiles));
        }

        /**
         * @param stringProfiles (Output)
         * String type field information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stringProfiles(DatascanDataProfileResultProfileFieldProfileStringProfileArgs... stringProfiles) {
            return stringProfiles(List.of(stringProfiles));
        }

        /**
         * @param topNValues The list of top N non-null values and number of times they occur in the scanned data. N is 10 or equal to the number of distinct values in the field, whichever is smaller. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topNValues(@Nullable Output<DatascanDataProfileResultProfileFieldProfileTopNValuesArgs> topNValues) {
            $.topNValues = topNValues;
            return this;
        }

        /**
         * @param topNValues The list of top N non-null values and number of times they occur in the scanned data. N is 10 or equal to the number of distinct values in the field, whichever is smaller. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topNValues(DatascanDataProfileResultProfileFieldProfileTopNValuesArgs topNValues) {
            return topNValues(Output.of(topNValues));
        }

        public DatascanDataProfileResultProfileFieldProfileArgs build() {
            return $;
        }
    }

}
