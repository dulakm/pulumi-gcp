// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.ScopeIamBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScopeIamBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScopeIamBindingArgs Empty = new ScopeIamBindingArgs();

    @Import(name="condition")
    private @Nullable Output<ScopeIamBindingConditionArgs> condition;

    public Optional<Output<ScopeIamBindingConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="members", required=true)
    private Output<List<String>> members;

    public Output<List<String>> members() {
        return this.members;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The role that should be applied. Only one
     * `gcp.gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The role that should be applied. Only one
     * `gcp.gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    @Import(name="scopeId", required=true)
    private Output<String> scopeId;

    public Output<String> scopeId() {
        return this.scopeId;
    }

    private ScopeIamBindingArgs() {}

    private ScopeIamBindingArgs(ScopeIamBindingArgs $) {
        this.condition = $.condition;
        this.members = $.members;
        this.project = $.project;
        this.role = $.role;
        this.scopeId = $.scopeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScopeIamBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScopeIamBindingArgs $;

        public Builder() {
            $ = new ScopeIamBindingArgs();
        }

        public Builder(ScopeIamBindingArgs defaults) {
            $ = new ScopeIamBindingArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<ScopeIamBindingConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(ScopeIamBindingConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder members(Output<List<String>> members) {
            $.members = members;
            return this;
        }

        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param role The role that should be applied. Only one
         * `gcp.gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
         * `[projects|organizations]/{parent-name}/roles/{role-name}`.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role that should be applied. Only one
         * `gcp.gkehub.ScopeIamBinding` can be used per role. Note that custom roles must be of the format
         * `[projects|organizations]/{parent-name}/roles/{role-name}`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder scopeId(Output<String> scopeId) {
            $.scopeId = scopeId;
            return this;
        }

        public Builder scopeId(String scopeId) {
            return scopeId(Output.of(scopeId));
        }

        public ScopeIamBindingArgs build() {
            $.members = Objects.requireNonNull($.members, "expected parameter 'members' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.scopeId = Objects.requireNonNull($.scopeId, "expected parameter 'scopeId' to be non-null");
            return $;
        }
    }

}
