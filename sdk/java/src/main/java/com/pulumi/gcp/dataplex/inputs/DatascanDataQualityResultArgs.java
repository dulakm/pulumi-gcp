// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultDimensionArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultScannedDataArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataQualityResultArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataQualityResultArgs Empty = new DatascanDataQualityResultArgs();

    /**
     * A list of results at the dimension level.
     * Structure is documented below.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<DatascanDataQualityResultDimensionArgs>> dimensions;

    /**
     * @return A list of results at the dimension level.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * (Output)
     * Whether the rule passed or failed.
     * 
     */
    @Import(name="passed")
    private @Nullable Output<Boolean> passed;

    /**
     * @return (Output)
     * Whether the rule passed or failed.
     * 
     */
    public Optional<Output<Boolean>> passed() {
        return Optional.ofNullable(this.passed);
    }

    /**
     * The count of rows scanned.
     * 
     */
    @Import(name="rowCount")
    private @Nullable Output<String> rowCount;

    /**
     * @return The count of rows scanned.
     * 
     */
    public Optional<Output<String>> rowCount() {
        return Optional.ofNullable(this.rowCount);
    }

    /**
     * The list of rules to evaluate against a data source. At least one rule is required.
     * Structure is documented below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<DatascanDataQualityResultRuleArgs>> rules;

    /**
     * @return The list of rules to evaluate against a data source. At least one rule is required.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * (Output)
     * The data scanned for this result.
     * Structure is documented below.
     * 
     */
    @Import(name="scannedDatas")
    private @Nullable Output<List<DatascanDataQualityResultScannedDataArgs>> scannedDatas;

    /**
     * @return (Output)
     * The data scanned for this result.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultScannedDataArgs>>> scannedDatas() {
        return Optional.ofNullable(this.scannedDatas);
    }

    private DatascanDataQualityResultArgs() {}

    private DatascanDataQualityResultArgs(DatascanDataQualityResultArgs $) {
        this.dimensions = $.dimensions;
        this.passed = $.passed;
        this.rowCount = $.rowCount;
        this.rules = $.rules;
        this.scannedDatas = $.scannedDatas;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataQualityResultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataQualityResultArgs $;

        public Builder() {
            $ = new DatascanDataQualityResultArgs();
        }

        public Builder(DatascanDataQualityResultArgs defaults) {
            $ = new DatascanDataQualityResultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dimensions A list of results at the dimension level.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<List<DatascanDataQualityResultDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions A list of results at the dimension level.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(List<DatascanDataQualityResultDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param dimensions A list of results at the dimension level.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(DatascanDataQualityResultDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param passed (Output)
         * Whether the rule passed or failed.
         * 
         * @return builder
         * 
         */
        public Builder passed(@Nullable Output<Boolean> passed) {
            $.passed = passed;
            return this;
        }

        /**
         * @param passed (Output)
         * Whether the rule passed or failed.
         * 
         * @return builder
         * 
         */
        public Builder passed(Boolean passed) {
            return passed(Output.of(passed));
        }

        /**
         * @param rowCount The count of rows scanned.
         * 
         * @return builder
         * 
         */
        public Builder rowCount(@Nullable Output<String> rowCount) {
            $.rowCount = rowCount;
            return this;
        }

        /**
         * @param rowCount The count of rows scanned.
         * 
         * @return builder
         * 
         */
        public Builder rowCount(String rowCount) {
            return rowCount(Output.of(rowCount));
        }

        /**
         * @param rules The list of rules to evaluate against a data source. At least one rule is required.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<DatascanDataQualityResultRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules The list of rules to evaluate against a data source. At least one rule is required.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<DatascanDataQualityResultRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules The list of rules to evaluate against a data source. At least one rule is required.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(DatascanDataQualityResultRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param scannedDatas (Output)
         * The data scanned for this result.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scannedDatas(@Nullable Output<List<DatascanDataQualityResultScannedDataArgs>> scannedDatas) {
            $.scannedDatas = scannedDatas;
            return this;
        }

        /**
         * @param scannedDatas (Output)
         * The data scanned for this result.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scannedDatas(List<DatascanDataQualityResultScannedDataArgs> scannedDatas) {
            return scannedDatas(Output.of(scannedDatas));
        }

        /**
         * @param scannedDatas (Output)
         * The data scanned for this result.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scannedDatas(DatascanDataQualityResultScannedDataArgs... scannedDatas) {
            return scannedDatas(List.of(scannedDatas));
        }

        public DatascanDataQualityResultArgs build() {
            return $;
        }
    }

}
