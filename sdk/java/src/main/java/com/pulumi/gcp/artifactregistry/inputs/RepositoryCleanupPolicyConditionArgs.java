// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryCleanupPolicyConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryCleanupPolicyConditionArgs Empty = new RepositoryCleanupPolicyConditionArgs();

    @Import(name="newerThan")
    private @Nullable Output<String> newerThan;

    public Optional<Output<String>> newerThan() {
        return Optional.ofNullable(this.newerThan);
    }

    @Import(name="olderThan")
    private @Nullable Output<String> olderThan;

    public Optional<Output<String>> olderThan() {
        return Optional.ofNullable(this.olderThan);
    }

    @Import(name="packageNamePrefixes")
    private @Nullable Output<List<String>> packageNamePrefixes;

    public Optional<Output<List<String>>> packageNamePrefixes() {
        return Optional.ofNullable(this.packageNamePrefixes);
    }

    @Import(name="tagPrefixes")
    private @Nullable Output<List<String>> tagPrefixes;

    public Optional<Output<List<String>>> tagPrefixes() {
        return Optional.ofNullable(this.tagPrefixes);
    }

    @Import(name="tagState")
    private @Nullable Output<String> tagState;

    public Optional<Output<String>> tagState() {
        return Optional.ofNullable(this.tagState);
    }

    @Import(name="versionNamePrefixes")
    private @Nullable Output<List<String>> versionNamePrefixes;

    public Optional<Output<List<String>>> versionNamePrefixes() {
        return Optional.ofNullable(this.versionNamePrefixes);
    }

    private RepositoryCleanupPolicyConditionArgs() {}

    private RepositoryCleanupPolicyConditionArgs(RepositoryCleanupPolicyConditionArgs $) {
        this.newerThan = $.newerThan;
        this.olderThan = $.olderThan;
        this.packageNamePrefixes = $.packageNamePrefixes;
        this.tagPrefixes = $.tagPrefixes;
        this.tagState = $.tagState;
        this.versionNamePrefixes = $.versionNamePrefixes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryCleanupPolicyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryCleanupPolicyConditionArgs $;

        public Builder() {
            $ = new RepositoryCleanupPolicyConditionArgs();
        }

        public Builder(RepositoryCleanupPolicyConditionArgs defaults) {
            $ = new RepositoryCleanupPolicyConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder newerThan(@Nullable Output<String> newerThan) {
            $.newerThan = newerThan;
            return this;
        }

        public Builder newerThan(String newerThan) {
            return newerThan(Output.of(newerThan));
        }

        public Builder olderThan(@Nullable Output<String> olderThan) {
            $.olderThan = olderThan;
            return this;
        }

        public Builder olderThan(String olderThan) {
            return olderThan(Output.of(olderThan));
        }

        public Builder packageNamePrefixes(@Nullable Output<List<String>> packageNamePrefixes) {
            $.packageNamePrefixes = packageNamePrefixes;
            return this;
        }

        public Builder packageNamePrefixes(List<String> packageNamePrefixes) {
            return packageNamePrefixes(Output.of(packageNamePrefixes));
        }

        public Builder packageNamePrefixes(String... packageNamePrefixes) {
            return packageNamePrefixes(List.of(packageNamePrefixes));
        }

        public Builder tagPrefixes(@Nullable Output<List<String>> tagPrefixes) {
            $.tagPrefixes = tagPrefixes;
            return this;
        }

        public Builder tagPrefixes(List<String> tagPrefixes) {
            return tagPrefixes(Output.of(tagPrefixes));
        }

        public Builder tagPrefixes(String... tagPrefixes) {
            return tagPrefixes(List.of(tagPrefixes));
        }

        public Builder tagState(@Nullable Output<String> tagState) {
            $.tagState = tagState;
            return this;
        }

        public Builder tagState(String tagState) {
            return tagState(Output.of(tagState));
        }

        public Builder versionNamePrefixes(@Nullable Output<List<String>> versionNamePrefixes) {
            $.versionNamePrefixes = versionNamePrefixes;
            return this;
        }

        public Builder versionNamePrefixes(List<String> versionNamePrefixes) {
            return versionNamePrefixes(Output.of(versionNamePrefixes));
        }

        public Builder versionNamePrefixes(String... versionNamePrefixes) {
            return versionNamePrefixes(List.of(versionNamePrefixes));
        }

        public RepositoryCleanupPolicyConditionArgs build() {
            return $;
        }
    }

}
