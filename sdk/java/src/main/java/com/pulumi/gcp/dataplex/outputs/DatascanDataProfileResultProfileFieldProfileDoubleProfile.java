// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatascanDataProfileResultProfileFieldProfileDoubleProfile {
    /**
     * @return Average of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    private @Nullable Integer average;
    /**
     * @return Maximum of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    private @Nullable String max;
    /**
     * @return Minimum of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    private @Nullable String min;
    /**
     * @return A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.
     * 
     */
    private @Nullable String quartiles;
    /**
     * @return Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    private @Nullable Integer standardDeviation;

    private DatascanDataProfileResultProfileFieldProfileDoubleProfile() {}
    /**
     * @return Average of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    public Optional<Integer> average() {
        return Optional.ofNullable(this.average);
    }
    /**
     * @return Maximum of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    public Optional<String> max() {
        return Optional.ofNullable(this.max);
    }
    /**
     * @return Minimum of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    public Optional<String> min() {
        return Optional.ofNullable(this.min);
    }
    /**
     * @return A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.
     * 
     */
    public Optional<String> quartiles() {
        return Optional.ofNullable(this.quartiles);
    }
    /**
     * @return Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.
     * 
     */
    public Optional<Integer> standardDeviation() {
        return Optional.ofNullable(this.standardDeviation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatascanDataProfileResultProfileFieldProfileDoubleProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer average;
        private @Nullable String max;
        private @Nullable String min;
        private @Nullable String quartiles;
        private @Nullable Integer standardDeviation;
        public Builder() {}
        public Builder(DatascanDataProfileResultProfileFieldProfileDoubleProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.average = defaults.average;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.quartiles = defaults.quartiles;
    	      this.standardDeviation = defaults.standardDeviation;
        }

        @CustomType.Setter
        public Builder average(@Nullable Integer average) {
            this.average = average;
            return this;
        }
        @CustomType.Setter
        public Builder max(@Nullable String max) {
            this.max = max;
            return this;
        }
        @CustomType.Setter
        public Builder min(@Nullable String min) {
            this.min = min;
            return this;
        }
        @CustomType.Setter
        public Builder quartiles(@Nullable String quartiles) {
            this.quartiles = quartiles;
            return this;
        }
        @CustomType.Setter
        public Builder standardDeviation(@Nullable Integer standardDeviation) {
            this.standardDeviation = standardDeviation;
            return this;
        }
        public DatascanDataProfileResultProfileFieldProfileDoubleProfile build() {
            final var o = new DatascanDataProfileResultProfileFieldProfileDoubleProfile();
            o.average = average;
            o.max = max;
            o.min = min;
            o.quartiles = quartiles;
            o.standardDeviation = standardDeviation;
            return o;
        }
    }
}
