// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataQualityResultRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataQualityResultRuleArgs Empty = new DatascanDataQualityResultRuleArgs();

    /**
     * (Output)
     * The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.
     * Evaluated count can be configured to either
     * 1. include all rows (default) - with null rows automatically failing rule evaluation, or
     * 2. exclude null rows from the evaluatedCount, by setting ignore_nulls = true.
     * 
     */
    @Import(name="evaluatedCount")
    private @Nullable Output<String> evaluatedCount;

    /**
     * @return (Output)
     * The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.
     * Evaluated count can be configured to either
     * 1. include all rows (default) - with null rows automatically failing rule evaluation, or
     * 2. exclude null rows from the evaluatedCount, by setting ignore_nulls = true.
     * 
     */
    public Optional<Output<String>> evaluatedCount() {
        return Optional.ofNullable(this.evaluatedCount);
    }

    /**
     * (Output)
     * The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.
     * 
     */
    @Import(name="failingRowsQuery")
    private @Nullable Output<String> failingRowsQuery;

    /**
     * @return (Output)
     * The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.
     * 
     */
    public Optional<Output<String>> failingRowsQuery() {
        return Optional.ofNullable(this.failingRowsQuery);
    }

    /**
     * (Output)
     * The number of rows with null values in the specified column.
     * 
     */
    @Import(name="nullCount")
    private @Nullable Output<String> nullCount;

    /**
     * @return (Output)
     * The number of rows with null values in the specified column.
     * 
     */
    public Optional<Output<String>> nullCount() {
        return Optional.ofNullable(this.nullCount);
    }

    /**
     * (Output)
     * The ratio of passedCount / evaluatedCount. This field is only valid for ColumnMap type rules.
     * 
     */
    @Import(name="passRatio")
    private @Nullable Output<Integer> passRatio;

    /**
     * @return (Output)
     * The ratio of passedCount / evaluatedCount. This field is only valid for ColumnMap type rules.
     * 
     */
    public Optional<Output<Integer>> passRatio() {
        return Optional.ofNullable(this.passRatio);
    }

    /**
     * (Output)
     * Whether the rule passed or failed.
     * 
     */
    @Import(name="passed")
    private @Nullable Output<Boolean> passed;

    /**
     * @return (Output)
     * Whether the rule passed or failed.
     * 
     */
    public Optional<Output<Boolean>> passed() {
        return Optional.ofNullable(this.passed);
    }

    /**
     * (Output)
     * The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.
     * 
     */
    @Import(name="passedCount")
    private @Nullable Output<String> passedCount;

    /**
     * @return (Output)
     * The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.
     * 
     */
    public Optional<Output<String>> passedCount() {
        return Optional.ofNullable(this.passedCount);
    }

    /**
     * (Output)
     * The rule specified in the DataQualitySpec, as is.
     * Structure is documented below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleArgs>> rules;

    /**
     * @return (Output)
     * The rule specified in the DataQualitySpec, as is.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private DatascanDataQualityResultRuleArgs() {}

    private DatascanDataQualityResultRuleArgs(DatascanDataQualityResultRuleArgs $) {
        this.evaluatedCount = $.evaluatedCount;
        this.failingRowsQuery = $.failingRowsQuery;
        this.nullCount = $.nullCount;
        this.passRatio = $.passRatio;
        this.passed = $.passed;
        this.passedCount = $.passedCount;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataQualityResultRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataQualityResultRuleArgs $;

        public Builder() {
            $ = new DatascanDataQualityResultRuleArgs();
        }

        public Builder(DatascanDataQualityResultRuleArgs defaults) {
            $ = new DatascanDataQualityResultRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param evaluatedCount (Output)
         * The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.
         * Evaluated count can be configured to either
         * 1. include all rows (default) - with null rows automatically failing rule evaluation, or
         * 2. exclude null rows from the evaluatedCount, by setting ignore_nulls = true.
         * 
         * @return builder
         * 
         */
        public Builder evaluatedCount(@Nullable Output<String> evaluatedCount) {
            $.evaluatedCount = evaluatedCount;
            return this;
        }

        /**
         * @param evaluatedCount (Output)
         * The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.
         * Evaluated count can be configured to either
         * 1. include all rows (default) - with null rows automatically failing rule evaluation, or
         * 2. exclude null rows from the evaluatedCount, by setting ignore_nulls = true.
         * 
         * @return builder
         * 
         */
        public Builder evaluatedCount(String evaluatedCount) {
            return evaluatedCount(Output.of(evaluatedCount));
        }

        /**
         * @param failingRowsQuery (Output)
         * The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.
         * 
         * @return builder
         * 
         */
        public Builder failingRowsQuery(@Nullable Output<String> failingRowsQuery) {
            $.failingRowsQuery = failingRowsQuery;
            return this;
        }

        /**
         * @param failingRowsQuery (Output)
         * The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.
         * 
         * @return builder
         * 
         */
        public Builder failingRowsQuery(String failingRowsQuery) {
            return failingRowsQuery(Output.of(failingRowsQuery));
        }

        /**
         * @param nullCount (Output)
         * The number of rows with null values in the specified column.
         * 
         * @return builder
         * 
         */
        public Builder nullCount(@Nullable Output<String> nullCount) {
            $.nullCount = nullCount;
            return this;
        }

        /**
         * @param nullCount (Output)
         * The number of rows with null values in the specified column.
         * 
         * @return builder
         * 
         */
        public Builder nullCount(String nullCount) {
            return nullCount(Output.of(nullCount));
        }

        /**
         * @param passRatio (Output)
         * The ratio of passedCount / evaluatedCount. This field is only valid for ColumnMap type rules.
         * 
         * @return builder
         * 
         */
        public Builder passRatio(@Nullable Output<Integer> passRatio) {
            $.passRatio = passRatio;
            return this;
        }

        /**
         * @param passRatio (Output)
         * The ratio of passedCount / evaluatedCount. This field is only valid for ColumnMap type rules.
         * 
         * @return builder
         * 
         */
        public Builder passRatio(Integer passRatio) {
            return passRatio(Output.of(passRatio));
        }

        /**
         * @param passed (Output)
         * Whether the rule passed or failed.
         * 
         * @return builder
         * 
         */
        public Builder passed(@Nullable Output<Boolean> passed) {
            $.passed = passed;
            return this;
        }

        /**
         * @param passed (Output)
         * Whether the rule passed or failed.
         * 
         * @return builder
         * 
         */
        public Builder passed(Boolean passed) {
            return passed(Output.of(passed));
        }

        /**
         * @param passedCount (Output)
         * The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.
         * 
         * @return builder
         * 
         */
        public Builder passedCount(@Nullable Output<String> passedCount) {
            $.passedCount = passedCount;
            return this;
        }

        /**
         * @param passedCount (Output)
         * The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.
         * 
         * @return builder
         * 
         */
        public Builder passedCount(String passedCount) {
            return passedCount(Output.of(passedCount));
        }

        /**
         * @param rules (Output)
         * The rule specified in the DataQualitySpec, as is.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<DatascanDataQualityResultRuleRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules (Output)
         * The rule specified in the DataQualitySpec, as is.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<DatascanDataQualityResultRuleRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules (Output)
         * The rule specified in the DataQualitySpec, as is.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(DatascanDataQualityResultRuleRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public DatascanDataQualityResultRuleArgs build() {
            return $;
        }
    }

}
