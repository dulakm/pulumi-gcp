// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.ClusterMaintenancePolicyDailyMaintenanceWindowArgs;
import com.pulumi.gcp.container.inputs.ClusterMaintenancePolicyMaintenanceExclusionArgs;
import com.pulumi.gcp.container.inputs.ClusterMaintenancePolicyRecurringWindowArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterMaintenancePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMaintenancePolicyArgs Empty = new ClusterMaintenancePolicyArgs();

    /**
     * structure documented below.
     * 
     */
    @Import(name="dailyMaintenanceWindow")
    private @Nullable Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> dailyMaintenanceWindow;

    /**
     * @return structure documented below.
     * 
     */
    public Optional<Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs>> dailyMaintenanceWindow() {
        return Optional.ofNullable(this.dailyMaintenanceWindow);
    }

    /**
     * structure documented below
     * 
     * In beta, one or the other of `recurring_window` and `daily_maintenance_window` is required if a `maintenance_policy` block is supplied.
     * 
     */
    @Import(name="maintenanceExclusions")
    private @Nullable Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> maintenanceExclusions;

    /**
     * @return structure documented below
     * 
     * In beta, one or the other of `recurring_window` and `daily_maintenance_window` is required if a `maintenance_policy` block is supplied.
     * 
     */
    public Optional<Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>>> maintenanceExclusions() {
        return Optional.ofNullable(this.maintenanceExclusions);
    }

    /**
     * structure documented below
     * 
     */
    @Import(name="recurringWindow")
    private @Nullable Output<ClusterMaintenancePolicyRecurringWindowArgs> recurringWindow;

    /**
     * @return structure documented below
     * 
     */
    public Optional<Output<ClusterMaintenancePolicyRecurringWindowArgs>> recurringWindow() {
        return Optional.ofNullable(this.recurringWindow);
    }

    private ClusterMaintenancePolicyArgs() {}

    private ClusterMaintenancePolicyArgs(ClusterMaintenancePolicyArgs $) {
        this.dailyMaintenanceWindow = $.dailyMaintenanceWindow;
        this.maintenanceExclusions = $.maintenanceExclusions;
        this.recurringWindow = $.recurringWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMaintenancePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMaintenancePolicyArgs $;

        public Builder() {
            $ = new ClusterMaintenancePolicyArgs();
        }

        public Builder(ClusterMaintenancePolicyArgs defaults) {
            $ = new ClusterMaintenancePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyMaintenanceWindow structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder dailyMaintenanceWindow(@Nullable Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> dailyMaintenanceWindow) {
            $.dailyMaintenanceWindow = dailyMaintenanceWindow;
            return this;
        }

        /**
         * @param dailyMaintenanceWindow structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder dailyMaintenanceWindow(ClusterMaintenancePolicyDailyMaintenanceWindowArgs dailyMaintenanceWindow) {
            return dailyMaintenanceWindow(Output.of(dailyMaintenanceWindow));
        }

        /**
         * @param maintenanceExclusions structure documented below
         * 
         * In beta, one or the other of `recurring_window` and `daily_maintenance_window` is required if a `maintenance_policy` block is supplied.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceExclusions(@Nullable Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> maintenanceExclusions) {
            $.maintenanceExclusions = maintenanceExclusions;
            return this;
        }

        /**
         * @param maintenanceExclusions structure documented below
         * 
         * In beta, one or the other of `recurring_window` and `daily_maintenance_window` is required if a `maintenance_policy` block is supplied.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceExclusions(List<ClusterMaintenancePolicyMaintenanceExclusionArgs> maintenanceExclusions) {
            return maintenanceExclusions(Output.of(maintenanceExclusions));
        }

        /**
         * @param maintenanceExclusions structure documented below
         * 
         * In beta, one or the other of `recurring_window` and `daily_maintenance_window` is required if a `maintenance_policy` block is supplied.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceExclusions(ClusterMaintenancePolicyMaintenanceExclusionArgs... maintenanceExclusions) {
            return maintenanceExclusions(List.of(maintenanceExclusions));
        }

        /**
         * @param recurringWindow structure documented below
         * 
         * @return builder
         * 
         */
        public Builder recurringWindow(@Nullable Output<ClusterMaintenancePolicyRecurringWindowArgs> recurringWindow) {
            $.recurringWindow = recurringWindow;
            return this;
        }

        /**
         * @param recurringWindow structure documented below
         * 
         * @return builder
         * 
         */
        public Builder recurringWindow(ClusterMaintenancePolicyRecurringWindowArgs recurringWindow) {
            return recurringWindow(Output.of(recurringWindow));
        }

        public ClusterMaintenancePolicyArgs build() {
            return $;
        }
    }

}
