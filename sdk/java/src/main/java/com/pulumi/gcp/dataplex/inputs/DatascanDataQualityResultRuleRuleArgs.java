// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleNonNullExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleRangeExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleRegexExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleRowConditionExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleSetExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleTableConditionExpectationArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualityResultRuleRuleUniquenessExpectationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataQualityResultRuleRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataQualityResultRuleRuleArgs Empty = new DatascanDataQualityResultRuleRuleArgs();

    /**
     * The unnested column which this rule is evaluated against.
     * 
     */
    @Import(name="column")
    private @Nullable Output<String> column;

    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    public Optional<Output<String>> column() {
        return Optional.ofNullable(this.column);
    }

    /**
     * The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are [&#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;INTEGRITY&#34;]
     * 
     */
    @Import(name="dimension")
    private @Nullable Output<String> dimension;

    /**
     * @return The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are [&#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;INTEGRITY&#34;]
     * 
     */
    public Optional<Output<String>> dimension() {
        return Optional.ofNullable(this.dimension);
    }

    /**
     * Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    @Import(name="ignoreNull")
    private @Nullable Output<Boolean> ignoreNull;

    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    public Optional<Output<Boolean>> ignoreNull() {
        return Optional.ofNullable(this.ignoreNull);
    }

    /**
     * ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    @Import(name="nonNullExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleNonNullExpectationArgs>> nonNullExpectations;

    /**
     * @return ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleNonNullExpectationArgs>>> nonNullExpectations() {
        return Optional.ofNullable(this.nonNullExpectations);
    }

    /**
     * ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    @Import(name="rangeExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleRangeExpectationArgs>> rangeExpectations;

    /**
     * @return ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleRangeExpectationArgs>>> rangeExpectations() {
        return Optional.ofNullable(this.rangeExpectations);
    }

    /**
     * ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    @Import(name="regexExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleRegexExpectationArgs>> regexExpectations;

    /**
     * @return ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleRegexExpectationArgs>>> regexExpectations() {
        return Optional.ofNullable(this.regexExpectations);
    }

    /**
     * Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    @Import(name="rowConditionExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleRowConditionExpectationArgs>> rowConditionExpectations;

    /**
     * @return Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleRowConditionExpectationArgs>>> rowConditionExpectations() {
        return Optional.ofNullable(this.rowConditionExpectations);
    }

    /**
     * ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    @Import(name="setExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleSetExpectationArgs>> setExpectations;

    /**
     * @return ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleSetExpectationArgs>>> setExpectations() {
        return Optional.ofNullable(this.setExpectations);
    }

    /**
     * ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    @Import(name="statisticRangeExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs>> statisticRangeExpectations;

    /**
     * @return ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs>>> statisticRangeExpectations() {
        return Optional.ofNullable(this.statisticRangeExpectations);
    }

    /**
     * Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    @Import(name="tableConditionExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleTableConditionExpectationArgs>> tableConditionExpectations;

    /**
     * @return Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleTableConditionExpectationArgs>>> tableConditionExpectations() {
        return Optional.ofNullable(this.tableConditionExpectations);
    }

    /**
     * The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * ColumnAggregate rule which evaluates whether the column has duplicates.
     * 
     */
    @Import(name="uniquenessExpectations")
    private @Nullable Output<List<DatascanDataQualityResultRuleRuleUniquenessExpectationArgs>> uniquenessExpectations;

    /**
     * @return ColumnAggregate rule which evaluates whether the column has duplicates.
     * 
     */
    public Optional<Output<List<DatascanDataQualityResultRuleRuleUniquenessExpectationArgs>>> uniquenessExpectations() {
        return Optional.ofNullable(this.uniquenessExpectations);
    }

    private DatascanDataQualityResultRuleRuleArgs() {}

    private DatascanDataQualityResultRuleRuleArgs(DatascanDataQualityResultRuleRuleArgs $) {
        this.column = $.column;
        this.dimension = $.dimension;
        this.ignoreNull = $.ignoreNull;
        this.nonNullExpectations = $.nonNullExpectations;
        this.rangeExpectations = $.rangeExpectations;
        this.regexExpectations = $.regexExpectations;
        this.rowConditionExpectations = $.rowConditionExpectations;
        this.setExpectations = $.setExpectations;
        this.statisticRangeExpectations = $.statisticRangeExpectations;
        this.tableConditionExpectations = $.tableConditionExpectations;
        this.threshold = $.threshold;
        this.uniquenessExpectations = $.uniquenessExpectations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataQualityResultRuleRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataQualityResultRuleRuleArgs $;

        public Builder() {
            $ = new DatascanDataQualityResultRuleRuleArgs();
        }

        public Builder(DatascanDataQualityResultRuleRuleArgs defaults) {
            $ = new DatascanDataQualityResultRuleRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param column The unnested column which this rule is evaluated against.
         * 
         * @return builder
         * 
         */
        public Builder column(@Nullable Output<String> column) {
            $.column = column;
            return this;
        }

        /**
         * @param column The unnested column which this rule is evaluated against.
         * 
         * @return builder
         * 
         */
        public Builder column(String column) {
            return column(Output.of(column));
        }

        /**
         * @param dimension The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are [&#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;INTEGRITY&#34;]
         * 
         * @return builder
         * 
         */
        public Builder dimension(@Nullable Output<String> dimension) {
            $.dimension = dimension;
            return this;
        }

        /**
         * @param dimension The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are [&#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;INTEGRITY&#34;]
         * 
         * @return builder
         * 
         */
        public Builder dimension(String dimension) {
            return dimension(Output.of(dimension));
        }

        /**
         * @param ignoreNull Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
         * 
         * @return builder
         * 
         */
        public Builder ignoreNull(@Nullable Output<Boolean> ignoreNull) {
            $.ignoreNull = ignoreNull;
            return this;
        }

        /**
         * @param ignoreNull Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
         * 
         * @return builder
         * 
         */
        public Builder ignoreNull(Boolean ignoreNull) {
            return ignoreNull(Output.of(ignoreNull));
        }

        /**
         * @param nonNullExpectations ColumnMap rule which evaluates whether each column value is null.
         * 
         * @return builder
         * 
         */
        public Builder nonNullExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleNonNullExpectationArgs>> nonNullExpectations) {
            $.nonNullExpectations = nonNullExpectations;
            return this;
        }

        /**
         * @param nonNullExpectations ColumnMap rule which evaluates whether each column value is null.
         * 
         * @return builder
         * 
         */
        public Builder nonNullExpectations(List<DatascanDataQualityResultRuleRuleNonNullExpectationArgs> nonNullExpectations) {
            return nonNullExpectations(Output.of(nonNullExpectations));
        }

        /**
         * @param nonNullExpectations ColumnMap rule which evaluates whether each column value is null.
         * 
         * @return builder
         * 
         */
        public Builder nonNullExpectations(DatascanDataQualityResultRuleRuleNonNullExpectationArgs... nonNullExpectations) {
            return nonNullExpectations(List.of(nonNullExpectations));
        }

        /**
         * @param rangeExpectations ColumnMap rule which evaluates whether each column value lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rangeExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleRangeExpectationArgs>> rangeExpectations) {
            $.rangeExpectations = rangeExpectations;
            return this;
        }

        /**
         * @param rangeExpectations ColumnMap rule which evaluates whether each column value lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rangeExpectations(List<DatascanDataQualityResultRuleRuleRangeExpectationArgs> rangeExpectations) {
            return rangeExpectations(Output.of(rangeExpectations));
        }

        /**
         * @param rangeExpectations ColumnMap rule which evaluates whether each column value lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rangeExpectations(DatascanDataQualityResultRuleRuleRangeExpectationArgs... rangeExpectations) {
            return rangeExpectations(List.of(rangeExpectations));
        }

        /**
         * @param regexExpectations ColumnMap rule which evaluates whether each column value matches a specified regex.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder regexExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleRegexExpectationArgs>> regexExpectations) {
            $.regexExpectations = regexExpectations;
            return this;
        }

        /**
         * @param regexExpectations ColumnMap rule which evaluates whether each column value matches a specified regex.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder regexExpectations(List<DatascanDataQualityResultRuleRuleRegexExpectationArgs> regexExpectations) {
            return regexExpectations(Output.of(regexExpectations));
        }

        /**
         * @param regexExpectations ColumnMap rule which evaluates whether each column value matches a specified regex.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder regexExpectations(DatascanDataQualityResultRuleRuleRegexExpectationArgs... regexExpectations) {
            return regexExpectations(List.of(regexExpectations));
        }

        /**
         * @param rowConditionExpectations Table rule which evaluates whether each row passes the specified condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowConditionExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleRowConditionExpectationArgs>> rowConditionExpectations) {
            $.rowConditionExpectations = rowConditionExpectations;
            return this;
        }

        /**
         * @param rowConditionExpectations Table rule which evaluates whether each row passes the specified condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowConditionExpectations(List<DatascanDataQualityResultRuleRuleRowConditionExpectationArgs> rowConditionExpectations) {
            return rowConditionExpectations(Output.of(rowConditionExpectations));
        }

        /**
         * @param rowConditionExpectations Table rule which evaluates whether each row passes the specified condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowConditionExpectations(DatascanDataQualityResultRuleRuleRowConditionExpectationArgs... rowConditionExpectations) {
            return rowConditionExpectations(List.of(rowConditionExpectations));
        }

        /**
         * @param setExpectations ColumnMap rule which evaluates whether each column value is contained by a specified set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder setExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleSetExpectationArgs>> setExpectations) {
            $.setExpectations = setExpectations;
            return this;
        }

        /**
         * @param setExpectations ColumnMap rule which evaluates whether each column value is contained by a specified set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder setExpectations(List<DatascanDataQualityResultRuleRuleSetExpectationArgs> setExpectations) {
            return setExpectations(Output.of(setExpectations));
        }

        /**
         * @param setExpectations ColumnMap rule which evaluates whether each column value is contained by a specified set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder setExpectations(DatascanDataQualityResultRuleRuleSetExpectationArgs... setExpectations) {
            return setExpectations(List.of(setExpectations));
        }

        /**
         * @param statisticRangeExpectations ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statisticRangeExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs>> statisticRangeExpectations) {
            $.statisticRangeExpectations = statisticRangeExpectations;
            return this;
        }

        /**
         * @param statisticRangeExpectations ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statisticRangeExpectations(List<DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs> statisticRangeExpectations) {
            return statisticRangeExpectations(Output.of(statisticRangeExpectations));
        }

        /**
         * @param statisticRangeExpectations ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statisticRangeExpectations(DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs... statisticRangeExpectations) {
            return statisticRangeExpectations(List.of(statisticRangeExpectations));
        }

        /**
         * @param tableConditionExpectations Table rule which evaluates whether the provided expression is true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tableConditionExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleTableConditionExpectationArgs>> tableConditionExpectations) {
            $.tableConditionExpectations = tableConditionExpectations;
            return this;
        }

        /**
         * @param tableConditionExpectations Table rule which evaluates whether the provided expression is true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tableConditionExpectations(List<DatascanDataQualityResultRuleRuleTableConditionExpectationArgs> tableConditionExpectations) {
            return tableConditionExpectations(Output.of(tableConditionExpectations));
        }

        /**
         * @param tableConditionExpectations Table rule which evaluates whether the provided expression is true.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tableConditionExpectations(DatascanDataQualityResultRuleRuleTableConditionExpectationArgs... tableConditionExpectations) {
            return tableConditionExpectations(List.of(tableConditionExpectations));
        }

        /**
         * @param threshold The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param uniquenessExpectations ColumnAggregate rule which evaluates whether the column has duplicates.
         * 
         * @return builder
         * 
         */
        public Builder uniquenessExpectations(@Nullable Output<List<DatascanDataQualityResultRuleRuleUniquenessExpectationArgs>> uniquenessExpectations) {
            $.uniquenessExpectations = uniquenessExpectations;
            return this;
        }

        /**
         * @param uniquenessExpectations ColumnAggregate rule which evaluates whether the column has duplicates.
         * 
         * @return builder
         * 
         */
        public Builder uniquenessExpectations(List<DatascanDataQualityResultRuleRuleUniquenessExpectationArgs> uniquenessExpectations) {
            return uniquenessExpectations(Output.of(uniquenessExpectations));
        }

        /**
         * @param uniquenessExpectations ColumnAggregate rule which evaluates whether the column has duplicates.
         * 
         * @return builder
         * 
         */
        public Builder uniquenessExpectations(DatascanDataQualityResultRuleRuleUniquenessExpectationArgs... uniquenessExpectations) {
            return uniquenessExpectations(List.of(uniquenessExpectations));
        }

        public DatascanDataQualityResultRuleRuleArgs build() {
            return $;
        }
    }

}
