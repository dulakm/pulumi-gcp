// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleNonNullExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleRangeExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleRegexExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleRowConditionExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleSetExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleTableConditionExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualityResultRuleRuleUniquenessExpectation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatascanDataQualityResultRuleRule {
    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    private @Nullable String column;
    /**
     * @return The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are [&#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;INTEGRITY&#34;]
     * 
     */
    private @Nullable String dimension;
    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    private @Nullable Boolean ignoreNull;
    /**
     * @return ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleNonNullExpectation> nonNullExpectations;
    /**
     * @return ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleRangeExpectation> rangeExpectations;
    /**
     * @return ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleRegexExpectation> regexExpectations;
    /**
     * @return Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleRowConditionExpectation> rowConditionExpectations;
    /**
     * @return ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleSetExpectation> setExpectations;
    /**
     * @return ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleStatisticRangeExpectation> statisticRangeExpectations;
    /**
     * @return Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleTableConditionExpectation> tableConditionExpectations;
    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    private @Nullable Integer threshold;
    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    private @Nullable List<DatascanDataQualityResultRuleRuleUniquenessExpectation> uniquenessExpectations;

    private DatascanDataQualityResultRuleRule() {}
    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    public Optional<String> column() {
        return Optional.ofNullable(this.column);
    }
    /**
     * @return The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are [&#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;INTEGRITY&#34;]
     * 
     */
    public Optional<String> dimension() {
        return Optional.ofNullable(this.dimension);
    }
    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    public Optional<Boolean> ignoreNull() {
        return Optional.ofNullable(this.ignoreNull);
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleNonNullExpectation> nonNullExpectations() {
        return this.nonNullExpectations == null ? List.of() : this.nonNullExpectations;
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleRangeExpectation> rangeExpectations() {
        return this.rangeExpectations == null ? List.of() : this.rangeExpectations;
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleRegexExpectation> regexExpectations() {
        return this.regexExpectations == null ? List.of() : this.regexExpectations;
    }
    /**
     * @return Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleRowConditionExpectation> rowConditionExpectations() {
        return this.rowConditionExpectations == null ? List.of() : this.rowConditionExpectations;
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleSetExpectation> setExpectations() {
        return this.setExpectations == null ? List.of() : this.setExpectations;
    }
    /**
     * @return ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleStatisticRangeExpectation> statisticRangeExpectations() {
        return this.statisticRangeExpectations == null ? List.of() : this.statisticRangeExpectations;
    }
    /**
     * @return Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleTableConditionExpectation> tableConditionExpectations() {
        return this.tableConditionExpectations == null ? List.of() : this.tableConditionExpectations;
    }
    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    public List<DatascanDataQualityResultRuleRuleUniquenessExpectation> uniquenessExpectations() {
        return this.uniquenessExpectations == null ? List.of() : this.uniquenessExpectations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatascanDataQualityResultRuleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String column;
        private @Nullable String dimension;
        private @Nullable Boolean ignoreNull;
        private @Nullable List<DatascanDataQualityResultRuleRuleNonNullExpectation> nonNullExpectations;
        private @Nullable List<DatascanDataQualityResultRuleRuleRangeExpectation> rangeExpectations;
        private @Nullable List<DatascanDataQualityResultRuleRuleRegexExpectation> regexExpectations;
        private @Nullable List<DatascanDataQualityResultRuleRuleRowConditionExpectation> rowConditionExpectations;
        private @Nullable List<DatascanDataQualityResultRuleRuleSetExpectation> setExpectations;
        private @Nullable List<DatascanDataQualityResultRuleRuleStatisticRangeExpectation> statisticRangeExpectations;
        private @Nullable List<DatascanDataQualityResultRuleRuleTableConditionExpectation> tableConditionExpectations;
        private @Nullable Integer threshold;
        private @Nullable List<DatascanDataQualityResultRuleRuleUniquenessExpectation> uniquenessExpectations;
        public Builder() {}
        public Builder(DatascanDataQualityResultRuleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.dimension = defaults.dimension;
    	      this.ignoreNull = defaults.ignoreNull;
    	      this.nonNullExpectations = defaults.nonNullExpectations;
    	      this.rangeExpectations = defaults.rangeExpectations;
    	      this.regexExpectations = defaults.regexExpectations;
    	      this.rowConditionExpectations = defaults.rowConditionExpectations;
    	      this.setExpectations = defaults.setExpectations;
    	      this.statisticRangeExpectations = defaults.statisticRangeExpectations;
    	      this.tableConditionExpectations = defaults.tableConditionExpectations;
    	      this.threshold = defaults.threshold;
    	      this.uniquenessExpectations = defaults.uniquenessExpectations;
        }

        @CustomType.Setter
        public Builder column(@Nullable String column) {
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder dimension(@Nullable String dimension) {
            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreNull(@Nullable Boolean ignoreNull) {
            this.ignoreNull = ignoreNull;
            return this;
        }
        @CustomType.Setter
        public Builder nonNullExpectations(@Nullable List<DatascanDataQualityResultRuleRuleNonNullExpectation> nonNullExpectations) {
            this.nonNullExpectations = nonNullExpectations;
            return this;
        }
        public Builder nonNullExpectations(DatascanDataQualityResultRuleRuleNonNullExpectation... nonNullExpectations) {
            return nonNullExpectations(List.of(nonNullExpectations));
        }
        @CustomType.Setter
        public Builder rangeExpectations(@Nullable List<DatascanDataQualityResultRuleRuleRangeExpectation> rangeExpectations) {
            this.rangeExpectations = rangeExpectations;
            return this;
        }
        public Builder rangeExpectations(DatascanDataQualityResultRuleRuleRangeExpectation... rangeExpectations) {
            return rangeExpectations(List.of(rangeExpectations));
        }
        @CustomType.Setter
        public Builder regexExpectations(@Nullable List<DatascanDataQualityResultRuleRuleRegexExpectation> regexExpectations) {
            this.regexExpectations = regexExpectations;
            return this;
        }
        public Builder regexExpectations(DatascanDataQualityResultRuleRuleRegexExpectation... regexExpectations) {
            return regexExpectations(List.of(regexExpectations));
        }
        @CustomType.Setter
        public Builder rowConditionExpectations(@Nullable List<DatascanDataQualityResultRuleRuleRowConditionExpectation> rowConditionExpectations) {
            this.rowConditionExpectations = rowConditionExpectations;
            return this;
        }
        public Builder rowConditionExpectations(DatascanDataQualityResultRuleRuleRowConditionExpectation... rowConditionExpectations) {
            return rowConditionExpectations(List.of(rowConditionExpectations));
        }
        @CustomType.Setter
        public Builder setExpectations(@Nullable List<DatascanDataQualityResultRuleRuleSetExpectation> setExpectations) {
            this.setExpectations = setExpectations;
            return this;
        }
        public Builder setExpectations(DatascanDataQualityResultRuleRuleSetExpectation... setExpectations) {
            return setExpectations(List.of(setExpectations));
        }
        @CustomType.Setter
        public Builder statisticRangeExpectations(@Nullable List<DatascanDataQualityResultRuleRuleStatisticRangeExpectation> statisticRangeExpectations) {
            this.statisticRangeExpectations = statisticRangeExpectations;
            return this;
        }
        public Builder statisticRangeExpectations(DatascanDataQualityResultRuleRuleStatisticRangeExpectation... statisticRangeExpectations) {
            return statisticRangeExpectations(List.of(statisticRangeExpectations));
        }
        @CustomType.Setter
        public Builder tableConditionExpectations(@Nullable List<DatascanDataQualityResultRuleRuleTableConditionExpectation> tableConditionExpectations) {
            this.tableConditionExpectations = tableConditionExpectations;
            return this;
        }
        public Builder tableConditionExpectations(DatascanDataQualityResultRuleRuleTableConditionExpectation... tableConditionExpectations) {
            return tableConditionExpectations(List.of(tableConditionExpectations));
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Integer threshold) {
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder uniquenessExpectations(@Nullable List<DatascanDataQualityResultRuleRuleUniquenessExpectation> uniquenessExpectations) {
            this.uniquenessExpectations = uniquenessExpectations;
            return this;
        }
        public Builder uniquenessExpectations(DatascanDataQualityResultRuleRuleUniquenessExpectation... uniquenessExpectations) {
            return uniquenessExpectations(List.of(uniquenessExpectations));
        }
        public DatascanDataQualityResultRuleRule build() {
            final var o = new DatascanDataQualityResultRuleRule();
            o.column = column;
            o.dimension = dimension;
            o.ignoreNull = ignoreNull;
            o.nonNullExpectations = nonNullExpectations;
            o.rangeExpectations = rangeExpectations;
            o.regexExpectations = regexExpectations;
            o.rowConditionExpectations = rowConditionExpectations;
            o.setExpectations = setExpectations;
            o.statisticRangeExpectations = statisticRangeExpectations;
            o.tableConditionExpectations = tableConditionExpectations;
            o.threshold = threshold;
            o.uniquenessExpectations = uniquenessExpectations;
            return o;
        }
    }
}
