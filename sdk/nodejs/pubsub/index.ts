// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));

export { GetSubscriptionIamPolicyArgs, GetSubscriptionIamPolicyResult, GetSubscriptionIamPolicyOutputArgs } from "./getSubscriptionIamPolicy";
export const getSubscriptionIamPolicy: typeof import("./getSubscriptionIamPolicy").getSubscriptionIamPolicy = null as any;
export const getSubscriptionIamPolicyOutput: typeof import("./getSubscriptionIamPolicy").getSubscriptionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriptionIamPolicy","getSubscriptionIamPolicyOutput"], () => require("./getSubscriptionIamPolicy"));

export { GetTopicArgs, GetTopicResult, GetTopicOutputArgs } from "./getTopic";
export const getTopic: typeof import("./getTopic").getTopic = null as any;
export const getTopicOutput: typeof import("./getTopic").getTopicOutput = null as any;
utilities.lazyLoad(exports, ["getTopic","getTopicOutput"], () => require("./getTopic"));

export { GetTopicIamPolicyArgs, GetTopicIamPolicyResult, GetTopicIamPolicyOutputArgs } from "./getTopicIamPolicy";
export const getTopicIamPolicy: typeof import("./getTopicIamPolicy").getTopicIamPolicy = null as any;
export const getTopicIamPolicyOutput: typeof import("./getTopicIamPolicy").getTopicIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTopicIamPolicy","getTopicIamPolicyOutput"], () => require("./getTopicIamPolicy"));

export { LiteReservationArgs, LiteReservationState } from "./liteReservation";
export type LiteReservation = import("./liteReservation").LiteReservation;
export const LiteReservation: typeof import("./liteReservation").LiteReservation = null as any;
utilities.lazyLoad(exports, ["LiteReservation"], () => require("./liteReservation"));

export { LiteSubscriptionArgs, LiteSubscriptionState } from "./liteSubscription";
export type LiteSubscription = import("./liteSubscription").LiteSubscription;
export const LiteSubscription: typeof import("./liteSubscription").LiteSubscription = null as any;
utilities.lazyLoad(exports, ["LiteSubscription"], () => require("./liteSubscription"));

export { LiteTopicArgs, LiteTopicState } from "./liteTopic";
export type LiteTopic = import("./liteTopic").LiteTopic;
export const LiteTopic: typeof import("./liteTopic").LiteTopic = null as any;
utilities.lazyLoad(exports, ["LiteTopic"], () => require("./liteTopic"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));

export { SubscriptionIamBindingArgs, SubscriptionIamBindingState } from "./subscriptionIamBinding";
export type SubscriptionIamBinding = import("./subscriptionIamBinding").SubscriptionIamBinding;
export const SubscriptionIamBinding: typeof import("./subscriptionIamBinding").SubscriptionIamBinding = null as any;
utilities.lazyLoad(exports, ["SubscriptionIamBinding"], () => require("./subscriptionIamBinding"));

export { SubscriptionIamMemberArgs, SubscriptionIamMemberState } from "./subscriptionIamMember";
export type SubscriptionIamMember = import("./subscriptionIamMember").SubscriptionIamMember;
export const SubscriptionIamMember: typeof import("./subscriptionIamMember").SubscriptionIamMember = null as any;
utilities.lazyLoad(exports, ["SubscriptionIamMember"], () => require("./subscriptionIamMember"));

export { SubscriptionIamPolicyArgs, SubscriptionIamPolicyState } from "./subscriptionIamPolicy";
export type SubscriptionIamPolicy = import("./subscriptionIamPolicy").SubscriptionIamPolicy;
export const SubscriptionIamPolicy: typeof import("./subscriptionIamPolicy").SubscriptionIamPolicy = null as any;
utilities.lazyLoad(exports, ["SubscriptionIamPolicy"], () => require("./subscriptionIamPolicy"));

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));

export { TopicIamBindingArgs, TopicIamBindingState } from "./topicIamBinding";
export type TopicIamBinding = import("./topicIamBinding").TopicIamBinding;
export const TopicIamBinding: typeof import("./topicIamBinding").TopicIamBinding = null as any;
utilities.lazyLoad(exports, ["TopicIamBinding"], () => require("./topicIamBinding"));

export { TopicIamMemberArgs, TopicIamMemberState } from "./topicIamMember";
export type TopicIamMember = import("./topicIamMember").TopicIamMember;
export const TopicIamMember: typeof import("./topicIamMember").TopicIamMember = null as any;
utilities.lazyLoad(exports, ["TopicIamMember"], () => require("./topicIamMember"));

export { TopicIamPolicyArgs, TopicIamPolicyState } from "./topicIamPolicy";
export type TopicIamPolicy = import("./topicIamPolicy").TopicIamPolicy;
export const TopicIamPolicy: typeof import("./topicIamPolicy").TopicIamPolicy = null as any;
utilities.lazyLoad(exports, ["TopicIamPolicy"], () => require("./topicIamPolicy"));

export * from "./zMixins";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:pubsub/liteReservation:LiteReservation":
                return new LiteReservation(name, <any>undefined, { urn })
            case "gcp:pubsub/liteSubscription:LiteSubscription":
                return new LiteSubscription(name, <any>undefined, { urn })
            case "gcp:pubsub/liteTopic:LiteTopic":
                return new LiteTopic(name, <any>undefined, { urn })
            case "gcp:pubsub/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "gcp:pubsub/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "gcp:pubsub/subscriptionIamBinding:SubscriptionIamBinding":
                return new SubscriptionIamBinding(name, <any>undefined, { urn })
            case "gcp:pubsub/subscriptionIamMember:SubscriptionIamMember":
                return new SubscriptionIamMember(name, <any>undefined, { urn })
            case "gcp:pubsub/subscriptionIamPolicy:SubscriptionIamPolicy":
                return new SubscriptionIamPolicy(name, <any>undefined, { urn })
            case "gcp:pubsub/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            case "gcp:pubsub/topicIamBinding:TopicIamBinding":
                return new TopicIamBinding(name, <any>undefined, { urn })
            case "gcp:pubsub/topicIamMember:TopicIamMember":
                return new TopicIamMember(name, <any>undefined, { urn })
            case "gcp:pubsub/topicIamPolicy:TopicIamPolicy":
                return new TopicIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteReservation", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteSubscription", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteTopic", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/schema", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscription", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/topic", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIamPolicy", _module)
