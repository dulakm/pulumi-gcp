// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessApprovalSettingsArgs, AccessApprovalSettingsState } from "./accessApprovalSettings";
export type AccessApprovalSettings = import("./accessApprovalSettings").AccessApprovalSettings;
export const AccessApprovalSettings: typeof import("./accessApprovalSettings").AccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["AccessApprovalSettings"], () => require("./accessApprovalSettings"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { DefaultServiceAccountsArgs, DefaultServiceAccountsState } from "./defaultServiceAccounts";
export type DefaultServiceAccounts = import("./defaultServiceAccounts").DefaultServiceAccounts;
export const DefaultServiceAccounts: typeof import("./defaultServiceAccounts").DefaultServiceAccounts = null as any;
utilities.lazyLoad(exports, ["DefaultServiceAccounts"], () => require("./defaultServiceAccounts"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetOrganizationPolicyArgs, GetOrganizationPolicyResult, GetOrganizationPolicyOutputArgs } from "./getOrganizationPolicy";
export const getOrganizationPolicy: typeof import("./getOrganizationPolicy").getOrganizationPolicy = null as any;
export const getOrganizationPolicyOutput: typeof import("./getOrganizationPolicy").getOrganizationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPolicy","getOrganizationPolicyOutput"], () => require("./getOrganizationPolicy"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectServiceArgs, GetProjectServiceResult, GetProjectServiceOutputArgs } from "./getProjectService";
export const getProjectService: typeof import("./getProjectService").getProjectService = null as any;
export const getProjectServiceOutput: typeof import("./getProjectService").getProjectServiceOutput = null as any;
utilities.lazyLoad(exports, ["getProjectService","getProjectServiceOutput"], () => require("./getProjectService"));

export { IamAuditConfigArgs, IamAuditConfigState } from "./iamAuditConfig";
export type IamAuditConfig = import("./iamAuditConfig").IamAuditConfig;
export const IamAuditConfig: typeof import("./iamAuditConfig").IamAuditConfig = null as any;
utilities.lazyLoad(exports, ["IamAuditConfig"], () => require("./iamAuditConfig"));

export { IamBindingArgs, IamBindingState } from "./iamBinding";
export type IamBinding = import("./iamBinding").IamBinding;
export const IamBinding: typeof import("./iamBinding").IamBinding = null as any;
utilities.lazyLoad(exports, ["IamBinding"], () => require("./iamBinding"));

export { IamCustomRoleArgs, IamCustomRoleState } from "./iamCustomRole";
export type IamCustomRole = import("./iamCustomRole").IamCustomRole;
export const IamCustomRole: typeof import("./iamCustomRole").IamCustomRole = null as any;
utilities.lazyLoad(exports, ["IamCustomRole"], () => require("./iamCustomRole"));

export { IamMemberArgs, IamMemberState } from "./iamMember";
export type IamMember = import("./iamMember").IamMember;
export const IamMember: typeof import("./iamMember").IamMember = null as any;
utilities.lazyLoad(exports, ["IamMember"], () => require("./iamMember"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { OrganizationPolicyArgs, OrganizationPolicyState } from "./organizationPolicy";
export type OrganizationPolicy = import("./organizationPolicy").OrganizationPolicy;
export const OrganizationPolicy: typeof import("./organizationPolicy").OrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPolicy"], () => require("./organizationPolicy"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceIdentityArgs, ServiceIdentityState } from "./serviceIdentity";
export type ServiceIdentity = import("./serviceIdentity").ServiceIdentity;
export const ServiceIdentity: typeof import("./serviceIdentity").ServiceIdentity = null as any;
utilities.lazyLoad(exports, ["ServiceIdentity"], () => require("./serviceIdentity"));

export { UsageExportBucketArgs, UsageExportBucketState } from "./usageExportBucket";
export type UsageExportBucket = import("./usageExportBucket").UsageExportBucket;
export const UsageExportBucket: typeof import("./usageExportBucket").UsageExportBucket = null as any;
utilities.lazyLoad(exports, ["UsageExportBucket"], () => require("./usageExportBucket"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:projects/accessApprovalSettings:AccessApprovalSettings":
                return new AccessApprovalSettings(name, <any>undefined, { urn })
            case "gcp:projects/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts":
                return new DefaultServiceAccounts(name, <any>undefined, { urn })
            case "gcp:projects/iamAuditConfig:IamAuditConfig":
                return new IamAuditConfig(name, <any>undefined, { urn })
            case "gcp:projects/iamBinding:IamBinding":
                return new IamBinding(name, <any>undefined, { urn })
            case "gcp:projects/iamCustomRole:IamCustomRole":
                return new IamCustomRole(name, <any>undefined, { urn })
            case "gcp:projects/iamMember:IamMember":
                return new IamMember(name, <any>undefined, { urn })
            case "gcp:projects/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "gcp:projects/organizationPolicy:OrganizationPolicy":
                return new OrganizationPolicy(name, <any>undefined, { urn })
            case "gcp:projects/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "gcp:projects/serviceIdentity:ServiceIdentity":
                return new ServiceIdentity(name, <any>undefined, { urn })
            case "gcp:projects/usageExportBucket:UsageExportBucket":
                return new UsageExportBucket(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "projects/accessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/apiKey", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/defaultServiceAccounts", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iamAuditConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iamCustomRole", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/iamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/organizationPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/service", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/serviceIdentity", _module)
pulumi.runtime.registerResourceModule("gcp", "projects/usageExportBucket", _module)
