// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Four different resources help you manage your IAM policy for a organization. Each of these resources serves a different use case:
 *
 * * `gcp.organizations.IamPolicy`: Authoritative. Sets the IAM policy for the organization and replaces any existing policy already attached.
 * * `gcp.organizations.IamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organization are preserved.
 * * `gcp.organizations.IamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organization are preserved.
 * * `gcp.organizations.IamAuditConfig`: Authoritative for a given service. Updates the IAM policy to enable audit logging for the given service.
 *
 * > **Note:** `gcp.organizations.IamPolicy` **cannot** be used in conjunction with `gcp.organizations.IamBinding`, `gcp.organizations.IamMember`, or `gcp.organizations.IamAuditConfig` or they will fight over what your policy should be.
 *
 * > **Note:** `gcp.organizations.IamBinding` resources **can be** used in conjunction with `gcp.organizations.IamMember` resources **only if** they do not grant privilege to the same role.
 *
 * ## google\_organization\_iam\_policy
 *
 * !> **Warning:** New organizations have several default policies which will,
 *    without extreme caution, be **overwritten** by use of this resource.
 *    The safest alternative is to use multiple `gcp.organizations.IamBinding`
 *    resources. This resource makes it easy to remove your own access to
 *    an organization, which will require a call to Google Support to have
 *    fixed, and can take multiple days to resolve.
 *
 *    In general, this resource should only be used with organizations
 *    fully managed by this provider.I f you do use this resource,
 *    the best way to be sure that you are not making dangerous changes is to start
 *    by **importing** your existing policy, and examining the diff very closely.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIamPolicy({
 *     bindings: [{
 *         role: "roles/editor",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const organization = new gcp.organizations.IamPolicy("organization", {
 *     orgId: "1234567890",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIamPolicy({
 *     bindings: [{
 *         condition: {
 *             description: "Expiring at midnight of 2019-12-31",
 *             expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *             title: "expires_after_2019_12_31",
 *         },
 *         members: ["user:jane@example.com"],
 *         role: "roles/editor",
 *     }],
 * });
 * const organization = new gcp.organizations.IamPolicy("organization", {
 *     orgId: "1234567890",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * ## google\_organization\_iam\_binding
 *
 * > **Note:** If `role` is set to `roles/owner` and you don't specify a user or service account you have access to in `members`, you can lock yourself out of your organization.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const organization = new gcp.organizations.IamBinding("organization", {
 *     members: ["user:jane@example.com"],
 *     orgId: "1234567890",
 *     role: "roles/editor",
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const organization = new gcp.organizations.IamBinding("organization", {
 *     condition: {
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title: "expires_after_2019_12_31",
 *     },
 *     members: ["user:jane@example.com"],
 *     orgId: "1234567890",
 *     role: "roles/editor",
 * });
 * ```
 *
 * ## google\_organization\_iam\_member
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const organization = new gcp.organizations.IamMember("organization", {
 *     member: "user:jane@example.com",
 *     orgId: "1234567890",
 *     role: "roles/editor",
 * });
 * ```
 *
 * With IAM Conditions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const organization = new gcp.organizations.IamMember("organization", {
 *     condition: {
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title: "expires_after_2019_12_31",
 *     },
 *     member: "user:jane@example.com",
 *     orgId: "1234567890",
 *     role: "roles/editor",
 * });
 * ```
 *
 * ## google\_organization\_iam\_audit\_config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const organization = new gcp.organizations.IamAuditConfig("organization", {
 *     auditLogConfigs: [
 *         {
 *             logType: "ADMIN_READ",
 *         },
 *         {
 *             exemptedMembers: ["user:joebloggs@hashicorp.com"],
 *             logType: "DATA_READ",
 *         },
 *     ],
 *     orgId: "1234567890",
 *     service: "allServices",
 * });
 * ```
 *
 * ## Import
 *
 * IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
 *
 * This member resource can be imported using the `org_id`, role, and member e.g.
 *
 * ```sh
 *  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization "your-orgid roles/viewer user:foo@example.com"
 * ```
 *
 *  IAM binding imports use space-delimited identifiers; the resource in question and the role.
 *
 * This binding resource can be imported using the `org_id` and role, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization "your-org-id roles/viewer"
 * ```
 *
 *  IAM policy imports use the identifier of the resource in question.
 *
 * This policy resource can be imported using the `org_id`.
 *
 * ```sh
 *  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization your-org-id
 * ```
 *
 *  IAM audit config imports use the identifier of the resource in question and the service, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization "your-organization-id foo.googleapis.com"
 * ```
 *
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 *
 * full name of the custom role, e.g. `organizations/{{org_id}}/roles/{{role_id}}`. -> **Conditional IAM Bindings**If you're importing a IAM binding with a condition block, make sure
 *
 * ```sh
 *  $ pulumi import gcp:organizations/iamPolicy:IamPolicy to include the title of condition, e.g. `google_organization_iam_binding.my_organization "your-org-id roles/{{role_id}} condition-title"`
 * ```
 */
export class IamPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IamPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamPolicyState, opts?: pulumi.CustomResourceOptions): IamPolicy {
        return new IamPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:organizations/iamPolicy:IamPolicy';

    /**
     * Returns true if the given object is an instance of IamPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamPolicy.__pulumiType;
    }

    /**
     * (Computed) The etag of the organization's IAM policy.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The organization id of the target organization.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * The `gcp.organizations.getIamPolicy` data source that represents
     * the IAM policy that will be applied to the organization. The policy will be
     * merged with any existing policy applied to the organization.
     *
     * Changing this updates the policy.
     *
     * Deleting this removes all policies from the organization, locking out users without
     * organization-level access.
     */
    public readonly policyData!: pulumi.Output<string>;

    /**
     * Create a IamPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamPolicyArgs | IamPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamPolicyState | undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["policyData"] = state ? state.policyData : undefined;
        } else {
            const args = argsOrState as IamPolicyArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.policyData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyData'");
            }
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["policyData"] = args ? args.policyData : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamPolicy resources.
 */
export interface IamPolicyState {
    /**
     * (Computed) The etag of the organization's IAM policy.
     */
    etag?: pulumi.Input<string>;
    /**
     * The organization id of the target organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The `gcp.organizations.getIamPolicy` data source that represents
     * the IAM policy that will be applied to the organization. The policy will be
     * merged with any existing policy applied to the organization.
     *
     * Changing this updates the policy.
     *
     * Deleting this removes all policies from the organization, locking out users without
     * organization-level access.
     */
    policyData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamPolicy resource.
 */
export interface IamPolicyArgs {
    /**
     * The organization id of the target organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * The `gcp.organizations.getIamPolicy` data source that represents
     * the IAM policy that will be applied to the organization. The policy will be
     * merged with any existing policy applied to the organization.
     *
     * Changing this updates the policy.
     *
     * Deleting this removes all policies from the organization, locking out users without
     * organization-level access.
     */
    policyData: pulumi.Input<string>;
}
