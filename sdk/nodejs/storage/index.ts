// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketACLArgs, BucketACLState } from "./bucketACL";
export type BucketACL = import("./bucketACL").BucketACL;
export const BucketACL: typeof import("./bucketACL").BucketACL = null as any;
utilities.lazyLoad(exports, ["BucketACL"], () => require("./bucketACL"));

export { BucketAccessControlArgs, BucketAccessControlState } from "./bucketAccessControl";
export type BucketAccessControl = import("./bucketAccessControl").BucketAccessControl;
export const BucketAccessControl: typeof import("./bucketAccessControl").BucketAccessControl = null as any;
utilities.lazyLoad(exports, ["BucketAccessControl"], () => require("./bucketAccessControl"));

export { BucketIamBindingArgs, BucketIamBindingState } from "./bucketIamBinding";
export type BucketIamBinding = import("./bucketIamBinding").BucketIamBinding;
export const BucketIamBinding: typeof import("./bucketIamBinding").BucketIamBinding = null as any;
utilities.lazyLoad(exports, ["BucketIamBinding"], () => require("./bucketIamBinding"));

export { BucketIamMemberArgs, BucketIamMemberState } from "./bucketIamMember";
export type BucketIamMember = import("./bucketIamMember").BucketIamMember;
export const BucketIamMember: typeof import("./bucketIamMember").BucketIamMember = null as any;
utilities.lazyLoad(exports, ["BucketIamMember"], () => require("./bucketIamMember"));

export { BucketIamPolicyArgs, BucketIamPolicyState } from "./bucketIamPolicy";
export type BucketIamPolicy = import("./bucketIamPolicy").BucketIamPolicy;
export const BucketIamPolicy: typeof import("./bucketIamPolicy").BucketIamPolicy = null as any;
utilities.lazyLoad(exports, ["BucketIamPolicy"], () => require("./bucketIamPolicy"));

export { BucketObjectArgs, BucketObjectState } from "./bucketObject";
export type BucketObject = import("./bucketObject").BucketObject;
export const BucketObject: typeof import("./bucketObject").BucketObject = null as any;
utilities.lazyLoad(exports, ["BucketObject"], () => require("./bucketObject"));

export { DefaultObjectACLArgs, DefaultObjectACLState } from "./defaultObjectACL";
export type DefaultObjectACL = import("./defaultObjectACL").DefaultObjectACL;
export const DefaultObjectACL: typeof import("./defaultObjectACL").DefaultObjectACL = null as any;
utilities.lazyLoad(exports, ["DefaultObjectACL"], () => require("./defaultObjectACL"));

export { DefaultObjectAccessControlArgs, DefaultObjectAccessControlState } from "./defaultObjectAccessControl";
export type DefaultObjectAccessControl = import("./defaultObjectAccessControl").DefaultObjectAccessControl;
export const DefaultObjectAccessControl: typeof import("./defaultObjectAccessControl").DefaultObjectAccessControl = null as any;
utilities.lazyLoad(exports, ["DefaultObjectAccessControl"], () => require("./defaultObjectAccessControl"));

export { GetBucketArgs, GetBucketResult, GetBucketOutputArgs } from "./getBucket";
export const getBucket: typeof import("./getBucket").getBucket = null as any;
export const getBucketOutput: typeof import("./getBucket").getBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBucket","getBucketOutput"], () => require("./getBucket"));

export { GetBucketIamPolicyArgs, GetBucketIamPolicyResult, GetBucketIamPolicyOutputArgs } from "./getBucketIamPolicy";
export const getBucketIamPolicy: typeof import("./getBucketIamPolicy").getBucketIamPolicy = null as any;
export const getBucketIamPolicyOutput: typeof import("./getBucketIamPolicy").getBucketIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBucketIamPolicy","getBucketIamPolicyOutput"], () => require("./getBucketIamPolicy"));

export { GetBucketObjectArgs, GetBucketObjectResult, GetBucketObjectOutputArgs } from "./getBucketObject";
export const getBucketObject: typeof import("./getBucketObject").getBucketObject = null as any;
export const getBucketObjectOutput: typeof import("./getBucketObject").getBucketObjectOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObject","getBucketObjectOutput"], () => require("./getBucketObject"));

export { GetBucketObjectContentArgs, GetBucketObjectContentResult, GetBucketObjectContentOutputArgs } from "./getBucketObjectContent";
export const getBucketObjectContent: typeof import("./getBucketObjectContent").getBucketObjectContent = null as any;
export const getBucketObjectContentOutput: typeof import("./getBucketObjectContent").getBucketObjectContentOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObjectContent","getBucketObjectContentOutput"], () => require("./getBucketObjectContent"));

export { GetObjectSignedUrlArgs, GetObjectSignedUrlResult, GetObjectSignedUrlOutputArgs } from "./getObjectSignedUrl";
export const getObjectSignedUrl: typeof import("./getObjectSignedUrl").getObjectSignedUrl = null as any;
export const getObjectSignedUrlOutput: typeof import("./getObjectSignedUrl").getObjectSignedUrlOutput = null as any;
utilities.lazyLoad(exports, ["getObjectSignedUrl","getObjectSignedUrlOutput"], () => require("./getObjectSignedUrl"));

export { GetProjectServiceAccountArgs, GetProjectServiceAccountResult, GetProjectServiceAccountOutputArgs } from "./getProjectServiceAccount";
export const getProjectServiceAccount: typeof import("./getProjectServiceAccount").getProjectServiceAccount = null as any;
export const getProjectServiceAccountOutput: typeof import("./getProjectServiceAccount").getProjectServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getProjectServiceAccount","getProjectServiceAccountOutput"], () => require("./getProjectServiceAccount"));

export { GetTransferProjectServiceAccountArgs, GetTransferProjectServiceAccountResult, GetTransferProjectServiceAccountOutputArgs } from "./getTransferProjectServiceAccount";
export const getTransferProjectServiceAccount: typeof import("./getTransferProjectServiceAccount").getTransferProjectServiceAccount = null as any;
export const getTransferProjectServiceAccountOutput: typeof import("./getTransferProjectServiceAccount").getTransferProjectServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getTransferProjectServiceAccount","getTransferProjectServiceAccountOutput"], () => require("./getTransferProjectServiceAccount"));

export { GetTransferProjectServieAccountArgs, GetTransferProjectServieAccountResult, GetTransferProjectServieAccountOutputArgs } from "./getTransferProjectServieAccount";
export const getTransferProjectServieAccount: typeof import("./getTransferProjectServieAccount").getTransferProjectServieAccount = null as any;
export const getTransferProjectServieAccountOutput: typeof import("./getTransferProjectServieAccount").getTransferProjectServieAccountOutput = null as any;
utilities.lazyLoad(exports, ["getTransferProjectServieAccount","getTransferProjectServieAccountOutput"], () => require("./getTransferProjectServieAccount"));

export { HmacKeyArgs, HmacKeyState } from "./hmacKey";
export type HmacKey = import("./hmacKey").HmacKey;
export const HmacKey: typeof import("./hmacKey").HmacKey = null as any;
utilities.lazyLoad(exports, ["HmacKey"], () => require("./hmacKey"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { ObjectACLArgs, ObjectACLState } from "./objectACL";
export type ObjectACL = import("./objectACL").ObjectACL;
export const ObjectACL: typeof import("./objectACL").ObjectACL = null as any;
utilities.lazyLoad(exports, ["ObjectACL"], () => require("./objectACL"));

export { ObjectAccessControlArgs, ObjectAccessControlState } from "./objectAccessControl";
export type ObjectAccessControl = import("./objectAccessControl").ObjectAccessControl;
export const ObjectAccessControl: typeof import("./objectAccessControl").ObjectAccessControl = null as any;
utilities.lazyLoad(exports, ["ObjectAccessControl"], () => require("./objectAccessControl"));

export { TransferAgentPoolArgs, TransferAgentPoolState } from "./transferAgentPool";
export type TransferAgentPool = import("./transferAgentPool").TransferAgentPool;
export const TransferAgentPool: typeof import("./transferAgentPool").TransferAgentPool = null as any;
utilities.lazyLoad(exports, ["TransferAgentPool"], () => require("./transferAgentPool"));

export { TransferJobArgs, TransferJobState } from "./transferJob";
export type TransferJob = import("./transferJob").TransferJob;
export const TransferJob: typeof import("./transferJob").TransferJob = null as any;
utilities.lazyLoad(exports, ["TransferJob"], () => require("./transferJob"));

export * from "./zMixins";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:storage/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "gcp:storage/bucketACL:BucketACL":
                return new BucketACL(name, <any>undefined, { urn })
            case "gcp:storage/bucketAccessControl:BucketAccessControl":
                return new BucketAccessControl(name, <any>undefined, { urn })
            case "gcp:storage/bucketIamBinding:BucketIamBinding":
                return new BucketIamBinding(name, <any>undefined, { urn })
            case "gcp:storage/bucketIamMember:BucketIamMember":
                return new BucketIamMember(name, <any>undefined, { urn })
            case "gcp:storage/bucketIamPolicy:BucketIamPolicy":
                return new BucketIamPolicy(name, <any>undefined, { urn })
            case "gcp:storage/bucketObject:BucketObject":
                return new BucketObject(name, <any>undefined, { urn })
            case "gcp:storage/defaultObjectACL:DefaultObjectACL":
                return new DefaultObjectACL(name, <any>undefined, { urn })
            case "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl":
                return new DefaultObjectAccessControl(name, <any>undefined, { urn })
            case "gcp:storage/hmacKey:HmacKey":
                return new HmacKey(name, <any>undefined, { urn })
            case "gcp:storage/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "gcp:storage/objectACL:ObjectACL":
                return new ObjectACL(name, <any>undefined, { urn })
            case "gcp:storage/objectAccessControl:ObjectAccessControl":
                return new ObjectAccessControl(name, <any>undefined, { urn })
            case "gcp:storage/transferAgentPool:TransferAgentPool":
                return new TransferAgentPool(name, <any>undefined, { urn })
            case "gcp:storage/transferJob:TransferJob":
                return new TransferJob(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "storage/bucket", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/bucketACL", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/bucketAccessControl", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/bucketIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/bucketIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/bucketIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/bucketObject", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/defaultObjectACL", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/defaultObjectAccessControl", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/hmacKey", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/notification", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/objectACL", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/objectAccessControl", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/transferAgentPool", _module)
pulumi.runtime.registerResourceModule("gcp", "storage/transferJob", _module)
