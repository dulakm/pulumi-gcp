// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Three different resources help you manage IAM policies on dataproc jobs. Each of these resources serves a different use case:
 *
 * * `gcp.dataproc.JobIamPolicy`: Authoritative. Sets the IAM policy for the job and replaces any existing policy already attached.
 * * `gcp.dataproc.JobIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the job are preserved.
 * * `gcp.dataproc.JobIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the job are preserved.
 *
 * > **Note:** `gcp.dataproc.JobIamPolicy` **cannot** be used in conjunction with `gcp.dataproc.JobIamBinding` and `gcp.dataproc.JobIamMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the job as `gcp.dataproc.JobIamPolicy` replaces the entire policy.
 *
 * > **Note:** `gcp.dataproc.JobIamBinding` resources **can be** used in conjunction with `gcp.dataproc.JobIamMember` resources **only if** they do not grant privilege to the same role.
 *
 * ## google\_dataproc\_job\_iam\_policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIamPolicy({
 *     bindings: [{
 *         role: "roles/editor",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const editor = new gcp.dataproc.JobIamPolicy("editor", {
 *     project: "your-project",
 *     region: "your-region",
 *     jobId: "your-dataproc-job",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * ## google\_dataproc\_job\_iam\_binding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const editor = new gcp.dataproc.JobIamBinding("editor", {
 *     jobId: "your-dataproc-job",
 *     members: ["user:jane@example.com"],
 *     role: "roles/editor",
 * });
 * ```
 *
 * ## google\_dataproc\_job\_iam\_member
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const editor = new gcp.dataproc.JobIamMember("editor", {
 *     jobId: "your-dataproc-job",
 *     member: "user:jane@example.com",
 *     role: "roles/editor",
 * });
 * ```
 *
 * ## Import
 *
 * Job IAM resources can be imported using the project, region, job id, role and/or member.
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/jobIamPolicy:JobIamPolicy editor "projects/{project}/regions/{region}/jobs/{job_id}"
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/jobIamPolicy:JobIamPolicy editor "projects/{project}/regions/{region}/jobs/{job_id} roles/editor"
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/jobIamPolicy:JobIamPolicy editor "projects/{project}/regions/{region}/jobs/{job_id} roles/editor user:jane@example.com"
 * ```
 *
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 *
 * full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
 */
export class JobIamPolicy extends pulumi.CustomResource {
    /**
     * Get an existing JobIamPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobIamPolicyState, opts?: pulumi.CustomResourceOptions): JobIamPolicy {
        return new JobIamPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:dataproc/jobIamPolicy:JobIamPolicy';

    /**
     * Returns true if the given object is an instance of JobIamPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JobIamPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JobIamPolicy.__pulumiType;
    }

    /**
     * (Computed) The etag of the jobs's IAM policy.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public readonly jobId!: pulumi.Output<string>;
    /**
     * The policy data generated by a `gcp.organizations.getIamPolicy` data source.
     *
     * - - -
     */
    public readonly policyData!: pulumi.Output<string>;
    /**
     * The project in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a JobIamPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobIamPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobIamPolicyArgs | JobIamPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobIamPolicyState | undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["policyData"] = state ? state.policyData : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as JobIamPolicyArgs | undefined;
            if ((!args || args.jobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobId'");
            }
            if ((!args || args.policyData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyData'");
            }
            resourceInputs["jobId"] = args ? args.jobId : undefined;
            resourceInputs["policyData"] = args ? args.policyData : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JobIamPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JobIamPolicy resources.
 */
export interface JobIamPolicyState {
    /**
     * (Computed) The etag of the jobs's IAM policy.
     */
    etag?: pulumi.Input<string>;
    jobId?: pulumi.Input<string>;
    /**
     * The policy data generated by a `gcp.organizations.getIamPolicy` data source.
     *
     * - - -
     */
    policyData?: pulumi.Input<string>;
    /**
     * The project in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    project?: pulumi.Input<string>;
    /**
     * The region in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JobIamPolicy resource.
 */
export interface JobIamPolicyArgs {
    jobId: pulumi.Input<string>;
    /**
     * The policy data generated by a `gcp.organizations.getIamPolicy` data source.
     *
     * - - -
     */
    policyData: pulumi.Input<string>;
    /**
     * The project in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    project?: pulumi.Input<string>;
    /**
     * The region in which the job belongs. If it
     * is not provided, the provider will use a default.
     */
    region?: pulumi.Input<string>;
}
