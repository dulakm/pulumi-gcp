// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateIssuanceConfigArgs, CertificateIssuanceConfigState } from "./certificateIssuanceConfig";
export type CertificateIssuanceConfig = import("./certificateIssuanceConfig").CertificateIssuanceConfig;
export const CertificateIssuanceConfig: typeof import("./certificateIssuanceConfig").CertificateIssuanceConfig = null as any;
utilities.lazyLoad(exports, ["CertificateIssuanceConfig"], () => require("./certificateIssuanceConfig"));

export { CertificateMapArgs, CertificateMapState } from "./certificateMap";
export type CertificateMap = import("./certificateMap").CertificateMap;
export const CertificateMap: typeof import("./certificateMap").CertificateMap = null as any;
utilities.lazyLoad(exports, ["CertificateMap"], () => require("./certificateMap"));

export { CertificateMapEntryArgs, CertificateMapEntryState } from "./certificateMapEntry";
export type CertificateMapEntry = import("./certificateMapEntry").CertificateMapEntry;
export const CertificateMapEntry: typeof import("./certificateMapEntry").CertificateMapEntry = null as any;
utilities.lazyLoad(exports, ["CertificateMapEntry"], () => require("./certificateMapEntry"));

export { DnsAuthorizationArgs, DnsAuthorizationState } from "./dnsAuthorization";
export type DnsAuthorization = import("./dnsAuthorization").DnsAuthorization;
export const DnsAuthorization: typeof import("./dnsAuthorization").DnsAuthorization = null as any;
utilities.lazyLoad(exports, ["DnsAuthorization"], () => require("./dnsAuthorization"));

export { ExternalAccountKeyArgs, ExternalAccountKeyState } from "./externalAccountKey";
export type ExternalAccountKey = import("./externalAccountKey").ExternalAccountKey;
export const ExternalAccountKey: typeof import("./externalAccountKey").ExternalAccountKey = null as any;
utilities.lazyLoad(exports, ["ExternalAccountKey"], () => require("./externalAccountKey"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:certificatemanager/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig":
                return new CertificateIssuanceConfig(name, <any>undefined, { urn })
            case "gcp:certificatemanager/certificateMap:CertificateMap":
                return new CertificateMap(name, <any>undefined, { urn })
            case "gcp:certificatemanager/certificateMapEntry:CertificateMapEntry":
                return new CertificateMapEntry(name, <any>undefined, { urn })
            case "gcp:certificatemanager/dnsAuthorization:DnsAuthorization":
                return new DnsAuthorization(name, <any>undefined, { urn })
            case "gcp:certificatemanager/externalAccountKey:ExternalAccountKey":
                return new ExternalAccountKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "certificatemanager/certificate", _module)
pulumi.runtime.registerResourceModule("gcp", "certificatemanager/certificateIssuanceConfig", _module)
pulumi.runtime.registerResourceModule("gcp", "certificatemanager/certificateMap", _module)
pulumi.runtime.registerResourceModule("gcp", "certificatemanager/certificateMapEntry", _module)
pulumi.runtime.registerResourceModule("gcp", "certificatemanager/dnsAuthorization", _module)
pulumi.runtime.registerResourceModule("gcp", "certificatemanager/externalAccountKey", _module)
