// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountAccessTokenArgs, GetAccountAccessTokenResult, GetAccountAccessTokenOutputArgs } from "./getAccountAccessToken";
export const getAccountAccessToken: typeof import("./getAccountAccessToken").getAccountAccessToken = null as any;
export const getAccountAccessTokenOutput: typeof import("./getAccountAccessToken").getAccountAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAccessToken","getAccountAccessTokenOutput"], () => require("./getAccountAccessToken"));

export { GetAccountIdTokenArgs, GetAccountIdTokenResult, GetAccountIdTokenOutputArgs } from "./getAccountIdToken";
export const getAccountIdToken: typeof import("./getAccountIdToken").getAccountIdToken = null as any;
export const getAccountIdTokenOutput: typeof import("./getAccountIdToken").getAccountIdTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAccountIdToken","getAccountIdTokenOutput"], () => require("./getAccountIdToken"));

export { GetAccountJwtArgs, GetAccountJwtResult, GetAccountJwtOutputArgs } from "./getAccountJwt";
export const getAccountJwt: typeof import("./getAccountJwt").getAccountJwt = null as any;
export const getAccountJwtOutput: typeof import("./getAccountJwt").getAccountJwtOutput = null as any;
utilities.lazyLoad(exports, ["getAccountJwt","getAccountJwtOutput"], () => require("./getAccountJwt"));

export { GetAccountKeyArgs, GetAccountKeyResult, GetAccountKeyOutputArgs } from "./getAccountKey";
export const getAccountKey: typeof import("./getAccountKey").getAccountKey = null as any;
export const getAccountKeyOutput: typeof import("./getAccountKey").getAccountKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAccountKey","getAccountKeyOutput"], () => require("./getAccountKey"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { IamBindingArgs, IamBindingState } from "./iamBinding";
export type IamBinding = import("./iamBinding").IamBinding;
export const IamBinding: typeof import("./iamBinding").IamBinding = null as any;
utilities.lazyLoad(exports, ["IamBinding"], () => require("./iamBinding"));

export { IamMemberArgs, IamMemberState } from "./iamMember";
export type IamMember = import("./iamMember").IamMember;
export const IamMember: typeof import("./iamMember").IamMember = null as any;
utilities.lazyLoad(exports, ["IamMember"], () => require("./iamMember"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:serviceAccount/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "gcp:serviceAccount/iamBinding:IamBinding":
                return new IamBinding(name, <any>undefined, { urn })
            case "gcp:serviceAccount/iamMember:IamMember":
                return new IamMember(name, <any>undefined, { urn })
            case "gcp:serviceAccount/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "gcp:serviceAccount/key:Key":
                return new Key(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/account", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/key", _module)
