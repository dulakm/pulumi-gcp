// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseIamBindingArgs, DatabaseIamBindingState } from "./databaseIamBinding";
export type DatabaseIamBinding = import("./databaseIamBinding").DatabaseIamBinding;
export const DatabaseIamBinding: typeof import("./databaseIamBinding").DatabaseIamBinding = null as any;
utilities.lazyLoad(exports, ["DatabaseIamBinding"], () => require("./databaseIamBinding"));

export { DatabaseIamMemberArgs, DatabaseIamMemberState } from "./databaseIamMember";
export type DatabaseIamMember = import("./databaseIamMember").DatabaseIamMember;
export const DatabaseIamMember: typeof import("./databaseIamMember").DatabaseIamMember = null as any;
utilities.lazyLoad(exports, ["DatabaseIamMember"], () => require("./databaseIamMember"));

export { DatabaseIamPolicyArgs, DatabaseIamPolicyState } from "./databaseIamPolicy";
export type DatabaseIamPolicy = import("./databaseIamPolicy").DatabaseIamPolicy;
export const DatabaseIamPolicy: typeof import("./databaseIamPolicy").DatabaseIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatabaseIamPolicy"], () => require("./databaseIamPolicy"));

export { GetDatabaseIamPolicyArgs, GetDatabaseIamPolicyResult, GetDatabaseIamPolicyOutputArgs } from "./getDatabaseIamPolicy";
export const getDatabaseIamPolicy: typeof import("./getDatabaseIamPolicy").getDatabaseIamPolicy = null as any;
export const getDatabaseIamPolicyOutput: typeof import("./getDatabaseIamPolicy").getDatabaseIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseIamPolicy","getDatabaseIamPolicyOutput"], () => require("./getDatabaseIamPolicy"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceIamPolicyArgs, GetInstanceIamPolicyResult, GetInstanceIamPolicyOutputArgs } from "./getInstanceIamPolicy";
export const getInstanceIamPolicy: typeof import("./getInstanceIamPolicy").getInstanceIamPolicy = null as any;
export const getInstanceIamPolicyOutput: typeof import("./getInstanceIamPolicy").getInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceIamPolicy","getInstanceIamPolicyOutput"], () => require("./getInstanceIamPolicy"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceIamBindingArgs, InstanceIamBindingState } from "./instanceIamBinding";
export type InstanceIamBinding = import("./instanceIamBinding").InstanceIamBinding;
export const InstanceIamBinding: typeof import("./instanceIamBinding").InstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["InstanceIamBinding"], () => require("./instanceIamBinding"));

export { InstanceIamMemberArgs, InstanceIamMemberState } from "./instanceIamMember";
export type InstanceIamMember = import("./instanceIamMember").InstanceIamMember;
export const InstanceIamMember: typeof import("./instanceIamMember").InstanceIamMember = null as any;
utilities.lazyLoad(exports, ["InstanceIamMember"], () => require("./instanceIamMember"));

export { InstanceIamPolicyArgs, InstanceIamPolicyState } from "./instanceIamPolicy";
export type InstanceIamPolicy = import("./instanceIamPolicy").InstanceIamPolicy;
export const InstanceIamPolicy: typeof import("./instanceIamPolicy").InstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["InstanceIamPolicy"], () => require("./instanceIamPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:spanner/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "gcp:spanner/databaseIamBinding:DatabaseIamBinding":
                return new DatabaseIamBinding(name, <any>undefined, { urn })
            case "gcp:spanner/databaseIamMember:DatabaseIamMember":
                return new DatabaseIamMember(name, <any>undefined, { urn })
            case "gcp:spanner/databaseIamPolicy:DatabaseIamPolicy":
                return new DatabaseIamPolicy(name, <any>undefined, { urn })
            case "gcp:spanner/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "gcp:spanner/instanceIamBinding:InstanceIamBinding":
                return new InstanceIamBinding(name, <any>undefined, { urn })
            case "gcp:spanner/instanceIamMember:InstanceIamMember":
                return new InstanceIamMember(name, <any>undefined, { urn })
            case "gcp:spanner/instanceIamPolicy:InstanceIamPolicy":
                return new InstanceIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "spanner/database", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/databaseIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/databaseIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/databaseIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instance", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "spanner/instanceIamPolicy", _module)
