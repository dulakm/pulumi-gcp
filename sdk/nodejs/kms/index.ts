// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CryptoKeyArgs, CryptoKeyState } from "./cryptoKey";
export type CryptoKey = import("./cryptoKey").CryptoKey;
export const CryptoKey: typeof import("./cryptoKey").CryptoKey = null as any;
utilities.lazyLoad(exports, ["CryptoKey"], () => require("./cryptoKey"));

export { CryptoKeyIamBindingArgs, CryptoKeyIamBindingState } from "./cryptoKeyIamBinding";
export type CryptoKeyIamBinding = import("./cryptoKeyIamBinding").CryptoKeyIamBinding;
export const CryptoKeyIamBinding: typeof import("./cryptoKeyIamBinding").CryptoKeyIamBinding = null as any;
utilities.lazyLoad(exports, ["CryptoKeyIamBinding"], () => require("./cryptoKeyIamBinding"));

export { CryptoKeyIamMemberArgs, CryptoKeyIamMemberState } from "./cryptoKeyIamMember";
export type CryptoKeyIamMember = import("./cryptoKeyIamMember").CryptoKeyIamMember;
export const CryptoKeyIamMember: typeof import("./cryptoKeyIamMember").CryptoKeyIamMember = null as any;
utilities.lazyLoad(exports, ["CryptoKeyIamMember"], () => require("./cryptoKeyIamMember"));

export { CryptoKeyIamPolicyArgs, CryptoKeyIamPolicyState } from "./cryptoKeyIamPolicy";
export type CryptoKeyIamPolicy = import("./cryptoKeyIamPolicy").CryptoKeyIamPolicy;
export const CryptoKeyIamPolicy: typeof import("./cryptoKeyIamPolicy").CryptoKeyIamPolicy = null as any;
utilities.lazyLoad(exports, ["CryptoKeyIamPolicy"], () => require("./cryptoKeyIamPolicy"));

export { CryptoKeyVersionArgs, CryptoKeyVersionState } from "./cryptoKeyVersion";
export type CryptoKeyVersion = import("./cryptoKeyVersion").CryptoKeyVersion;
export const CryptoKeyVersion: typeof import("./cryptoKeyVersion").CryptoKeyVersion = null as any;
utilities.lazyLoad(exports, ["CryptoKeyVersion"], () => require("./cryptoKeyVersion"));

export { GetCryptoKeyIamPolicyArgs, GetCryptoKeyIamPolicyResult, GetCryptoKeyIamPolicyOutputArgs } from "./getCryptoKeyIamPolicy";
export const getCryptoKeyIamPolicy: typeof import("./getCryptoKeyIamPolicy").getCryptoKeyIamPolicy = null as any;
export const getCryptoKeyIamPolicyOutput: typeof import("./getCryptoKeyIamPolicy").getCryptoKeyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoKeyIamPolicy","getCryptoKeyIamPolicyOutput"], () => require("./getCryptoKeyIamPolicy"));

export { GetKMSCryptoKeyArgs, GetKMSCryptoKeyResult, GetKMSCryptoKeyOutputArgs } from "./getKMSCryptoKey";
export const getKMSCryptoKey: typeof import("./getKMSCryptoKey").getKMSCryptoKey = null as any;
export const getKMSCryptoKeyOutput: typeof import("./getKMSCryptoKey").getKMSCryptoKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKMSCryptoKey","getKMSCryptoKeyOutput"], () => require("./getKMSCryptoKey"));

export { GetKMSCryptoKeyVersionArgs, GetKMSCryptoKeyVersionResult, GetKMSCryptoKeyVersionOutputArgs } from "./getKMSCryptoKeyVersion";
export const getKMSCryptoKeyVersion: typeof import("./getKMSCryptoKeyVersion").getKMSCryptoKeyVersion = null as any;
export const getKMSCryptoKeyVersionOutput: typeof import("./getKMSCryptoKeyVersion").getKMSCryptoKeyVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKMSCryptoKeyVersion","getKMSCryptoKeyVersionOutput"], () => require("./getKMSCryptoKeyVersion"));

export { GetKMSKeyRingArgs, GetKMSKeyRingResult, GetKMSKeyRingOutputArgs } from "./getKMSKeyRing";
export const getKMSKeyRing: typeof import("./getKMSKeyRing").getKMSKeyRing = null as any;
export const getKMSKeyRingOutput: typeof import("./getKMSKeyRing").getKMSKeyRingOutput = null as any;
utilities.lazyLoad(exports, ["getKMSKeyRing","getKMSKeyRingOutput"], () => require("./getKMSKeyRing"));

export { GetKMSSecretArgs, GetKMSSecretResult, GetKMSSecretOutputArgs } from "./getKMSSecret";
export const getKMSSecret: typeof import("./getKMSSecret").getKMSSecret = null as any;
export const getKMSSecretOutput: typeof import("./getKMSSecret").getKMSSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKMSSecret","getKMSSecretOutput"], () => require("./getKMSSecret"));

export { GetKMSSecretAsymmetricArgs, GetKMSSecretAsymmetricResult, GetKMSSecretAsymmetricOutputArgs } from "./getKMSSecretAsymmetric";
export const getKMSSecretAsymmetric: typeof import("./getKMSSecretAsymmetric").getKMSSecretAsymmetric = null as any;
export const getKMSSecretAsymmetricOutput: typeof import("./getKMSSecretAsymmetric").getKMSSecretAsymmetricOutput = null as any;
utilities.lazyLoad(exports, ["getKMSSecretAsymmetric","getKMSSecretAsymmetricOutput"], () => require("./getKMSSecretAsymmetric"));

export { GetKMSSecretCiphertextArgs, GetKMSSecretCiphertextResult, GetKMSSecretCiphertextOutputArgs } from "./getKMSSecretCiphertext";
export const getKMSSecretCiphertext: typeof import("./getKMSSecretCiphertext").getKMSSecretCiphertext = null as any;
export const getKMSSecretCiphertextOutput: typeof import("./getKMSSecretCiphertext").getKMSSecretCiphertextOutput = null as any;
utilities.lazyLoad(exports, ["getKMSSecretCiphertext","getKMSSecretCiphertextOutput"], () => require("./getKMSSecretCiphertext"));

export { GetKeyRingIamPolicyArgs, GetKeyRingIamPolicyResult, GetKeyRingIamPolicyOutputArgs } from "./getKeyRingIamPolicy";
export const getKeyRingIamPolicy: typeof import("./getKeyRingIamPolicy").getKeyRingIamPolicy = null as any;
export const getKeyRingIamPolicyOutput: typeof import("./getKeyRingIamPolicy").getKeyRingIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKeyRingIamPolicy","getKeyRingIamPolicyOutput"], () => require("./getKeyRingIamPolicy"));

export { KeyRingArgs, KeyRingState } from "./keyRing";
export type KeyRing = import("./keyRing").KeyRing;
export const KeyRing: typeof import("./keyRing").KeyRing = null as any;
utilities.lazyLoad(exports, ["KeyRing"], () => require("./keyRing"));

export { KeyRingIamBindingArgs, KeyRingIamBindingState } from "./keyRingIamBinding";
export type KeyRingIamBinding = import("./keyRingIamBinding").KeyRingIamBinding;
export const KeyRingIamBinding: typeof import("./keyRingIamBinding").KeyRingIamBinding = null as any;
utilities.lazyLoad(exports, ["KeyRingIamBinding"], () => require("./keyRingIamBinding"));

export { KeyRingIamMemberArgs, KeyRingIamMemberState } from "./keyRingIamMember";
export type KeyRingIamMember = import("./keyRingIamMember").KeyRingIamMember;
export const KeyRingIamMember: typeof import("./keyRingIamMember").KeyRingIamMember = null as any;
utilities.lazyLoad(exports, ["KeyRingIamMember"], () => require("./keyRingIamMember"));

export { KeyRingIamPolicyArgs, KeyRingIamPolicyState } from "./keyRingIamPolicy";
export type KeyRingIamPolicy = import("./keyRingIamPolicy").KeyRingIamPolicy;
export const KeyRingIamPolicy: typeof import("./keyRingIamPolicy").KeyRingIamPolicy = null as any;
utilities.lazyLoad(exports, ["KeyRingIamPolicy"], () => require("./keyRingIamPolicy"));

export { KeyRingImportJobArgs, KeyRingImportJobState } from "./keyRingImportJob";
export type KeyRingImportJob = import("./keyRingImportJob").KeyRingImportJob;
export const KeyRingImportJob: typeof import("./keyRingImportJob").KeyRingImportJob = null as any;
utilities.lazyLoad(exports, ["KeyRingImportJob"], () => require("./keyRingImportJob"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { SecretCiphertextArgs, SecretCiphertextState } from "./secretCiphertext";
export type SecretCiphertext = import("./secretCiphertext").SecretCiphertext;
export const SecretCiphertext: typeof import("./secretCiphertext").SecretCiphertext = null as any;
utilities.lazyLoad(exports, ["SecretCiphertext"], () => require("./secretCiphertext"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcp:kms/cryptoKey:CryptoKey":
                return new CryptoKey(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyIamBinding:CryptoKeyIamBinding":
                return new CryptoKeyIamBinding(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyIamMember:CryptoKeyIamMember":
                return new CryptoKeyIamMember(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyIamPolicy:CryptoKeyIamPolicy":
                return new CryptoKeyIamPolicy(name, <any>undefined, { urn })
            case "gcp:kms/cryptoKeyVersion:CryptoKeyVersion":
                return new CryptoKeyVersion(name, <any>undefined, { urn })
            case "gcp:kms/keyRing:KeyRing":
                return new KeyRing(name, <any>undefined, { urn })
            case "gcp:kms/keyRingIamBinding:KeyRingIamBinding":
                return new KeyRingIamBinding(name, <any>undefined, { urn })
            case "gcp:kms/keyRingIamMember:KeyRingIamMember":
                return new KeyRingIamMember(name, <any>undefined, { urn })
            case "gcp:kms/keyRingIamPolicy:KeyRingIamPolicy":
                return new KeyRingIamPolicy(name, <any>undefined, { urn })
            case "gcp:kms/keyRingImportJob:KeyRingImportJob":
                return new KeyRingImportJob(name, <any>undefined, { urn })
            case "gcp:kms/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "gcp:kms/secretCiphertext:SecretCiphertext":
                return new SecretCiphertext(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKey", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyVersion", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRing", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIamBinding", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIamMember", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIamPolicy", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingImportJob", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/registry", _module)
pulumi.runtime.registerResourceModule("gcp", "kms/secretCiphertext", _module)
