// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex.Outputs
{

    [OutputType]
    public sealed class DatascanDataQualityResultRuleRule
    {
        /// <summary>
        /// The unnested column which this rule is evaluated against.
        /// </summary>
        public readonly string? Column;
        /// <summary>
        /// The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are ["COMPLETENESS", "ACCURACY", "CONSISTENCY", "VALIDITY", "UNIQUENESS", "INTEGRITY"]
        /// </summary>
        public readonly string? Dimension;
        /// <summary>
        /// Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
        /// </summary>
        public readonly bool? IgnoreNull;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is null.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleNonNullExpectation> NonNullExpectations;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleRangeExpectation> RangeExpectations;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value matches a specified regex.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleRegexExpectation> RegexExpectations;
        /// <summary>
        /// Table rule which evaluates whether each row passes the specified condition.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleRowConditionExpectation> RowConditionExpectations;
        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is contained by a specified set.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleSetExpectation> SetExpectations;
        /// <summary>
        /// ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectation> StatisticRangeExpectations;
        /// <summary>
        /// Table rule which evaluates whether the provided expression is true.
        /// Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleTableConditionExpectation> TableConditionExpectations;
        /// <summary>
        /// The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
        /// </summary>
        public readonly int? Threshold;
        /// <summary>
        /// ColumnAggregate rule which evaluates whether the column has duplicates.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleUniquenessExpectation> UniquenessExpectations;

        [OutputConstructor]
        private DatascanDataQualityResultRuleRule(
            string? column,

            string? dimension,

            bool? ignoreNull,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleNonNullExpectation> nonNullExpectations,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleRangeExpectation> rangeExpectations,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleRegexExpectation> regexExpectations,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleRowConditionExpectation> rowConditionExpectations,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleSetExpectation> setExpectations,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectation> statisticRangeExpectations,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleTableConditionExpectation> tableConditionExpectations,

            int? threshold,

            ImmutableArray<Outputs.DatascanDataQualityResultRuleRuleUniquenessExpectation> uniquenessExpectations)
        {
            Column = column;
            Dimension = dimension;
            IgnoreNull = ignoreNull;
            NonNullExpectations = nonNullExpectations;
            RangeExpectations = rangeExpectations;
            RegexExpectations = regexExpectations;
            RowConditionExpectations = rowConditionExpectations;
            SetExpectations = setExpectations;
            StatisticRangeExpectations = statisticRangeExpectations;
            TableConditionExpectations = tableConditionExpectations;
            Threshold = threshold;
            UniquenessExpectations = uniquenessExpectations;
        }
    }
}
