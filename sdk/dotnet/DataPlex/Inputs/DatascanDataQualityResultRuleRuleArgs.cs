// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex.Inputs
{

    public sealed class DatascanDataQualityResultRuleRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unnested column which this rule is evaluated against.
        /// </summary>
        [Input("column")]
        public Input<string>? Column { get; set; }

        /// <summary>
        /// The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are ["COMPLETENESS", "ACCURACY", "CONSISTENCY", "VALIDITY", "UNIQUENESS", "INTEGRITY"]
        /// </summary>
        [Input("dimension")]
        public Input<string>? Dimension { get; set; }

        /// <summary>
        /// Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
        /// </summary>
        [Input("ignoreNull")]
        public Input<bool>? IgnoreNull { get; set; }

        [Input("nonNullExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleNonNullExpectationArgs>? _nonNullExpectations;

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is null.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleNonNullExpectationArgs> NonNullExpectations
        {
            get => _nonNullExpectations ?? (_nonNullExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleNonNullExpectationArgs>());
            set => _nonNullExpectations = value;
        }

        [Input("rangeExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleRangeExpectationArgs>? _rangeExpectations;

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleRangeExpectationArgs> RangeExpectations
        {
            get => _rangeExpectations ?? (_rangeExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleRangeExpectationArgs>());
            set => _rangeExpectations = value;
        }

        [Input("regexExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleRegexExpectationArgs>? _regexExpectations;

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value matches a specified regex.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleRegexExpectationArgs> RegexExpectations
        {
            get => _regexExpectations ?? (_regexExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleRegexExpectationArgs>());
            set => _regexExpectations = value;
        }

        [Input("rowConditionExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleRowConditionExpectationArgs>? _rowConditionExpectations;

        /// <summary>
        /// Table rule which evaluates whether each row passes the specified condition.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleRowConditionExpectationArgs> RowConditionExpectations
        {
            get => _rowConditionExpectations ?? (_rowConditionExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleRowConditionExpectationArgs>());
            set => _rowConditionExpectations = value;
        }

        [Input("setExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleSetExpectationArgs>? _setExpectations;

        /// <summary>
        /// ColumnMap rule which evaluates whether each column value is contained by a specified set.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleSetExpectationArgs> SetExpectations
        {
            get => _setExpectations ?? (_setExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleSetExpectationArgs>());
            set => _setExpectations = value;
        }

        [Input("statisticRangeExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs>? _statisticRangeExpectations;

        /// <summary>
        /// ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs> StatisticRangeExpectations
        {
            get => _statisticRangeExpectations ?? (_statisticRangeExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleStatisticRangeExpectationArgs>());
            set => _statisticRangeExpectations = value;
        }

        [Input("tableConditionExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleTableConditionExpectationArgs>? _tableConditionExpectations;

        /// <summary>
        /// Table rule which evaluates whether the provided expression is true.
        /// Structure is documented below.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleTableConditionExpectationArgs> TableConditionExpectations
        {
            get => _tableConditionExpectations ?? (_tableConditionExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleTableConditionExpectationArgs>());
            set => _tableConditionExpectations = value;
        }

        /// <summary>
        /// The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        [Input("uniquenessExpectations")]
        private InputList<Inputs.DatascanDataQualityResultRuleRuleUniquenessExpectationArgs>? _uniquenessExpectations;

        /// <summary>
        /// ColumnAggregate rule which evaluates whether the column has duplicates.
        /// </summary>
        public InputList<Inputs.DatascanDataQualityResultRuleRuleUniquenessExpectationArgs> UniquenessExpectations
        {
            get => _uniquenessExpectations ?? (_uniquenessExpectations = new InputList<Inputs.DatascanDataQualityResultRuleRuleUniquenessExpectationArgs>());
            set => _uniquenessExpectations = value;
        }

        public DatascanDataQualityResultRuleRuleArgs()
        {
        }
        public static new DatascanDataQualityResultRuleRuleArgs Empty => new DatascanDataQualityResultRuleRuleArgs();
    }
}
