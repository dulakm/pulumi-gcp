// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.DataPlex.Inputs
{

    public sealed class DatascanDataProfileResultProfileFieldProfileIntegerProfileGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Average of non-null values in the scanned data. NaN, if the field has a NaN.
        /// </summary>
        [Input("average")]
        public Input<int>? Average { get; set; }

        /// <summary>
        /// Maximum of non-null values in the scanned data. NaN, if the field has a NaN.
        /// </summary>
        [Input("max")]
        public Input<string>? Max { get; set; }

        /// <summary>
        /// Minimum of non-null values in the scanned data. NaN, if the field has a NaN.
        /// </summary>
        [Input("min")]
        public Input<string>? Min { get; set; }

        /// <summary>
        /// A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.
        /// </summary>
        [Input("quartiles")]
        public Input<string>? Quartiles { get; set; }

        /// <summary>
        /// Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.
        /// </summary>
        [Input("standardDeviation")]
        public Input<int>? StandardDeviation { get; set; }

        public DatascanDataProfileResultProfileFieldProfileIntegerProfileGetArgs()
        {
        }
        public static new DatascanDataProfileResultProfileFieldProfileIntegerProfileGetArgs Empty => new DatascanDataProfileResultProfileFieldProfileIntegerProfileGetArgs();
    }
}
