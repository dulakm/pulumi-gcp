// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Gcp.Organizations
{
    /// <summary>
    /// Four different resources help you manage your IAM policy for a organization. Each of these resources serves a different use case:
    /// 
    /// * `gcp.organizations.IamPolicy`: Authoritative. Sets the IAM policy for the organization and replaces any existing policy already attached.
    /// * `gcp.organizations.IamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organization are preserved.
    /// * `gcp.organizations.IamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organization are preserved.
    /// * `gcp.organizations.IamAuditConfig`: Authoritative for a given service. Updates the IAM policy to enable audit logging for the given service.
    /// 
    /// &gt; **Note:** `gcp.organizations.IamPolicy` **cannot** be used in conjunction with `gcp.organizations.IamBinding`, `gcp.organizations.IamMember`, or `gcp.organizations.IamAuditConfig` or they will fight over what your policy should be.
    /// 
    /// &gt; **Note:** `gcp.organizations.IamBinding` resources **can be** used in conjunction with `gcp.organizations.IamMember` resources **only if** they do not grant privilege to the same role.
    /// 
    /// ## google\_organization\_iam\_policy
    /// 
    /// !&gt; **Warning:** New organizations have several default policies which will,
    ///    without extreme caution, be **overwritten** by use of this resource.
    ///    The safest alternative is to use multiple `gcp.organizations.IamBinding`
    ///    resources. This resource makes it easy to remove your own access to
    ///    an organization, which will require a call to Google Support to have
    ///    fixed, and can take multiple days to resolve.
    /// 
    ///    In general, this resource should only be used with organizations
    ///    fully managed by this provider.I f you do use this resource,
    ///    the best way to be sure that you are not making dangerous changes is to start
    ///    by **importing** your existing policy, and examining the diff very closely.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admin = Gcp.Organizations.GetIamPolicy.Invoke(new()
    ///     {
    ///         Bindings = new[]
    ///         {
    ///             new Gcp.Organizations.Inputs.GetIamPolicyBindingInputArgs
    ///             {
    ///                 Role = "roles/editor",
    ///                 Members = new[]
    ///                 {
    ///                     "user:jane@example.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var organization = new Gcp.Organizations.IamPolicy("organization", new()
    ///     {
    ///         OrgId = "1234567890",
    ///         PolicyData = admin.Apply(getIamPolicyResult =&gt; getIamPolicyResult.PolicyData),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// With IAM Conditions:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admin = Gcp.Organizations.GetIamPolicy.Invoke(new()
    ///     {
    ///         Bindings = new[]
    ///         {
    ///             new Gcp.Organizations.Inputs.GetIamPolicyBindingInputArgs
    ///             {
    ///                 Condition = new Gcp.Organizations.Inputs.GetIamPolicyBindingConditionInputArgs
    ///                 {
    ///                     Description = "Expiring at midnight of 2019-12-31",
    ///                     Expression = "request.time &lt; timestamp(\"2020-01-01T00:00:00Z\")",
    ///                     Title = "expires_after_2019_12_31",
    ///                 },
    ///                 Members = new[]
    ///                 {
    ///                     "user:jane@example.com",
    ///                 },
    ///                 Role = "roles/editor",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var organization = new Gcp.Organizations.IamPolicy("organization", new()
    ///     {
    ///         OrgId = "1234567890",
    ///         PolicyData = admin.Apply(getIamPolicyResult =&gt; getIamPolicyResult.PolicyData),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## google\_organization\_iam\_binding
    /// 
    /// &gt; **Note:** If `role` is set to `roles/owner` and you don't specify a user or service account you have access to in `members`, you can lock yourself out of your organization.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var organization = new Gcp.Organizations.IamBinding("organization", new()
    ///     {
    ///         Members = new[]
    ///         {
    ///             "user:jane@example.com",
    ///         },
    ///         OrgId = "1234567890",
    ///         Role = "roles/editor",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// With IAM Conditions:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var organization = new Gcp.Organizations.IamBinding("organization", new()
    ///     {
    ///         Condition = new Gcp.Organizations.Inputs.IamBindingConditionArgs
    ///         {
    ///             Description = "Expiring at midnight of 2019-12-31",
    ///             Expression = "request.time &lt; timestamp(\"2020-01-01T00:00:00Z\")",
    ///             Title = "expires_after_2019_12_31",
    ///         },
    ///         Members = new[]
    ///         {
    ///             "user:jane@example.com",
    ///         },
    ///         OrgId = "1234567890",
    ///         Role = "roles/editor",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## google\_organization\_iam\_member
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var organization = new Gcp.Organizations.IamMember("organization", new()
    ///     {
    ///         Member = "user:jane@example.com",
    ///         OrgId = "1234567890",
    ///         Role = "roles/editor",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// With IAM Conditions:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var organization = new Gcp.Organizations.IamMember("organization", new()
    ///     {
    ///         Condition = new Gcp.Organizations.Inputs.IamMemberConditionArgs
    ///         {
    ///             Description = "Expiring at midnight of 2019-12-31",
    ///             Expression = "request.time &lt; timestamp(\"2020-01-01T00:00:00Z\")",
    ///             Title = "expires_after_2019_12_31",
    ///         },
    ///         Member = "user:jane@example.com",
    ///         OrgId = "1234567890",
    ///         Role = "roles/editor",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## google\_organization\_iam\_audit\_config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Gcp = Pulumi.Gcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var organization = new Gcp.Organizations.IamAuditConfig("organization", new()
    ///     {
    ///         AuditLogConfigs = new[]
    ///         {
    ///             new Gcp.Organizations.Inputs.IamAuditConfigAuditLogConfigArgs
    ///             {
    ///                 LogType = "ADMIN_READ",
    ///             },
    ///             new Gcp.Organizations.Inputs.IamAuditConfigAuditLogConfigArgs
    ///             {
    ///                 ExemptedMembers = new[]
    ///                 {
    ///                     "user:joebloggs@hashicorp.com",
    ///                 },
    ///                 LogType = "DATA_READ",
    ///             },
    ///         },
    ///         OrgId = "1234567890",
    ///         Service = "allServices",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
    /// 
    /// This member resource can be imported using the `org_id`, role, and member e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization "your-orgid roles/viewer user:foo@example.com"
    /// ```
    /// 
    ///  IAM binding imports use space-delimited identifiers; the resource in question and the role.
    /// 
    /// This binding resource can be imported using the `org_id` and role, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization "your-org-id roles/viewer"
    /// ```
    /// 
    ///  IAM policy imports use the identifier of the resource in question.
    /// 
    /// This policy resource can be imported using the `org_id`.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization your-org-id
    /// ```
    /// 
    ///  IAM audit config imports use the identifier of the resource in question and the service, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/iamPolicy:IamPolicy my_organization "your-organization-id foo.googleapis.com"
    /// ```
    /// 
    ///  -&gt; **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
    /// 
    /// full name of the custom role, e.g. `organizations/{{org_id}}/roles/{{role_id}}`. -&gt; **Conditional IAM Bindings**If you're importing a IAM binding with a condition block, make sure
    /// 
    /// ```sh
    ///  $ pulumi import gcp:organizations/iamPolicy:IamPolicy to include the title of condition, e.g. `google_organization_iam_binding.my_organization "your-org-id roles/{{role_id}} condition-title"`
    /// ```
    /// </summary>
    [GcpResourceType("gcp:organizations/iamPolicy:IamPolicy")]
    public partial class IamPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Computed) The etag of the organization's IAM policy.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The organization id of the target organization.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The `gcp.organizations.getIamPolicy` data source that represents
        /// the IAM policy that will be applied to the organization. The policy will be
        /// merged with any existing policy applied to the organization.
        /// 
        /// Changing this updates the policy.
        /// 
        /// Deleting this removes all policies from the organization, locking out users without
        /// organization-level access.
        /// </summary>
        [Output("policyData")]
        public Output<string> PolicyData { get; private set; } = null!;


        /// <summary>
        /// Create a IamPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IamPolicy(string name, IamPolicyArgs args, CustomResourceOptions? options = null)
            : base("gcp:organizations/iamPolicy:IamPolicy", name, args ?? new IamPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IamPolicy(string name, Input<string> id, IamPolicyState? state = null, CustomResourceOptions? options = null)
            : base("gcp:organizations/iamPolicy:IamPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IamPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IamPolicy Get(string name, Input<string> id, IamPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new IamPolicy(name, id, state, options);
        }
    }

    public sealed class IamPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The organization id of the target organization.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The `gcp.organizations.getIamPolicy` data source that represents
        /// the IAM policy that will be applied to the organization. The policy will be
        /// merged with any existing policy applied to the organization.
        /// 
        /// Changing this updates the policy.
        /// 
        /// Deleting this removes all policies from the organization, locking out users without
        /// organization-level access.
        /// </summary>
        [Input("policyData", required: true)]
        public Input<string> PolicyData { get; set; } = null!;

        public IamPolicyArgs()
        {
        }
        public static new IamPolicyArgs Empty => new IamPolicyArgs();
    }

    public sealed class IamPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Computed) The etag of the organization's IAM policy.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The organization id of the target organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The `gcp.organizations.getIamPolicy` data source that represents
        /// the IAM policy that will be applied to the organization. The policy will be
        /// merged with any existing policy applied to the organization.
        /// 
        /// Changing this updates the policy.
        /// 
        /// Deleting this removes all policies from the organization, locking out users without
        /// organization-level access.
        /// </summary>
        [Input("policyData")]
        public Input<string>? PolicyData { get; set; }

        public IamPolicyState()
        {
        }
        public static new IamPolicyState Empty => new IamPolicyState();
    }
}
